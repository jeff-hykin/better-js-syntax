- source: import
  scopesBegin:
    - meta.import
  scopes:
    - keyword.control.import
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: >-
    data:text/javascript;base64,IWdsb2JhbFRoaXMuRGVubyAmJiAoZ2xvYmFsVGhpcy5EZW5vID0ge2FyZ3M6IFtdLGJ1aWxkOiB7b3M6ICJsaW51eCIsYXJjaDogIng4Nl82NCIsdmVyc2lvbjogIiIsfSxwaWQ6IDEsZW52OiB7Z2V0KF8pIHtyZXR1cm4gbnVsbDt9LHNldChfLCBfXykge3JldHVybiBudWxsO30sfSx9KTs=
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: import
  scopes:
    - keyword.control.import
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: zip
  scopes:
    - variable.other.readwrite.alias
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: from
  scopes:
    - keyword.control.from
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'https://deno.land/x/good@1.7.1.1/array.js'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.import
    - string.quoted.double
- source: //
  scopesBegin:
    - comment.line.double-slash
    - punctuation.definition.comment
- source: //
- source: //
  scopesEnd:
    - punctuation.definition.comment
- source: ' all the wasm setup stuff'
- source: //
  scopesBegin:
    - punctuation.definition.comment
- source: //
  scopesEnd:
    - comment.line.double-slash
    - punctuation.definition.comment
- source: import
  scopesBegin:
    - meta.import
  scopes:
    - keyword.control.import
- source: uint8ArrayOfWasmTreeSitter
  scopes:
    - variable.other.readwrite.alias
- source: from
  scopes:
    - keyword.control.from
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ./tree_sitter.wasm.binaryified.js
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.import
    - string.quoted.double
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' https://esm.sh/v135/web-tree-sitter@0.22.5/denonext/web-tree-sitter.mjs'
  scopesEnd:
    - comment.line.double-slash
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: __Process$
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '{'
  scopesBegin:
    - meta.objectliteral
  scopes:
    - punctuation.definition.block
- source: versions
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: '{'
  scopesBegin:
    - meta.objectliteral
  scopes:
    - punctuation.definition.block
- source: node
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '1'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.object.member
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.object.member
    - meta.objectliteral
- source: ','
  scopes:
    - punctuation.separator.comma
- source: argv
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: import
  scopes:
    - keyword.control.import
- source: .
  scopes:
    - punctuation.accessor
- source: meta
  scopes:
    - support.variable.property.importmeta
- source: .
  scopes:
    - punctuation.accessor
- source: href
  scopes:
    - variable.other.property
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.object.member
    - meta.array.literal
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.var.expr
    - meta.objectliteral
- source: import
  scopesBegin:
    - meta.import
  scopes:
    - keyword.control.import
- source: '*'
  scopes:
    - constant.language.import-export-all
- source: as
  scopes:
    - keyword.control.as
- source: fs
  scopes:
    - variable.other.readwrite.alias
- source: from
  scopes:
    - keyword.control.from
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'https://deno.land/std@0.177.0/node/fs.ts'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: import
  scopes:
    - keyword.control.import
- source: '*'
  scopes:
    - constant.language.import-export-all
- source: as
  scopes:
    - keyword.control.as
- source: nodePath
  scopes:
    - variable.other.readwrite.alias
- source: from
  scopes:
    - keyword.control.from
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'https://deno.land/std@0.177.0/node/path.ts'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.import
    - string.quoted.double
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: Module
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '{'
  scopesBegin:
    - meta.objectliteral
    - punctuation.definition.block
- source: '}'
  scopesEnd:
    - meta.objectliteral
    - punctuation.definition.block
- source: var
  scopes:
    - storage.type
- source: moduleOverrides
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Object
  scopesBegin:
    - meta.function-call
  scopes:
    - support.class.builtin
- source: .
  scopes:
    - punctuation.accessor
- source: assign
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.objectliteral
    - punctuation.definition.block
- source: '}'
  scopesEnd:
    - meta.objectliteral
    - punctuation.definition.block
- source: ','
  scopes:
    - punctuation.separator.comma
- source: Module
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: arguments_
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '['
  scopesBegin:
    - meta.array.literal
    - meta.brace.square
- source: ']'
  scopesEnd:
    - meta.array.literal
    - meta.brace.square
- source: ','
  scopes:
    - punctuation.separator.comma
- source: thisProgram
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ./this.program
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.comma
- source: quit_
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: throw
  scopes:
    - keyword.control.trycatch
- source: t
  scopes:
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.arrow
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ENVIRONMENT_IS_WEB
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: 'false'
  scopes:
    - constant.language.boolean.false
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ENVIRONMENT_IS_WORKER
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: 'false'
  scopes:
    - constant.language.boolean.false
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ENVIRONMENT_IS_NODE
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: 'true'
  scopes:
    - constant.language.boolean.true
- source: ','
  scopes:
    - punctuation.separator.comma
- source: scriptDirectory
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.comma
- source: read_
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: readAsync
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: readBinary
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
  scopesEnd:
    - meta.var.expr
- source: function
  scopesBegin:
    - meta.function
  scopes:
    - storage.type.function
- source: locateFile
  scopes:
    - meta.definition.function
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: locateFile
  scopes:
    - variable.other.property
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: Module
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: locateFile
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: scriptDirectory
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: scriptDirectory
  scopes:
    - variable.other.readwrite
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: e
  scopes:
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.function
    - meta.block
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: (
  scopes:
    - meta.brace.round
- source: scriptDirectory
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ENVIRONMENT_IS_WORKER
  scopes:
    - variable.other.constant
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: nodePath
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: dirname
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: scriptDirectory
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: /
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: /_virtual/esm.sh/v135/web-tree-sitter@0.22.5/denonext/
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: read_
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: isFileURI
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: URL
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: nodePath
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: normalize
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: fs
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: readFileSync
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: void
  scopes:
    - keyword.operator.expression.void
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: utf8
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: readBinary
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: t
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: read_
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: 'true'
  scopes:
    - constant.language.boolean.true
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: return
  scopes:
    - keyword.control.flow.return
- source: t
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: buffer
  scopes:
    - variable.other.property
- source: '||'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Uint8Array
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.arrow
    - meta.block
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: readAsync
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: _
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: s
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: 'true'
  scopes:
    - constant.language.boolean.true
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: isFileURI
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: URL
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: nodePath
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: normalize
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: fs
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: readFile
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: s
  scopes:
    - variable.other.readwrite
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: void
  scopes:
    - keyword.operator.expression.void
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: utf8
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: r
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: a
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: r
  scopes:
    - variable.other.readwrite
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: _
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: r
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: t
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: s
  scopes:
    - variable.other.readwrite
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: a
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: buffer
  scopes:
    - variable.other.property
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: a
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.arrow
    - meta.block
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.arrow
    - meta.block
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '!'
  scopes:
    - keyword.operator.logical
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: thisProgram
  scopes:
    - variable.other.property
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: __Process$
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: argv
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
- source: '>'
  scopes:
    - keyword.operator.relational
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: thisProgram
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: __Process$
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: argv
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: .
  scopesBegin:
    - meta.function-call
  scopes:
    - punctuation.accessor
- source: replace
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: /
  scopesBegin:
    - string.regexp
  scopes:
    - punctuation.definition.string.begin
- source: \\
  scopes:
    - constant.character.escape.backslash.regexp
- source: /
  scopes:
    - punctuation.definition.string.end
- source: g
  scopes:
    - keyword.other
  scopesEnd:
    - string.regexp
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: /
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: arguments_
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: __Process$
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: argv
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: slice
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: typeof
  scopes:
    - keyword.operator.expression.typeof
- source: module
  scopes:
    - support.type.object.module
- source: <
  scopes:
    - keyword.operator.relational
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: u
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: module
  scopes:
    - support.type.object.module
- source: .
  scopes:
    - punctuation.accessor
- source: exports
  scopes:
    - support.type.object.module
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: quit_
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: throw
  scopes:
    - keyword.control.trycatch
- source: (
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: __Process$
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: exitCode
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.arrow
    - meta.block
- source: )
  scopes:
    - meta.brace.round
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: out
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: print
  scopes:
    - variable.other.property
- source: '||'
  scopes:
    - keyword.operator.logical
- source: console
  scopesBegin:
    - meta.function-call
  scopes:
    - support.class.console
- source: .
  scopes:
    - punctuation.accessor
- source: log
  scopes:
    - support.function.console
- source: .
  scopes:
    - punctuation.accessor
- source: bind
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: console
  scopes:
    - support.class.console
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: err
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: printErr
  scopes:
    - variable.other.property
- source: '||'
  scopes:
    - keyword.operator.logical
- source: console
  scopesBegin:
    - meta.function-call
  scopes:
    - support.class.console
- source: .
  scopes:
    - punctuation.accessor
- source: error
  scopes:
    - support.function.console
- source: .
  scopes:
    - punctuation.accessor
- source: bind
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: console
  scopes:
    - support.class.console
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: Object
  scopesBegin:
    - meta.function-call
  scopes:
    - support.class.builtin
- source: .
  scopes:
    - punctuation.accessor
- source: assign
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: moduleOverrides
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: moduleOverrides
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: 'null'
  scopes:
    - constant.language.null
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: arguments
  scopes:
    - variable.other.property
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: arguments_
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: arguments
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: thisProgram
  scopes:
    - variable.other.property
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: thisProgram
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: thisProgram
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: quit
  scopes:
    - variable.other.property
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: quit_
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: quit
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: dynamicLibraries
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: dynamicLibraries
  scopes:
    - variable.other.property
- source: '||'
  scopes:
    - keyword.operator.logical
- source: '['
  scopesBegin:
    - meta.array.literal
    - meta.brace.square
- source: ']'
  scopesEnd:
    - meta.array.literal
    - meta.brace.square
- source: ','
  scopes:
    - punctuation.separator.comma
- source: wasmBinary
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: wasmMemory
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
  scopesEnd:
    - meta.var.expr
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: wasmBinary
  scopes:
    - variable.other.property
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: wasmBinary
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: wasmBinary
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: typeof
  scopes:
    - keyword.operator.expression.typeof
- source: WebAssembly
  scopes:
    - variable.other.readwrite
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: object
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: abort
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: no native wasm support detected
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: ABORT
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: 'false'
  scopes:
    - constant.language.boolean.false
- source: ','
  scopes:
    - punctuation.separator.comma
- source: EXITSTATUS
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: HEAP8
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: HEAPU8
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: HEAP16
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: HEAPU16
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: HEAP32
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: HEAPU32
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: HEAPF32
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: HEAPF64
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
  scopesEnd:
    - meta.var.expr
- source: function
  scopesBegin:
    - meta.function
  scopes:
    - storage.type.function
- source: updateMemoryViews
  scopes:
    - meta.definition.function
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: e
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmMemory
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: buffer
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.var.expr
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: HEAP8
  scopes:
    - variable.other.constant.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: HEAP8
  scopes:
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Int8Array
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: HEAP16
  scopes:
    - variable.other.constant.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: HEAP16
  scopes:
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Int16Array
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: HEAPU8
  scopes:
    - variable.other.constant.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: HEAPU8
  scopes:
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Uint8Array
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: HEAPU16
  scopes:
    - variable.other.constant.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: HEAPU16
  scopes:
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Uint16Array
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: HEAP32
  scopes:
    - variable.other.constant.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: HEAP32
  scopes:
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Int32Array
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: HEAPU32
  scopes:
    - variable.other.constant.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: HEAPU32
  scopes:
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Uint32Array
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: HEAPF32
  scopes:
    - variable.other.constant.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: HEAPF32
  scopes:
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Float32Array
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: HEAPF64
  scopes:
    - variable.other.constant.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: HEAPF64
  scopes:
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Float64Array
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.function
    - meta.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: INITIAL_MEMORY
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: INITIAL_MEMORY
  scopes:
    - variable.other.constant.property
- source: '||'
  scopes:
    - keyword.operator.logical
- source: '33554432'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.var.expr
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: (
  scopes:
    - meta.brace.round
- source: wasmMemory
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: wasmMemory
  scopes:
    - variable.other.property
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: wasmMemory
  scopes:
    - variable.other.property
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: WebAssembly
  scopes:
    - entity.name.type.module
- source: .
  scopes:
    - punctuation.accessor
- source: Memory
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.objectliteral
  scopes:
    - punctuation.definition.block
- source: initial
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: INITIAL_MEMORY
  scopes:
    - variable.other.constant
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: '65536'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: maximum
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: '32768'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.object.member
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.objectliteral
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: updateMemoryViews
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: INITIAL_MEMORY
  scopes:
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmMemory
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: buffer
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: byteLength
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: __ATPRERUN__
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '['
  scopesBegin:
    - meta.array.literal
    - meta.brace.square
- source: ']'
  scopesEnd:
    - meta.array.literal
    - meta.brace.square
- source: ','
  scopes:
    - punctuation.separator.comma
- source: __ATINIT__
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '['
  scopesBegin:
    - meta.array.literal
    - meta.brace.square
- source: ']'
  scopesEnd:
    - meta.array.literal
    - meta.brace.square
- source: ','
  scopes:
    - punctuation.separator.comma
- source: __ATMAIN__
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '['
  scopesBegin:
    - meta.array.literal
    - meta.brace.square
- source: ']'
  scopesEnd:
    - meta.array.literal
    - meta.brace.square
- source: ','
  scopes:
    - punctuation.separator.comma
- source: __ATPOSTRUN__
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '['
  scopesBegin:
    - meta.array.literal
    - meta.brace.square
- source: ']'
  scopesEnd:
    - meta.array.literal
    - meta.brace.square
- source: ','
  scopes:
    - punctuation.separator.comma
- source: __RELOC_FUNCS__
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '['
  scopesBegin:
    - meta.array.literal
    - meta.brace.square
- source: ']'
  scopesEnd:
    - meta.array.literal
    - meta.brace.square
- source: ','
  scopes:
    - punctuation.separator.comma
- source: runtimeInitialized
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: 'false'
  scopes:
    - constant.language.boolean.false
  scopesEnd:
    - meta.var.expr
- source: function
  scopesBegin:
    - meta.function
  scopes:
    - storage.type.function
- source: preRun
  scopes:
    - meta.definition.function
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: preRun
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
- source: for
  scopes:
    - keyword.control.loop
- source: (
  scopes:
    - meta.brace.round
- source: typeof
  scopes:
    - keyword.operator.expression.typeof
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: preRun
  scopes:
    - variable.other.property
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: function
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: preRun
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: preRun
  scopes:
    - variable.other.property
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: preRun
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: )
  scopes:
    - meta.brace.round
- source: addOnPreRun
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: preRun
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: shift
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
- source: )
  scopesEnd:
    - meta.brace.round
- source: callRuntimeCallbacks
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: __ATPRERUN__
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: function
  scopes:
    - storage.type.function
- source: initRuntime
  scopes:
    - meta.definition.function
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: (
  scopes:
    - meta.brace.round
- source: runtimeInitialized
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: 'true'
  scopes:
    - constant.language.boolean.true
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: callRuntimeCallbacks
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: __RELOC_FUNCS__
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: callRuntimeCallbacks
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: __ATINIT__
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: function
  scopes:
    - storage.type.function
- source: preMain
  scopes:
    - meta.definition.function
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: callRuntimeCallbacks
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: __ATMAIN__
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: function
  scopes:
    - storage.type.function
- source: postRun
  scopes:
    - meta.definition.function
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: postRun
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
- source: for
  scopes:
    - keyword.control.loop
- source: (
  scopes:
    - meta.brace.round
- source: typeof
  scopes:
    - keyword.operator.expression.typeof
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: postRun
  scopes:
    - variable.other.property
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: function
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: postRun
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: postRun
  scopes:
    - variable.other.property
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: postRun
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: )
  scopes:
    - meta.brace.round
- source: addOnPostRun
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: postRun
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: shift
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
- source: )
  scopesEnd:
    - meta.brace.round
- source: callRuntimeCallbacks
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: __ATPOSTRUN__
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: function
  scopes:
    - storage.type.function
- source: addOnPreRun
  scopes:
    - meta.definition.function
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: __ATPRERUN__
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: unshift
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: function
  scopes:
    - storage.type.function
- source: addOnInit
  scopes:
    - meta.definition.function
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: __ATINIT__
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: unshift
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: function
  scopes:
    - storage.type.function
- source: addOnPostRun
  scopes:
    - meta.definition.function
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: __ATPOSTRUN__
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: unshift
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.function
    - meta.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: runDependencies
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: runDependencyWatcher
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: 'null'
  scopes:
    - constant.language.null
- source: ','
  scopes:
    - punctuation.separator.comma
- source: dependenciesFulfilled
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: 'null'
  scopes:
    - constant.language.null
  scopesEnd:
    - meta.var.expr
- source: function
  scopesBegin:
    - meta.function
  scopes:
    - storage.type.function
- source: getUniqueRunDependency
  scopes:
    - meta.definition.function
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: e
  scopes:
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: function
  scopes:
    - storage.type.function
- source: addRunDependency
  scopes:
    - meta.definition.function
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: runDependencies
  scopes:
    - variable.other.readwrite
- source: ++
  scopes:
    - keyword.operator.increment
- source: ','
  scopes:
    - punctuation.separator.comma
- source: Module
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: monitorRunDependencies
  scopes:
    - entity.name.function
- source: '?.'
  scopes:
    - punctuation.accessor.optional
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: runDependencies
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: function
  scopes:
    - storage.type.function
- source: removeRunDependency
  scopes:
    - meta.definition.function
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: runDependencies
  scopes:
    - variable.other.readwrite
- source: '--'
  scopes:
    - keyword.operator.decrement
- source: ','
  scopes:
    - punctuation.separator.comma
- source: Module
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: monitorRunDependencies
  scopes:
    - entity.name.function
- source: '?.'
  scopes:
    - punctuation.accessor.optional
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: runDependencies
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: runDependencies
  scopes:
    - variable.other.readwrite
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: runDependencyWatcher
  scopes:
    - variable.other.readwrite
- source: '!=='
  scopes:
    - keyword.operator.comparison
- source: 'null'
  scopes:
    - constant.language.null
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: clearInterval
  scopes:
    - meta.function-call
    - support.function
- source: (
  scopes:
    - meta.brace.round
- source: runDependencyWatcher
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: runDependencyWatcher
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: 'null'
  scopes:
    - constant.language.null
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: dependenciesFulfilled
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
- source: )
  scopesEnd:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: t
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: dependenciesFulfilled
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.var.expr
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: (
  scopes:
    - meta.brace.round
- source: dependenciesFulfilled
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: 'null'
  scopes:
    - constant.language.null
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: function
  scopes:
    - storage.type.function
- source: abort
  scopes:
    - meta.definition.function
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: throw
  scopes:
    - keyword.control.trycatch
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: onAbort
  scopes:
    - entity.name.function
- source: '?.'
  scopes:
    - punctuation.accessor.optional
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: err
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Aborted(
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: e
  scopes:
    - variable.other.readwrite
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: )
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: ABORT
  scopes:
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: 'true'
  scopes:
    - constant.language.boolean.true
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: EXITSTATUS
  scopes:
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: . Build with -sASSERTIONS for more info.
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: WebAssembly
  scopes:
    - entity.name.type.module
- source: .
  scopes:
    - punctuation.accessor
- source: RuntimeError
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.function
    - meta.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: dataURIPrefix
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'data:application/octet-stream;base64,'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.comma
- source: isDataURI
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: e
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: startsWith
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: dataURIPrefix
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: isFileURI
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: e
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: startsWith
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'file://'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: wasmBinaryFile
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
  scopesEnd:
    - meta.var.expr
- source: function
  scopesBegin:
    - meta.function
  scopes:
    - storage.type.function
- source: getBinarySync
  scopes:
    - meta.definition.function
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: wasmBinaryFile
  scopes:
    - variable.other.readwrite
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: wasmBinary
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: return
  scopes:
    - keyword.control.flow.return
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Uint8Array
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: wasmBinary
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: readBinary
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: return
  scopes:
    - keyword.control.flow.return
- source: readBinary
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: throw
  scopes:
    - keyword.control.trycatch
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: both async and sync fetching of the wasm failed
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: function
  scopes:
    - storage.type.function
- source: getBinaryPromise
  scopes:
    - meta.definition.function
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: wasmBinary
  scopes:
    - variable.other.readwrite
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: ENVIRONMENT_IS_WEB
  scopes:
    - variable.other.constant
- source: '||'
  scopes:
    - keyword.operator.logical
- source: ENVIRONMENT_IS_WORKER
  scopes:
    - variable.other.constant
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: typeof
  scopes:
    - keyword.operator.expression.typeof
- source: fetch
  scopes:
    - variable.other.readwrite
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: function
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '&&'
  scopesBegin:
    - keyword.operator.logical
- source: '!'
  scopesEnd:
    - keyword.operator.logical
- source: isFileURI
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: return
  scopes:
    - keyword.control.flow.return
- source: fetch
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '{'
  scopesBegin:
    - meta.objectliteral
  scopes:
    - punctuation.definition.block
- source: credentials
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: same-origin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.object.member
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.objectliteral
- source: )
  scopes:
    - meta.brace.round
- source: .
  scopesBegin:
    - meta.function-call
  scopes:
    - punctuation.accessor
- source: then
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: t
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ok
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
- source: throw
  scopes:
    - keyword.control.trycatch
- source: '`'
  scopesBegin:
    - string.template
  scopes:
    - punctuation.definition.string.template.begin
- source: failed to load wasm binary file at '
- source: '${'
  scopesBegin:
    - meta.template.expression
  scopes:
    - punctuation.definition.template-expression.begin
- source: e
  scopes:
    - meta.embedded.line
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.template-expression.end
  scopesEnd:
    - meta.template.expression
- source: ''''
- source: '`'
  scopes:
    - punctuation.definition.string.template.end
  scopesEnd:
    - string.template
- source: return
  scopes:
    - keyword.control.flow.return
- source: t
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: arrayBuffer
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.arrow
    - meta.block
- source: )
  scopes:
    - meta.brace.round
- source: .
  scopesBegin:
    - meta.function-call
  scopes:
    - punctuation.accessor
- source: catch
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: getBinarySync
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: readAsync
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: return
  scopes:
    - keyword.control.flow.return
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Promise
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: _
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: readAsync
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: s
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: t
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Uint8Array
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: s
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.arrow
    - meta.block
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: Promise
  scopesBegin:
    - meta.function-call
  scopes:
    - support.class.promise
- source: .
  scopes:
    - punctuation.accessor
- source: resolve
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: .
  scopesBegin:
    - meta.function-call
  scopes:
    - punctuation.accessor
- source: then
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: getBinarySync
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: function
  scopes:
    - storage.type.function
- source: instantiateArrayBuffer
  scopes:
    - meta.definition.function
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: _
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: Promise
  scopesBegin:
    - meta.function-call
  scopes:
    - support.class.promise
- source: .
  scopes:
    - punctuation.accessor
- source: resolve
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: uint8ArrayOfWasmTreeSitter
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: .
  scopesBegin:
    - meta.function-call
  scopes:
    - punctuation.accessor
- source: then
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: s
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: WebAssembly
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: instantiate
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: s
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: .
  scopesBegin:
    - meta.function-call
  scopes:
    - punctuation.accessor
- source: then
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: _
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: s
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: err
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: '`'
  scopesBegin:
    - string.template
  scopes:
    - punctuation.definition.string.template.begin
- source: 'failed to asynchronously prepare wasm: '
- source: '${'
  scopesBegin:
    - meta.template.expression
  scopes:
    - punctuation.definition.template-expression.begin
- source: s
  scopes:
    - meta.embedded.line
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.template-expression.end
  scopesEnd:
    - meta.template.expression
- source: '`'
  scopes:
    - punctuation.definition.string.template.end
  scopesEnd:
    - string.template
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: abort
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: s
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.arrow
    - meta.block
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: function
  scopes:
    - storage.type.function
- source: instantiateAsync
  scopes:
    - meta.definition.function
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: _
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: s
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: e
  scopes:
    - variable.other.readwrite
- source: '||'
  scopes:
    - keyword.operator.logical
- source: typeof
  scopes:
    - keyword.operator.expression.typeof
- source: WebAssembly
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: instantiateStreaming
  scopes:
    - variable.other.property
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: function
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '||'
  scopes:
    - keyword.operator.logical
- source: isDataURI
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '||'
  scopes:
    - keyword.operator.logical
- source: isFileURI
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '||'
  scopes:
    - keyword.operator.logical
- source: ENVIRONMENT_IS_NODE
  scopes:
    - variable.other.constant
- source: '||'
  scopes:
    - keyword.operator.logical
- source: typeof
  scopes:
    - keyword.operator.expression.typeof
- source: fetch
  scopes:
    - variable.other.readwrite
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: function
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: instantiateArrayBuffer
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: s
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: fetch
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '{'
  scopesBegin:
    - meta.objectliteral
  scopes:
    - punctuation.definition.block
- source: credentials
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: same-origin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.object.member
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.objectliteral
- source: )
  scopes:
    - meta.brace.round
- source: .
  scopesBegin:
    - meta.function-call
  scopes:
    - punctuation.accessor
- source: then
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: r
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: WebAssembly
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: instantiateStreaming
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: r
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: .
  scopesBegin:
    - meta.function-call
  scopes:
    - punctuation.accessor
- source: then
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: s
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: function
  scopesBegin:
    - meta.function.expression
  scopes:
    - storage.type.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: a
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: err
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: '`'
  scopesBegin:
    - string.template
  scopes:
    - punctuation.definition.string.template.begin
- source: 'wasm streaming compile failed: '
- source: '${'
  scopesBegin:
    - meta.template.expression
  scopes:
    - punctuation.definition.template-expression.begin
- source: a
  scopes:
    - meta.embedded.line
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.template-expression.end
  scopesEnd:
    - meta.template.expression
- source: '`'
  scopes:
    - punctuation.definition.string.template.end
  scopesEnd:
    - string.template
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: err
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: falling back to ArrayBuffer instantiation
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: instantiateArrayBuffer
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: s
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.function.expression
    - meta.block
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: function
  scopes:
    - storage.type.function
- source: createWasm
  scopes:
    - meta.definition.function
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: e
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '{'
  scopesBegin:
    - meta.objectliteral
  scopes:
    - punctuation.definition.block
- source: env
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: wasmImports
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: wasi_snapshot_preview1
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: wasmImports
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: GOT.mem
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Proxy
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: wasmImports
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: GOTHandler
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.object.member
    - new.expr
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: GOT.func
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Proxy
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: wasmImports
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: GOTHandler
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.object.member
    - new.expr
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.var.expr
    - meta.objectliteral
- source: function
  scopesBegin:
    - meta.function
  scopes:
    - storage.type.function
- source: t
  scopes:
    - meta.definition.function
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: _
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: s
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: (
  scopes:
    - meta.brace.round
- source: wasmExports
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: _
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: exports
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: wasmExports
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: relocateExports
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: wasmExports
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '1024'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: r
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: getDylinkMetadata
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: s
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: return
  scopes:
    - keyword.control.flow.return
- source: r
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: neededDynlibs
  scopes:
    - variable.other.property
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: dynamicLibraries
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: r
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: neededDynlibs
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: concat
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: dynamicLibraries
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: mergeLibSymbols
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: wasmExports
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: main
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: LDSO
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: init
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: loadDylibs
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: addOnInit
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: __wasm_call_ctors
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: __RELOC_FUNCS__
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: push
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: __wasm_apply_data_relocs
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: removeRunDependency
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: wasm-instantiate
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: wasmExports
  scopes:
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.function
    - meta.block
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: addRunDependency
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: wasm-instantiate
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: instantiateWasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: try
  scopes:
    - keyword.control.trycatch
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: Module
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: instantiateWasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: catch
  scopes:
    - keyword.control.trycatch
- source: (
  scopes:
    - meta.brace.round
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: err
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: '`'
  scopesBegin:
    - string.template
  scopes:
    - punctuation.definition.string.template.begin
- source: 'Module.instantiateWasm callback failed with error: '
- source: '${'
  scopesBegin:
    - meta.template.expression
  scopes:
    - punctuation.definition.template-expression.begin
- source: _
  scopes:
    - meta.embedded.line
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.template-expression.end
  scopesEnd:
    - meta.template.expression
- source: '`'
  scopes:
    - punctuation.definition.string.template.end
  scopesEnd:
    - string.template
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: 'false'
  scopes:
    - constant.language.boolean.false
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: (
  scopes:
    - meta.brace.round
- source: instantiateAsync
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: wasmBinary
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: wasmBinaryFile
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: function
  scopesBegin:
    - meta.function.expression
  scopes:
    - storage.type.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: _
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: t
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: _
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: instance
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: module
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.function.expression
    - meta.block
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: '{'
  scopesBegin:
    - meta.parameter.object-binding-pattern
    - punctuation.definition.binding-pattern.object
- source: '}'
  scopesEnd:
    - meta.parameter.object-binding-pattern
    - punctuation.definition.binding-pattern.object
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.function
    - meta.block
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: (
  scopes:
    - meta.brace.round
- source: wasmBinaryFile
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: tree-sitter.wasm
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: isDataURI
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: wasmBinaryFile
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '||'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: wasmBinaryFile
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: locateFile
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: wasmBinaryFile
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: ASM_CONSTS
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '{'
  scopesBegin:
    - meta.objectliteral
    - punctuation.definition.block
- source: '}'
  scopesEnd:
    - meta.var.expr
    - meta.objectliteral
    - punctuation.definition.block
- source: function
  scopesBegin:
    - meta.function
  scopes:
    - storage.type.function
- source: ExitStatus
  scopes:
    - meta.definition.function
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: name
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ExitStatus
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: message
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '`'
  scopesBegin:
    - string.template
  scopes:
    - punctuation.definition.string.template.begin
- source: Program terminated with exit(
- source: '${'
  scopesBegin:
    - meta.template.expression
  scopes:
    - punctuation.definition.template-expression.begin
- source: e
  scopes:
    - meta.embedded.line
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.template-expression.end
  scopesEnd:
    - meta.template.expression
- source: )
- source: '`'
  scopes:
    - punctuation.definition.string.template.end
  scopesEnd:
    - string.template
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: status
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.function
    - meta.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: GOT
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '{'
  scopesBegin:
    - meta.objectliteral
    - punctuation.definition.block
- source: '}'
  scopesEnd:
    - meta.objectliteral
    - punctuation.definition.block
- source: ','
  scopes:
    - punctuation.separator.comma
- source: currentModuleWeakSymbols
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment
- source: ' @__PURE__ '
- source: '*/'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.block
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Set
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: '['
  scopesBegin:
    - meta.array.literal
    - meta.brace.square
- source: ']'
  scopesEnd:
    - meta.array.literal
    - meta.brace.square
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: ','
  scopes:
    - punctuation.separator.comma
- source: GOTHandler
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '{'
  scopesBegin:
    - meta.objectliteral
  scopes:
    - punctuation.definition.block
- source: get
  scopesBegin:
    - meta.method.declaration
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: _
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: GOT
  scopes:
    - variable.other.constant
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: t
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.var.expr
    - meta.array.literal
- source: return
  scopes:
    - keyword.control.flow.return
- source: _
  scopes:
    - variable.other.readwrite
- source: '||'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: _
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: GOT
  scopes:
    - variable.other.constant
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: t
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: WebAssembly
  scopes:
    - entity.name.type.module
- source: .
  scopes:
    - punctuation.accessor
- source: Global
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.objectliteral
  scopes:
    - punctuation.definition.block
- source: value
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.object.member
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.comma
- source: mutable
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: 'true'
  scopes:
    - constant.language.boolean.true
  scopesEnd:
    - meta.object.member
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.objectliteral
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: currentModuleWeakSymbols
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: has
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '||'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: _
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: required
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: 'true'
  scopes:
    - constant.language.boolean.true
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.method.declaration
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.objectliteral
- source: ','
  scopes:
    - punctuation.separator.comma
- source: callRuntimeCallbacks
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: for
  scopes:
    - keyword.control.loop
- source: (
  scopes:
    - meta.brace.round
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: e
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
- source: '>'
  scopes:
    - keyword.operator.relational
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: )
  scopes:
    - meta.brace.round
- source: e
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: shift
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
- source: (
  scopesEnd:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.arrow
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.comma
- source: UTF8Decoder
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: typeof
  scopes:
    - keyword.operator.expression.typeof
- source: TextDecoder
  scopes:
    - variable.other.readwrite
- source: <
  scopes:
    - keyword.operator.relational
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: u
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: TextDecoder
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: utf8
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: void
  scopes:
    - keyword.operator.expression.void
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: UTF8ArrayToString
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: _
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: for
  scopes:
    - keyword.control.loop
- source: (
  scopes:
    - meta.brace.round
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: s
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: t
  scopes:
    - variable.other.readwrite
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: _
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: r
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: t
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.var.expr
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: e
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: r
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '&&'
  scopesBegin:
    - keyword.operator.logical
- source: '!'
  scopesEnd:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: r
  scopes:
    - variable.other.readwrite
- source: '>='
  scopes:
    - keyword.operator.relational
- source: s
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: )
  scopes:
    - meta.brace.round
- source: ++
  scopes:
    - keyword.operator.increment
- source: r
  scopes:
    - variable.other.readwrite
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: r
  scopes:
    - variable.other.readwrite
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: t
  scopes:
    - variable.other.readwrite
- source: '>'
  scopes:
    - keyword.operator.relational
- source: '16'
  scopes:
    - constant.numeric.decimal
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: e
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: buffer
  scopes:
    - variable.other.property
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: UTF8Decoder
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: return
  scopes:
    - keyword.control.flow.return
- source: UTF8Decoder
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: decode
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: subarray
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: r
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: for
  scopes:
    - keyword.control.loop
- source: (
  scopes:
    - meta.brace.round
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: a
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.var.expr
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: t
  scopes:
    - variable.other.readwrite
- source: <
  scopes:
    - keyword.operator.relational
- source: r
  scopes:
    - variable.other.readwrite
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: o
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: e
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: t
  scopes:
    - variable.other.readwrite
- source: ++
  scopes:
    - keyword.operator.increment
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.var.expr
    - meta.array.literal
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: '128'
  scopes:
    - constant.numeric.decimal
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: o
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: 'n'
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '63'
  scopes:
    - constant.numeric.decimal
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: e
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: t
  scopes:
    - variable.other.readwrite
- source: ++
  scopes:
    - keyword.operator.increment
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.var.expr
    - meta.array.literal
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: '224'
  scopes:
    - constant.numeric.decimal
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: o
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: '192'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: u
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '63'
  scopes:
    - constant.numeric.decimal
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: e
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: t
  scopes:
    - variable.other.readwrite
- source: ++
  scopes:
    - keyword.operator.increment
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.var.expr
    - meta.array.literal
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: o
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: '240'
  scopes:
    - constant.numeric.decimal
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: o
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: '224'
  scopes:
    - constant.numeric.decimal
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: (
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: '15'
  scopes:
    - constant.numeric.decimal
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: o
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '12'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: '|'
  scopes:
    - keyword.operator.bitwise
- source: (
  scopes:
    - meta.brace.round
- source: 'n'
  scopes:
    - variable.other.readwrite
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '6'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: '|'
  scopes:
    - keyword.operator.bitwise
- source: u
  scopes:
    - variable.other.readwrite
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: (
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: '7'
  scopes:
    - constant.numeric.decimal
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: o
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '18'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: '|'
  scopes:
    - keyword.operator.bitwise
- source: (
  scopes:
    - meta.brace.round
- source: 'n'
  scopes:
    - variable.other.readwrite
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '12'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: '|'
  scopes:
    - keyword.operator.bitwise
- source: (
  scopes:
    - meta.brace.round
- source: u
  scopes:
    - variable.other.readwrite
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '6'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: '|'
  scopes:
    - keyword.operator.bitwise
- source: (
  scopes:
    - meta.brace.round
- source: '63'
  scopes:
    - constant.numeric.decimal
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: e
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: t
  scopes:
    - variable.other.readwrite
- source: ++
  scopes:
    - keyword.operator.increment
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: <
  scopes:
    - keyword.operator.relational
- source: '65536'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: a
  scopes:
    - variable.other.readwrite
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: String
  scopesBegin:
    - meta.function-call
  scopes:
    - support.class.builtin
- source: .
  scopes:
    - punctuation.accessor
- source: fromCharCode
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: o
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: else
  scopes:
    - keyword.control.conditional
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: m
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: o
  scopes:
    - variable.other.readwrite
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '65536'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.var.expr
- source: a
  scopes:
    - variable.other.readwrite
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: String
  scopesBegin:
    - meta.function-call
  scopes:
    - support.class.builtin
- source: .
  scopes:
    - punctuation.accessor
- source: fromCharCode
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: '55296'
  scopes:
    - constant.numeric.decimal
- source: '|'
  scopes:
    - keyword.operator.bitwise
- source: (
  scopes:
    - meta.brace.round
- source: m
  scopes:
    - variable.other.readwrite
- source: '>>'
  scopes:
    - keyword.operator.bitwise.shift
- source: '10'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '56320'
  scopes:
    - constant.numeric.decimal
- source: '|'
  scopes:
    - keyword.operator.bitwise
- source: (
  scopes:
    - meta.brace.round
- source: '1023'
  scopes:
    - constant.numeric.decimal
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: m
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.conditional
- source: a
  scopes:
    - variable.other.readwrite
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: String
  scopesBegin:
    - meta.function-call
  scopes:
    - support.class.builtin
- source: .
  scopes:
    - punctuation.accessor
- source: fromCharCode
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopesBegin:
    - meta.brace.round
- source: (
- source: (
  scopesEnd:
    - meta.brace.round
- source: '31'
  scopes:
    - constant.numeric.decimal
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: o
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '6'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: '|'
  scopes:
    - keyword.operator.bitwise
- source: 'n'
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.conditional
- source: a
  scopes:
    - variable.other.readwrite
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: String
  scopesBegin:
    - meta.function-call
  scopes:
    - support.class.builtin
- source: .
  scopes:
    - punctuation.accessor
- source: fromCharCode
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: o
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: a
  scopes:
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.arrow
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.comma
- source: getDylinkMetadata
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: t
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.var.expr
- source: function
  scopesBegin:
    - meta.function
  scopes:
    - storage.type.function
- source: s
  scopes:
    - meta.definition.function
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: for
  scopes:
    - keyword.control.loop
- source: (
  scopes:
    - meta.brace.round
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: h
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: l
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '1'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.var.expr
- source: ;
  scopesBegin:
    - punctuation.terminator.statement
- source: ;
  scopesEnd:
    - punctuation.terminator.statement
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: g
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: e
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: t
  scopes:
    - variable.other.readwrite
- source: ++
  scopes:
    - keyword.operator.increment
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.var.expr
    - meta.array.literal
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopesBegin:
    - meta.brace.round
- source: (
- source: (
  scopesEnd:
    - meta.brace.round
- source: h
  scopes:
    - variable.other.readwrite
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: (
  scopes:
    - meta.brace.round
- source: '127'
  scopes:
    - constant.numeric.decimal
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: g
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: l
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: l
  scopes:
    - variable.other.readwrite
- source: '*='
  scopes:
    - keyword.operator.assignment.compound
- source: '128'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '!'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: '128'
  scopes:
    - constant.numeric.decimal
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: g
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
- source: )
  scopesEnd:
    - meta.brace.round
- source: break
  scopes:
    - keyword.control.loop
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: h
  scopes:
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: function
  scopes:
    - storage.type.function
- source: r
  scopes:
    - meta.definition.function
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: h
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: s
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.var.expr
    - meta.brace.round
- source: return
  scopes:
    - keyword.control.flow.return
- source: UTF8ArrayToString
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: h
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: h
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: h
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: function
  scopes:
    - storage.type.function
- source: a
  scopes:
    - meta.definition.function
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: h
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: l
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: h
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: throw
  scopes:
    - keyword.control.trycatch
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Error
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: l
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.function
    - meta.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: o
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: dylink.0
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.var.expr
    - string.quoted.double
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: instanceof
  scopes:
    - keyword.operator.expression.instanceof
- source: WebAssembly
  scopes:
    - entity.name.type.module
- source: .
  scopes:
    - punctuation.accessor
- source: Module
  scopes:
    - entity.name.type
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: 'n'
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: WebAssembly
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: Module
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: customSections
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: o
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: 'n'
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
- source: '==='
  scopes:
    - keyword.operator.comparison
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: (
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: o
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: dylink
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: 'n'
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: WebAssembly
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: Module
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: customSections
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: o
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: a
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: 'n'
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
- source: '==='
  scopes:
    - keyword.operator.comparison
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: need dylink section
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: _
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Uint8Array
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: 'n'
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: )
  scopes:
    - meta.brace.round
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.conditional
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: a
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Uint32Array
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Uint8Array
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: subarray
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '24'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - new.expr
    - meta.brace.round
- source: .
  scopes:
    - punctuation.accessor
- source: buffer
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: '1836278016'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: need to see wasm magic number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: a
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '8'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '!=='
  scopes:
    - keyword.operator.comparison
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: need the dylink section to be first
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '9'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: u
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: s
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.var.expr
    - meta.brace.round
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: (
  scopes:
    - meta.brace.round
- source: _
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: t
  scopes:
    - variable.other.readwrite
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: u
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: o
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: r
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
- source: )
  scopesEnd:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: m
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '{'
  scopesBegin:
    - meta.objectliteral
  scopes:
    - punctuation.definition.block
- source: neededDynlibs
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: '['
  scopesBegin:
    - meta.array.literal
    - meta.brace.square
- source: ']'
  scopesEnd:
    - meta.object.member
    - meta.array.literal
    - meta.brace.square
- source: ','
  scopes:
    - punctuation.separator.comma
- source: tlsExports
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment
- source: ' @__PURE__ '
- source: '*/'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.block
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Set
  scopes:
    - entity.name.type
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.object.member
    - new.expr
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: weakImports
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment
- source: ' @__PURE__ '
- source: '*/'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.block
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Set
  scopes:
    - entity.name.type
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.object.member
    - new.expr
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.var.expr
    - meta.objectliteral
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: o
  scopes:
    - variable.other.readwrite
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: dylink
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: (
  scopes:
    - meta.brace.round
- source: m
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: memorySize
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: s
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: m
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: memoryAlign
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: s
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: m
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: tableSize
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: s
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: m
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: tableAlign
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: s
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
- source: )
  scopesEnd:
    - meta.brace.round
- source: for
  scopes:
    - keyword.control.loop
- source: (
  scopes:
    - meta.brace.round
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: w
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: s
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: c
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.var.expr
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: c
  scopes:
    - variable.other.readwrite
- source: <
  scopes:
    - keyword.operator.relational
- source: w
  scopes:
    - variable.other.readwrite
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ++
  scopes:
    - keyword.operator.increment
- source: c
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: f
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: r
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.var.expr
    - meta.brace.round
- source: m
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: neededDynlibs
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: push
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: f
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.conditional
- source: for
  scopes:
    - keyword.control.loop
- source: (
  scopes:
    - meta.brace.round
- source: a
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: o
  scopes:
    - variable.other.readwrite
- source: '!=='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: dylink.0
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: t
  scopes:
    - variable.other.readwrite
- source: <
  scopes:
    - keyword.operator.relational
- source: _
  scopes:
    - variable.other.readwrite
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: p
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: e
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: t
  scopes:
    - variable.other.readwrite
- source: ++
  scopes:
    - keyword.operator.increment
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: I
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: s
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.var.expr
    - meta.brace.round
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: p
  scopes:
    - variable.other.readwrite
- source: '==='
  scopes:
    - keyword.operator.comparison
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: m
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: memorySize
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: s
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: m
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: memoryAlign
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: s
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: m
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: tableSize
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: s
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: m
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: tableAlign
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: s
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
- source: )
  scopesEnd:
    - meta.brace.round
- source: else
  scopesBegin:
    - keyword.control.conditional
- source: if
  scopesEnd:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: p
  scopes:
    - variable.other.readwrite
- source: '==='
  scopes:
    - keyword.operator.comparison
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: for
  scopes:
    - keyword.control.loop
- source: (
  scopes:
    - meta.brace.round
- source: w
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: s
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: c
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: c
  scopes:
    - variable.other.readwrite
- source: <
  scopes:
    - keyword.operator.relational
- source: w
  scopes:
    - variable.other.readwrite
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ++
  scopes:
    - keyword.operator.increment
- source: c
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: f
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: r
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: m
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: neededDynlibs
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: push
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: f
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: else
  scopesBegin:
    - keyword.control.conditional
- source: if
  scopesEnd:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: p
  scopes:
    - variable.other.readwrite
- source: '==='
  scopes:
    - keyword.operator.comparison
- source: '3'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: for
  scopes:
    - keyword.control.loop
- source: (
  scopes:
    - meta.brace.round
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: d
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: s
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.var.expr
    - meta.brace.round
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: d
  scopes:
    - variable.other.readwrite
- source: '--'
  scopes:
    - keyword.operator.decrement
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: b
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: r
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.var.expr
    - meta.brace.round
- source: '256'
  scopes:
    - constant.numeric.decimal
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: s
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: m
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: tlsExports
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: add
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: b
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: else
  scopesBegin:
    - keyword.control.conditional
- source: if
  scopesEnd:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: p
  scopes:
    - variable.other.readwrite
- source: '==='
  scopes:
    - keyword.operator.comparison
- source: '4'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: for
  scopes:
    - keyword.control.loop
- source: (
  scopes:
    - meta.brace.round
- source: d
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: s
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: d
  scopes:
    - variable.other.readwrite
- source: '--'
  scopes:
    - keyword.operator.decrement
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: )
  scopes:
    - meta.brace.round
- source: r
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: b
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: r
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: '3'
  scopes:
    - constant.numeric.decimal
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: s
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
- source: )
  scopesEnd:
    - meta.brace.round
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: m
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: weakImports
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: add
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: b
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: else
  scopes:
    - keyword.control.conditional
- source: t
  scopes:
    - variable.other.readwrite
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: I
  scopes:
    - variable.other.constant
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: m
  scopes:
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.var.expr
    - meta.arrow
    - meta.block
- source: function
  scopesBegin:
    - meta.function
  scopes:
    - storage.type.function
- source: getValue
  scopes:
    - meta.definition.function
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i8
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: switch
  scopesBegin:
    - switch-statement.expr
    - switch-expression.expr
  scopes:
    - keyword.control.switch
- source: (
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: t
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: endsWith
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '*'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '*'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - switch-expression.expr
    - meta.brace.round
- source: '{'
  scopesBegin:
    - switch-block.expr
  scopes:
    - punctuation.definition.block
- source: case
  scopesBegin:
    - case-clause.expr
  scopes:
    - keyword.control.switch
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i1
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ':'
  scopes:
    - punctuation.definition.section.case-statement
- source: case
  scopes:
    - keyword.control.switch
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i8
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ':'
  scopes:
    - punctuation.definition.section.case-statement
  scopesEnd:
    - case-clause.expr
- source: return
  scopes:
    - keyword.control.flow.return
- source: HEAP8
  scopes:
    - variable.other.constant
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: e
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: case
  scopesBegin:
    - case-clause.expr
  scopes:
    - keyword.control.switch
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i16
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ':'
  scopes:
    - punctuation.definition.section.case-statement
  scopesEnd:
    - case-clause.expr
- source: return
  scopes:
    - keyword.control.flow.return
- source: HEAP16
  scopes:
    - variable.other.constant
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: e
  scopes:
    - variable.other.readwrite
- source: '>>'
  scopes:
    - keyword.operator.bitwise.shift
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: case
  scopesBegin:
    - case-clause.expr
  scopes:
    - keyword.control.switch
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ':'
  scopes:
    - punctuation.definition.section.case-statement
  scopesEnd:
    - case-clause.expr
- source: return
  scopes:
    - keyword.control.flow.return
- source: HEAP32
  scopes:
    - variable.other.constant
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: e
  scopes:
    - variable.other.readwrite
- source: '>>'
  scopes:
    - keyword.operator.bitwise.shift
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: case
  scopesBegin:
    - case-clause.expr
  scopes:
    - keyword.control.switch
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i64
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ':'
  scopes:
    - punctuation.definition.section.case-statement
  scopesEnd:
    - case-clause.expr
- source: abort
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: to do getValue(i64) use WASM_BIGINT
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: case
  scopesBegin:
    - case-clause.expr
  scopes:
    - keyword.control.switch
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: float
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ':'
  scopes:
    - punctuation.definition.section.case-statement
  scopesEnd:
    - case-clause.expr
- source: return
  scopes:
    - keyword.control.flow.return
- source: HEAPF32
  scopes:
    - variable.other.constant
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: e
  scopes:
    - variable.other.readwrite
- source: '>>'
  scopes:
    - keyword.operator.bitwise.shift
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: case
  scopesBegin:
    - case-clause.expr
  scopes:
    - keyword.control.switch
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: double
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ':'
  scopes:
    - punctuation.definition.section.case-statement
  scopesEnd:
    - case-clause.expr
- source: return
  scopes:
    - keyword.control.flow.return
- source: HEAPF64
  scopes:
    - variable.other.constant
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: e
  scopes:
    - variable.other.readwrite
- source: '>>'
  scopes:
    - keyword.operator.bitwise.shift
- source: '3'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: case
  scopesBegin:
    - case-clause.expr
  scopes:
    - keyword.control.switch
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '*'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ':'
  scopes:
    - punctuation.definition.section.case-statement
  scopesEnd:
    - case-clause.expr
- source: return
  scopes:
    - keyword.control.flow.return
- source: HEAPU32
  scopes:
    - variable.other.constant
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: e
  scopes:
    - variable.other.readwrite
- source: '>>'
  scopes:
    - keyword.operator.bitwise.shift
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: default
  scopesBegin:
    - case-clause.expr
  scopes:
    - keyword.control.switch
- source: ':'
  scopes:
    - punctuation.definition.section.case-statement
  scopesEnd:
    - case-clause.expr
- source: abort
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: '`'
  scopesBegin:
    - string.template
  scopes:
    - punctuation.definition.string.template.begin
- source: 'invalid type for getValue: '
- source: '${'
  scopesBegin:
    - meta.template.expression
  scopes:
    - punctuation.definition.template-expression.begin
- source: t
  scopes:
    - meta.embedded.line
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.template-expression.end
  scopesEnd:
    - meta.template.expression
- source: '`'
  scopes:
    - punctuation.definition.string.template.end
  scopesEnd:
    - string.template
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - switch-block.expr
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - switch-statement.expr
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.function
    - meta.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: newDSO
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: _
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: s
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '{'
  scopesBegin:
    - meta.objectliteral
  scopes:
    - punctuation.definition.block
- source: refcount
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: '0'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: name
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: e
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: exports
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: _
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: global
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: 'true'
  scopes:
    - constant.language.boolean.true
  scopesEnd:
    - meta.object.member
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.var.expr
    - meta.objectliteral
- source: return
  scopes:
    - keyword.control.flow.return
- source: (
  scopes:
    - meta.brace.round
- source: LDSO
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: loadedLibsByName
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: e
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: s
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: 'null'
  scopes:
    - constant.language.null
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: LDSO
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: loadedLibsByHandle
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: t
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: s
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: s
  scopes:
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.arrow
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.comma
- source: LDSO
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '{'
  scopesBegin:
    - meta.objectliteral
  scopes:
    - punctuation.definition.block
- source: loadedLibsByName
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: '{'
  scopesBegin:
    - meta.objectliteral
    - punctuation.definition.block
- source: '}'
  scopesEnd:
    - meta.object.member
    - meta.objectliteral
    - punctuation.definition.block
- source: ','
  scopes:
    - punctuation.separator.comma
- source: loadedLibsByHandle
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: '{'
  scopesBegin:
    - meta.objectliteral
    - punctuation.definition.block
- source: '}'
  scopesEnd:
    - meta.object.member
    - meta.objectliteral
    - punctuation.definition.block
- source: ','
  scopes:
    - punctuation.separator.comma
- source: init
  scopesBegin:
    - meta.method.declaration
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: newDSO
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __main__
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: wasmImports
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.method.declaration
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.objectliteral
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ___heap_base
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '78096'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: zeroMemory
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: HEAPU8
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: fill
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: e
  scopes:
    - variable.other.readwrite
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: alignMemory
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: Math
  scopesBegin:
    - meta.function-call
  scopes:
    - support.constant.math
- source: .
  scopes:
    - punctuation.accessor
- source: ceil
  scopes:
    - support.function.math
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: getMemory
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: runtimeInitialized
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: return
  scopes:
    - keyword.control.flow.return
- source: zeroMemory
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: _malloc
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: t
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ___heap_base
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: t
  scopes:
    - variable.other.readwrite
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: alignMemory
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '16'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: (
  scopes:
    - meta.brace.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: GOT
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: __heap_base
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: GOTHandler
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: get
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: wasmImports
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __heap_base
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.flow.return
- source: (
  scopes:
    - meta.brace.round
- source: ___heap_base
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: GOT
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: __heap_base
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: value
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.arrow
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.comma
- source: isInternalSym
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __cpp_exception
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __c_longjmp
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __wasm_apply_data_relocs
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __dso_handle
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __tls_size
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __tls_align
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __set_stack_limits
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: _emscripten_tls_init
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __wasm_init_tls
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __wasm_call_ctors
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __start_em_asm
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __stop_em_asm
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __start_em_js
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __stop_em_js
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.arrow
    - meta.array.literal
- source: .
  scopesBegin:
    - meta.function-call
  scopes:
    - punctuation.accessor
- source: includes
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '||'
  scopes:
    - keyword.operator.logical
- source: e
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: startsWith
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __em_js__
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: uleb128Encode
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: e
  scopes:
    - variable.other.readwrite
- source: <
  scopes:
    - keyword.operator.relational
- source: '128'
  scopes:
    - constant.numeric.decimal
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: t
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: push
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: t
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: push
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: '%'
  scopes:
    - keyword.operator.arithmetic
- source: '128'
  scopes:
    - constant.numeric.decimal
- source: '|'
  scopes:
    - keyword.operator.bitwise
- source: '128'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: e
  scopes:
    - variable.other.readwrite
- source: '>>'
  scopes:
    - keyword.operator.bitwise.shift
- source: '7'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.arrow
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.comma
- source: sigToWasmTypes
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: for
  scopes:
    - keyword.control.loop
- source: (
  scopes:
    - meta.brace.round
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: t
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '{'
  scopesBegin:
    - meta.objectliteral
  scopes:
    - punctuation.definition.block
- source: i
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.object.member
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.comma
- source: j
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i64
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.object.member
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.comma
- source: f
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: f32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.object.member
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.comma
- source: d
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: f64
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.object.member
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.comma
- source: e
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: externref
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.object.member
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.comma
- source: p
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.object.member
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.objectliteral
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '{'
  scopesBegin:
    - meta.objectliteral
  scopes:
    - punctuation.definition.block
- source: parameters
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: '['
  scopesBegin:
    - meta.array.literal
    - meta.brace.square
- source: ']'
  scopesEnd:
    - meta.object.member
    - meta.array.literal
    - meta.brace.square
- source: ','
  scopes:
    - punctuation.separator.comma
- source: results
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: e
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: v
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: '['
  scopesBegin:
    - meta.array.literal
    - meta.brace.square
- source: ']'
  scopesEnd:
    - meta.array.literal
    - meta.brace.square
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: t
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: e
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.object.member
    - meta.array.literal
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.objectliteral
- source: ','
  scopes:
    - punctuation.separator.comma
- source: s
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '1'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.var.expr
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: s
  scopes:
    - variable.other.readwrite
- source: <
  scopes:
    - keyword.operator.relational
- source: e
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ++
  scopes:
    - keyword.operator.increment
- source: s
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: _
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: parameters
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: push
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: e
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: s
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: return
  scopes:
    - keyword.control.flow.return
- source: _
  scopes:
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.arrow
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.comma
- source: generateFuncType
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: _
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: e
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: slice
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: s
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: e
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: slice
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: r
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '{'
  scopesBegin:
    - meta.objectliteral
  scopes:
    - punctuation.definition.block
- source: i
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: '127'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: p
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: '127'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: j
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: '126'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: f
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: '125'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: d
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: '124'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: e
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: '111'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.object.member
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.var.expr
    - meta.objectliteral
- source: t
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: push
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: '96'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: uleb128Encode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: s
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: for
  scopes:
    - keyword.control.loop
- source: (
  scopes:
    - meta.brace.round
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: a
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.var.expr
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: a
  scopes:
    - variable.other.readwrite
- source: <
  scopes:
    - keyword.operator.relational
- source: s
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ++
  scopes:
    - keyword.operator.increment
- source: a
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: t
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: push
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: r
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: s
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: a
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: _
  scopes:
    - variable.other.readwrite
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: v
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: t
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: push
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: t
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: push
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: r
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: _
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.arrow
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.comma
- source: convertJsFunctionToWasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: typeof
  scopes:
    - keyword.operator.expression.typeof
- source: WebAssembly
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: Function
  scopes:
    - variable.other.property
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: function
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: return
  scopes:
    - keyword.control.flow.return
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: WebAssembly
  scopes:
    - entity.name.type.module
- source: .
  scopes:
    - punctuation.accessor
- source: Function
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: sigToWasmTypes
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: _
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.var.expr
    - meta.array.literal
- source: generateFuncType
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: s
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '97'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '115'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '109'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.var.expr
    - meta.array.literal
- source: uleb128Encode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: _
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
- source: ','
  scopes:
    - punctuation.separator.comma
- source: s
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: s
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: push
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: ...
  scopes:
    - keyword.operator.spread
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: s
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: push
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '7'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '101'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '102'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '7'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '5'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '102'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: r
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: WebAssembly
  scopes:
    - entity.name.type.module
- source: .
  scopes:
    - punctuation.accessor
- source: Module
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Uint8Array
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: s
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
    - new.expr
- source: return
  scopes:
    - keyword.control.flow.return
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: WebAssembly
  scopes:
    - entity.name.type.module
- source: .
  scopes:
    - punctuation.accessor
- source: Instance
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: r
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '{'
  scopesBegin:
    - meta.objectliteral
  scopes:
    - punctuation.definition.block
- source: e
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: '{'
  scopesBegin:
    - meta.objectliteral
  scopes:
    - punctuation.definition.block
- source: f
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: e
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.object.member
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.object.member
    - meta.objectliteral
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.objectliteral
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: .
  scopes:
    - punctuation.accessor
- source: exports
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: f
  scopes:
    - variable.other.property
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.arrow
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.comma
- source: wasmTableMirror
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '['
  scopesBegin:
    - meta.array.literal
    - meta.brace.square
- source: ']'
  scopesEnd:
    - meta.array.literal
    - meta.brace.square
- source: ','
  scopes:
    - punctuation.separator.comma
- source: wasmTable
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: WebAssembly
  scopes:
    - entity.name.type.module
- source: .
  scopes:
    - punctuation.accessor
- source: Table
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.objectliteral
  scopes:
    - punctuation.definition.block
- source: initial
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: '27'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: element
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: anyfunc
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.object.member
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.objectliteral
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: ','
  scopes:
    - punctuation.separator.comma
- source: getWasmTableEntry
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: t
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmTableMirror
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: e
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.var.expr
    - meta.array.literal
- source: return
  scopes:
    - keyword.control.flow.return
- source: t
  scopes:
    - variable.other.readwrite
- source: '||'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: '>='
  scopes:
    - keyword.operator.relational
- source: wasmTableMirror
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: wasmTableMirror
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: e
  scopes:
    - variable.other.readwrite
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: wasmTableMirror
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: e
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: t
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmTable
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: get
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.arrow
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.comma
- source: updateTableMap
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: functionsInTableMap
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: for
  scopes:
    - keyword.control.loop
- source: (
  scopes:
    - meta.brace.round
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: _
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: e
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.var.expr
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: _
  scopes:
    - variable.other.readwrite
- source: <
  scopes:
    - keyword.operator.relational
- source: e
  scopes:
    - variable.other.readwrite
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: t
  scopes:
    - variable.other.readwrite
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: _
  scopes:
    - variable.other.readwrite
- source: ++
  scopes:
    - keyword.operator.increment
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: s
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: getWasmTableEntry
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: s
  scopes:
    - variable.other.readwrite
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: functionsInTableMap
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: set
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: s
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.arrow
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.comma
- source: functionsInTableMap
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: getFunctionAddress
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: functionsInTableMap
  scopes:
    - variable.other.readwrite
- source: '||'
  scopes:
    - keyword.operator.logical
- source: (
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: functionsInTableMap
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment
- source: ' @__PURE__ '
- source: '*/'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.block
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: WeakMap
  scopes:
    - entity.name.type
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - new.expr
    - meta.brace.round
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: updateTableMap
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: wasmTable
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: functionsInTableMap
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: get
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '||'
  scopes:
    - keyword.operator.logical
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: freeTableIndexes
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '['
  scopesBegin:
    - meta.array.literal
    - meta.brace.square
- source: ']'
  scopesEnd:
    - meta.array.literal
    - meta.brace.square
- source: ','
  scopes:
    - punctuation.separator.comma
- source: getEmptyTableSlot
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: freeTableIndexes
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
- source: )
  scopes:
    - meta.brace.round
- source: return
  scopes:
    - keyword.control.flow.return
- source: freeTableIndexes
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: pop
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: try
  scopes:
    - keyword.control.trycatch
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: wasmTable
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: grow
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: catch
  scopes:
    - keyword.control.trycatch
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: throw
  scopes:
    - keyword.control.trycatch
- source: e
  scopes:
    - variable.other.readwrite
- source: instanceof
  scopes:
    - keyword.operator.expression.instanceof
- source: RangeError
  scopes:
    - entity.name.type
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: e
  scopes:
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: wasmTable
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.arrow
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.comma
- source: setWasmTableEntry
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: wasmTable
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: set
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: wasmTableMirror
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: e
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmTable
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: get
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.arrow
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.comma
- source: addFunction
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: _
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: getFunctionAddress
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: return
  scopes:
    - keyword.control.flow.return
- source: _
  scopes:
    - variable.other.readwrite
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: s
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: getEmptyTableSlot
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.var.expr
    - meta.brace.round
- source: try
  scopes:
    - keyword.control.trycatch
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: setWasmTableEntry
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: s
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: catch
  scopes:
    - keyword.control.trycatch
- source: (
  scopes:
    - meta.brace.round
- source: a
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: a
  scopes:
    - variable.other.readwrite
- source: instanceof
  scopes:
    - keyword.operator.expression.instanceof
- source: TypeError
  scopes:
    - entity.name.type
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: throw
  scopes:
    - keyword.control.trycatch
- source: a
  scopes:
    - variable.other.readwrite
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: r
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: convertJsFunctionToWasm
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: setWasmTableEntry
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: s
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: r
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: functionsInTableMap
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: set
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: s
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: s
  scopes:
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.arrow
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.comma
- source: updateGOT
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: for
  scopes:
    - keyword.control.loop
- source: (
  scopes:
    - meta.brace.round
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: _
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
  scopesEnd:
    - meta.var.expr
- source: in
  scopes:
    - keyword.operator.expression.in
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: isInternalSym
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: s
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: e
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: _
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.var.expr
    - meta.array.literal
- source: _
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: startsWith
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: orig$
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: (
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: _
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: _
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: split
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: 'true'
  scopes:
    - constant.language.boolean.true
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: GOT
  scopes:
    - variable.other.constant
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: _
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '||'
  scopes:
    - keyword.operator.logical
- source: '='
  scopes:
    - keyword.operator.assignment
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: WebAssembly
  scopes:
    - entity.name.type.module
- source: .
  scopes:
    - punctuation.accessor
- source: Global
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.objectliteral
  scopes:
    - punctuation.definition.block
- source: value
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.object.member
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.comma
- source: mutable
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: 'true'
  scopes:
    - constant.language.boolean.true
  scopesEnd:
    - meta.object.member
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.objectliteral
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: '||'
  scopes:
    - keyword.operator.logical
- source: GOT
  scopes:
    - variable.other.constant
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: _
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: .
  scopes:
    - punctuation.accessor
- source: value
  scopes:
    - variable.other.property
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: typeof
  scopes:
    - keyword.operator.expression.typeof
- source: s
  scopes:
    - variable.other.readwrite
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: function
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: (
  scopes:
    - meta.brace.round
- source: GOT
  scopes:
    - variable.other.constant
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: _
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: .
  scopes:
    - punctuation.accessor
- source: value
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: addFunction
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: s
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: typeof
  scopes:
    - keyword.operator.expression.typeof
- source: s
  scopes:
    - variable.other.readwrite
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: (
  scopes:
    - meta.brace.round
- source: GOT
  scopes:
    - variable.other.constant
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: _
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: .
  scopes:
    - punctuation.accessor
- source: value
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: s
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: err
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: '`'
  scopesBegin:
    - string.template
  scopes:
    - punctuation.definition.string.template.begin
- source: unhandled export type for '
- source: '${'
  scopesBegin:
    - meta.template.expression
  scopes:
    - punctuation.definition.template-expression.begin
- source: _
  scopes:
    - meta.embedded.line
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.template-expression.end
  scopesEnd:
    - meta.template.expression
- source: ''': '
- source: '${'
  scopesBegin:
    - meta.template.expression
  scopes:
    - punctuation.definition.template-expression.begin
- source: typeof
  scopesBegin:
    - meta.embedded.line
  scopes:
    - keyword.operator.expression.typeof
- source: s
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.embedded.line
- source: '}'
  scopes:
    - punctuation.definition.template-expression.end
  scopesEnd:
    - meta.template.expression
- source: '`'
  scopes:
    - punctuation.definition.string.template.end
  scopesEnd:
    - string.template
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.arrow
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.comma
- source: relocateExports
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: _
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: s
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '{'
  scopesBegin:
    - meta.objectliteral
    - punctuation.definition.block
- source: '}'
  scopesEnd:
    - meta.var.expr
    - meta.objectliteral
    - punctuation.definition.block
- source: for
  scopes:
    - keyword.control.loop
- source: (
  scopes:
    - meta.brace.round
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: r
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
  scopesEnd:
    - meta.var.expr
- source: in
  scopes:
    - keyword.operator.expression.in
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: a
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: e
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: r
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.var.expr
    - meta.array.literal
- source: typeof
  scopes:
    - keyword.operator.expression.typeof
- source: a
  scopes:
    - variable.other.readwrite
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: object
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: a
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: a
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: value
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: typeof
  scopes:
    - keyword.operator.expression.typeof
- source: a
  scopes:
    - variable.other.readwrite
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: a
  scopes:
    - variable.other.readwrite
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: s
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: r
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: a
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: updateGOT
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: s
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: s
  scopes:
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.arrow
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.comma
- source: isSymbolDefined
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: t
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmImports
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: e
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.var.expr
    - meta.array.literal
- source: return
  scopes:
    - keyword.control.flow.return
- source: '!'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: t
  scopes:
    - variable.other.readwrite
- source: '||'
  scopes:
    - keyword.operator.logical
- source: t
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: stub
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.arrow
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.comma
- source: dynCallLegacy
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: _
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: Module
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: dynCall_
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: e
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ...
  scopes:
    - keyword.operator.spread
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: dynCall
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: _
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '['
  scopesBegin:
    - meta.array.literal
    - meta.brace.square
- source: ']'
  scopesEnd:
    - meta.array.literal
    - meta.brace.square
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: includes
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: j
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: dynCallLegacy
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: getWasmTableEntry
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: ...
  scopes:
    - keyword.operator.spread
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: createInvokeFunction
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: function
  scopesBegin:
    - meta.function.expression
  scopes:
    - storage.type.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: t
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: stackSave
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.var.expr
    - meta.brace.round
- source: try
  scopes:
    - keyword.control.trycatch
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: dynCall
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: arguments
  scopes:
    - variable.language.arguments
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: Array
  scopesBegin:
    - meta.function-call
  scopes:
    - support.class.builtin
- source: .
  scopes:
    - punctuation.accessor
- source: prototype
  scopes:
    - support.variable.property
- source: .
  scopes:
    - punctuation.accessor
- source: slice
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: call
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: arguments
  scopes:
    - variable.language.arguments
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: catch
  scopes:
    - keyword.control.trycatch
- source: (
  scopes:
    - meta.brace.round
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: stackRestore
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: '!=='
  scopes:
    - keyword.operator.comparison
- source: _
  scopes:
    - variable.other.readwrite
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: throw
  scopes:
    - keyword.control.trycatch
- source: _
  scopes:
    - variable.other.readwrite
- source: _setThrew
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.function.expression
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.comma
- source: resolveGlobalSymbol
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: 'false'
  scopes:
    - constant.language.boolean.false
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: _
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
  scopesEnd:
    - meta.var.expr
- source: return
  scopes:
    - keyword.control.flow.return
- source: t
  scopes:
    - variable.other.readwrite
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: orig$
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: e
  scopes:
    - variable.other.readwrite
- source: in
  scopes:
    - keyword.operator.expression.in
- source: wasmImports
  scopes:
    - variable.other.readwrite
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: orig$
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: isSymbolDefined
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: (
  scopes:
    - meta.brace.round
- source: _
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmImports
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: e
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: e
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: startsWith
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: invoke_
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: _
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmImports
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: e
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: createInvokeFunction
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: split
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: _
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '{'
  scopesBegin:
    - meta.objectliteral
  scopes:
    - punctuation.definition.block
- source: sym
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: _
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: name
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: e
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.object.member
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.objectliteral
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.arrow
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.comma
- source: UTF8ToString
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: UTF8ArrayToString
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: HEAPU8
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: loadWebAssemblyModule
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: binary
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: flags
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: libName
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: localScope
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: handle
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: metadata
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: getDylinkMetadata
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: binary
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: function
  scopesBegin:
    - meta.function
  scopes:
    - storage.type.function
- source: loadModule
  scopes:
    - meta.definition.function
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: firstLoad
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '!'
  scopes:
    - keyword.operator.logical
- source: handle
  scopes:
    - variable.other.readwrite
- source: '||'
  scopesBegin:
    - keyword.operator.logical
- source: '!'
  scopesEnd:
    - keyword.operator.logical
- source: HEAP8
  scopes:
    - variable.other.constant
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: handle
  scopes:
    - variable.other.readwrite
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '8'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.var.expr
    - meta.array.literal
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: firstLoad
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: memAlign
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Math
  scopesBegin:
    - meta.function-call
  scopes:
    - support.constant.math
- source: .
  scopes:
    - punctuation.accessor
- source: pow
  scopes:
    - support.function.math
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: metadata
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: memoryAlign
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: memoryBase
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: metadata
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: memorySize
  scopes:
    - variable.other.property
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: alignMemory
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: getMemory
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: metadata
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: memorySize
  scopes:
    - variable.other.property
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: memAlign
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: memAlign
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: tableBase
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: metadata
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: tableSize
  scopes:
    - variable.other.property
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: wasmTable
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: '0'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.var.expr
- source: handle
  scopes:
    - variable.other.readwrite
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: (
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: HEAP8
  scopes:
    - variable.other.constant
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: handle
  scopes:
    - variable.other.readwrite
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '8'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: HEAPU32
  scopes:
    - variable.other.constant
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: (
  scopes:
    - meta.brace.round
- source: handle
  scopes:
    - variable.other.readwrite
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '12'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: '>>'
  scopes:
    - keyword.operator.bitwise.shift
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: memoryBase
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: HEAP32
  scopes:
    - variable.other.constant
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: (
  scopes:
    - meta.brace.round
- source: handle
  scopes:
    - variable.other.readwrite
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '16'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: '>>'
  scopes:
    - keyword.operator.bitwise.shift
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: metadata
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: memorySize
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: HEAPU32
  scopes:
    - variable.other.constant
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: (
  scopes:
    - meta.brace.round
- source: handle
  scopes:
    - variable.other.readwrite
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '20'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: '>>'
  scopes:
    - keyword.operator.bitwise.shift
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: tableBase
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: HEAP32
  scopes:
    - variable.other.constant
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: (
  scopes:
    - meta.brace.round
- source: handle
  scopes:
    - variable.other.readwrite
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '24'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: '>>'
  scopes:
    - keyword.operator.bitwise.shift
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: metadata
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: tableSize
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: memoryBase
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: HEAPU32
  scopes:
    - variable.other.constant
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: (
  scopes:
    - meta.brace.round
- source: handle
  scopes:
    - variable.other.readwrite
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '12'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: '>>'
  scopes:
    - keyword.operator.bitwise.shift
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: tableBase
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: HEAPU32
  scopes:
    - variable.other.constant
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: (
  scopes:
    - meta.brace.round
- source: handle
  scopes:
    - variable.other.readwrite
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '20'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: '>>'
  scopes:
    - keyword.operator.bitwise.shift
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: tableGrowthNeeded
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: tableBase
  scopes:
    - variable.other.readwrite
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: metadata
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: tableSize
  scopes:
    - variable.other.property
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: wasmTable
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
- source: ','
  scopes:
    - punctuation.separator.comma
- source: moduleExports
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
  scopesEnd:
    - meta.var.expr
- source: function
  scopesBegin:
    - meta.function
  scopes:
    - storage.type.function
- source: resolveSymbol
  scopes:
    - meta.definition.function
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: t
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: resolveGlobalSymbol
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: .
  scopes:
    - punctuation.accessor
- source: sym
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.var.expr
- source: return
  scopes:
    - keyword.control.flow.return
- source: '!'
  scopes:
    - keyword.operator.logical
- source: t
  scopes:
    - variable.other.readwrite
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: localScope
  scopes:
    - variable.other.readwrite
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: localScope
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: e
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: '||'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: moduleExports
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: e
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.function
    - meta.block
- source: tableGrowthNeeded
  scopes:
    - variable.other.readwrite
- source: '>'
  scopes:
    - keyword.operator.relational
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: wasmTable
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: grow
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: tableGrowthNeeded
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: proxyHandler
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '{'
  scopesBegin:
    - meta.objectliteral
  scopes:
    - punctuation.definition.block
- source: get
  scopesBegin:
    - meta.method.declaration
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: switch
  scopesBegin:
    - switch-statement.expr
    - switch-expression.expr
  scopes:
    - keyword.control.switch
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - switch-expression.expr
- source: '{'
  scopesBegin:
    - switch-block.expr
  scopes:
    - punctuation.definition.block
- source: case
  scopesBegin:
    - case-clause.expr
  scopes:
    - keyword.control.switch
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __memory_base
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ':'
  scopes:
    - punctuation.definition.section.case-statement
  scopesEnd:
    - case-clause.expr
- source: return
  scopes:
    - keyword.control.flow.return
- source: memoryBase
  scopes:
    - variable.other.readwrite
- source: case
  scopesBegin:
    - case-clause.expr
  scopes:
    - keyword.control.switch
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __table_base
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ':'
  scopes:
    - punctuation.definition.section.case-statement
  scopesEnd:
    - case-clause.expr
- source: return
  scopes:
    - keyword.control.flow.return
- source: tableBase
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - switch-block.expr
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - switch-statement.expr
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: in
  scopes:
    - keyword.operator.expression.in
- source: wasmImports
  scopes:
    - variable.other.readwrite
- source: '&&'
  scopesBegin:
    - keyword.operator.logical
- source: '!'
  scopesEnd:
    - keyword.operator.logical
- source: wasmImports
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: t
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: .
  scopes:
    - punctuation.accessor
- source: stub
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
- source: return
  scopes:
    - keyword.control.flow.return
- source: wasmImports
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: t
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: _
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
  scopesEnd:
    - meta.var.expr
- source: return
  scopes:
    - keyword.control.flow.return
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: in
  scopes:
    - keyword.operator.expression.in
- source: e
  scopes:
    - variable.other.readwrite
- source: '||'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: t
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: ...
  scopes:
    - keyword.operator.rest
- source: s
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: _
  scopes:
    - variable.other.readwrite
- source: '||'
  scopes:
    - keyword.operator.logical
- source: '='
  scopes:
    - keyword.operator.assignment
- source: resolveSymbol
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: typeof
  scopes:
    - keyword.operator.expression.typeof
- source: _
  scopes:
    - variable.other.readwrite
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: function
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: throw
  scopes:
    - keyword.control.trycatch
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Error
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: '`'
  scopesBegin:
    - string.template
  scopes:
    - punctuation.definition.string.template.begin
- source: \n
  scopesBegin:
    - constant.character.escape
- source: \n
  scopesEnd:
    - constant.character.escape
- source: (deno-tree-sitter speaking here)
- source: \n
  scopes:
    - constant.character.escape
- source: So a wasm file you're trying to load is old or incomplete.
- source: \n
  scopes:
    - constant.character.escape
- source: 'I can''t find the symbol '
- source: '${'
  scopesBegin:
    - meta.template.expression
  scopes:
    - punctuation.definition.template-expression.begin
- source: JSON
  scopesBegin:
    - meta.embedded.line
    - meta.function-call
  scopes:
    - support.constant.json
- source: .
  scopes:
    - punctuation.accessor
- source: stringify
  scopes:
    - support.function.json
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.embedded.line
- source: '}'
  scopes:
    - punctuation.definition.template-expression.end
  scopesEnd:
    - meta.template.expression
- source: .
- source: \n
  scopes:
    - constant.character.escape
- source: >-
    This is effectively a dynamic linking (dyld) error from compiling the C code
    that became wasm.
- source: \n
  scopesBegin:
    - constant.character.escape
- source: \n
  scopesEnd:
    - constant.character.escape
- source: '`'
  scopes:
    - punctuation.definition.string.template.end
  scopesEnd:
    - string.template
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: _
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: ...
  scopes:
    - keyword.operator.spread
- source: s
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.arrow
    - meta.block
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: e
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: t
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.method.declaration
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.objectliteral
- source: ','
  scopes:
    - punctuation.separator.comma
- source: proxy
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Proxy
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.objectliteral
    - punctuation.definition.block
- source: '}'
  scopesEnd:
    - meta.objectliteral
    - punctuation.definition.block
- source: ','
  scopes:
    - punctuation.separator.comma
- source: proxyHandler
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: ','
  scopes:
    - punctuation.separator.comma
- source: info
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '{'
  scopesBegin:
    - meta.objectliteral
  scopes:
    - punctuation.definition.block
- source: '"'
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: GOT.mem
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Proxy
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.objectliteral
    - punctuation.definition.block
- source: '}'
  scopesEnd:
    - meta.objectliteral
    - punctuation.definition.block
- source: ','
  scopes:
    - punctuation.separator.comma
- source: GOTHandler
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.object.member
    - new.expr
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: GOT.func
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Proxy
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.objectliteral
    - punctuation.definition.block
- source: '}'
  scopesEnd:
    - meta.objectliteral
    - punctuation.definition.block
- source: ','
  scopes:
    - punctuation.separator.comma
- source: GOTHandler
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.object.member
    - new.expr
- source: ','
  scopes:
    - punctuation.separator.comma
- source: env
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: proxy
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: wasi_snapshot_preview1
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: proxy
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.object.member
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.var.expr
    - meta.objectliteral
- source: function
  scopesBegin:
    - meta.function
  scopes:
    - storage.type.function
- source: postInstantiation
  scopes:
    - meta.definition.function
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: module
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: instance
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: function
  scopesBegin:
    - meta.function
  scopes:
    - storage.type.function
- source: addEmAsm
  scopes:
    - meta.definition.function
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: addr
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: body
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: for
  scopes:
    - keyword.control.loop
- source: (
  scopes:
    - meta.brace.round
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: args
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '['
  scopesBegin:
    - meta.array.literal
    - meta.brace.square
- source: ']'
  scopesEnd:
    - meta.array.literal
    - meta.brace.square
- source: ','
  scopes:
    - punctuation.separator.comma
- source: arity
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.var.expr
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: arity
  scopes:
    - variable.other.readwrite
- source: <
  scopes:
    - keyword.operator.relational
- source: '16'
  scopes:
    - constant.numeric.decimal
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: body
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: indexOf
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: arity
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: arity
  scopes:
    - variable.other.readwrite
- source: ++
  scopes:
    - keyword.operator.increment
- source: )
  scopes:
    - meta.brace.round
- source: args
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: push
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: arity
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: args
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: args
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: join
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ','
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: func
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '`'
  scopesBegin:
    - string.template
  scopes:
    - punctuation.definition.string.template.begin
- source: (
- source: '${'
  scopesBegin:
    - meta.template.expression
  scopes:
    - punctuation.definition.template-expression.begin
- source: args
  scopes:
    - meta.embedded.line
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.template-expression.end
  scopesEnd:
    - meta.template.expression
- source: ') => { '
- source: '${'
  scopesBegin:
    - meta.template.expression
  scopes:
    - punctuation.definition.template-expression.begin
- source: body
  scopes:
    - meta.embedded.line
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.template-expression.end
  scopesEnd:
    - meta.template.expression
- source: ' };'
- source: '`'
  scopes:
    - punctuation.definition.string.template.end
  scopesEnd:
    - meta.var.expr
    - string.template
- source: ASM_CONSTS
  scopes:
    - variable.other.constant
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: start
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: eval
  scopes:
    - meta.function-call
    - support.function
- source: (
  scopes:
    - meta.brace.round
- source: func
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.function
    - meta.block
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: updateTableMap
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: tableBase
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: metadata
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: tableSize
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: moduleExports
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: relocateExports
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: instance
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: exports
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.comma
- source: memoryBase
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: flags
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: allowUndefined
  scopes:
    - variable.other.property
- source: '||'
  scopes:
    - keyword.operator.logical
- source: reportUndefinedSymbols
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __start_em_asm
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: in
  scopes:
    - keyword.operator.expression.in
- source: moduleExports
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: for
  scopes:
    - keyword.control.loop
- source: (
  scopes:
    - meta.brace.round
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: start
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: moduleExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: __start_em_asm
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.comma
- source: stop
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: moduleExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: __stop_em_asm
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.var.expr
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: start
  scopes:
    - variable.other.readwrite
- source: <
  scopes:
    - keyword.operator.relational
- source: stop
  scopes:
    - variable.other.readwrite
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: jsString
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: UTF8ToString
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: start
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: addEmAsm
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: start
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: jsString
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: start
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: HEAPU8
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: indexOf
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: start
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: function
  scopesBegin:
    - meta.function
  scopes:
    - storage.type.function
- source: addEmJs
  scopes:
    - meta.definition.function
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: name
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: cSig
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: body
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: jsArgs
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '['
  scopesBegin:
    - meta.array.literal
    - meta.brace.square
- source: ']'
  scopesEnd:
    - meta.var.expr
    - meta.array.literal
    - meta.brace.square
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopesBegin:
    - meta.brace.round
- source: (
- source: (
  scopesEnd:
    - meta.brace.round
- source: cSig
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: cSig
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: slice
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: cSig
  scopes:
    - variable.other.readwrite
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: void
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: for
  scopes:
    - keyword.control.loop
- source: (
  scopes:
    - meta.brace.round
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: i
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
  scopesEnd:
    - meta.var.expr
- source: in
  scopes:
    - keyword.operator.expression.in
- source: (
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: cSig
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: cSig
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: split
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ','
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: cSig
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: jsArg
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: cSig
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: i
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: .
  scopesBegin:
    - meta.function-call
  scopes:
    - punctuation.accessor
- source: split
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: .
  scopesBegin:
    - meta.function-call
  scopes:
    - punctuation.accessor
- source: pop
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.var.expr
    - meta.brace.round
- source: jsArgs
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: push
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: jsArg
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: replace
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '*'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: func
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '`'
  scopesBegin:
    - string.template
  scopes:
    - punctuation.definition.string.template.begin
- source: (
- source: '${'
  scopesBegin:
    - meta.template.expression
  scopes:
    - punctuation.definition.template-expression.begin
- source: jsArgs
  scopes:
    - meta.embedded.line
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.template-expression.end
  scopesEnd:
    - meta.template.expression
- source: ') => '
- source: '${'
  scopesBegin:
    - meta.template.expression
  scopes:
    - punctuation.definition.template-expression.begin
- source: body
  scopes:
    - meta.embedded.line
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.template-expression.end
  scopesEnd:
    - meta.template.expression
- source: ;
- source: '`'
  scopes:
    - punctuation.definition.string.template.end
  scopesEnd:
    - meta.var.expr
    - string.template
- source: moduleExports
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: name
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: eval
  scopes:
    - meta.function-call
    - support.function
- source: (
  scopes:
    - meta.brace.round
- source: func
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.function
    - meta.block
- source: for
  scopes:
    - keyword.control.loop
- source: (
  scopes:
    - meta.brace.round
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: name
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
  scopesEnd:
    - meta.var.expr
- source: in
  scopes:
    - keyword.operator.expression.in
- source: moduleExports
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: name
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: startsWith
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __em_js__
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: start
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: moduleExports
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: name
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: jsString
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: UTF8ToString
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: start
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: parts
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: jsString
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: split
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '<::>'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: addEmJs
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: name
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: replace
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __em_js__
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: parts
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: parts
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: delete
  scopes:
    - keyword.operator.expression.delete
- source: moduleExports
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: name
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: applyRelocs
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: moduleExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: __wasm_apply_data_relocs
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.var.expr
- source: applyRelocs
  scopes:
    - variable.other.readwrite
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: runtimeInitialized
  scopes:
    - variable.other.readwrite
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: applyRelocs
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: __RELOC_FUNCS__
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: push
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: applyRelocs
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: init
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: moduleExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: __wasm_call_ctors
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.var.expr
- source: return
  scopes:
    - keyword.control.flow.return
- source: init
  scopes:
    - variable.other.readwrite
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: runtimeInitialized
  scopes:
    - variable.other.readwrite
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: init
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: __ATINIT__
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: push
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: init
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: moduleExports
  scopes:
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.function
    - meta.block
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: flags
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: loadAsync
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: binary
  scopes:
    - variable.other.readwrite
- source: instanceof
  scopes:
    - keyword.operator.expression.instanceof
- source: WebAssembly
  scopes:
    - entity.name.type.module
- source: .
  scopes:
    - punctuation.accessor
- source: Module
  scopes:
    - entity.name.type
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: instance
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: WebAssembly
  scopes:
    - entity.name.type.module
- source: .
  scopes:
    - punctuation.accessor
- source: Instance
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: binary
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: info
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
    - new.expr
- source: return
  scopes:
    - keyword.control.flow.return
- source: Promise
  scopesBegin:
    - meta.function-call
  scopes:
    - support.class.promise
- source: .
  scopes:
    - punctuation.accessor
- source: resolve
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: postInstantiation
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: binary
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: instance
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: WebAssembly
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: instantiate
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: binary
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: info
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: .
  scopesBegin:
    - meta.function-call
  scopes:
    - punctuation.accessor
- source: then
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: postInstantiation
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: module
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.comma
- source: e
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: instance
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: module
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: binary
  scopes:
    - variable.other.readwrite
- source: instanceof
  scopes:
    - keyword.operator.expression.instanceof
- source: WebAssembly
  scopes:
    - entity.name.type.module
- source: .
  scopes:
    - punctuation.accessor
- source: Module
  scopes:
    - entity.name.type
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: binary
  scopes:
    - variable.other.readwrite
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: WebAssembly
  scopes:
    - entity.name.type.module
- source: .
  scopes:
    - punctuation.accessor
- source: Module
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: binary
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: ','
  scopes:
    - punctuation.separator.comma
- source: instance
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: WebAssembly
  scopes:
    - entity.name.type.module
- source: .
  scopes:
    - punctuation.accessor
- source: Instance
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: module
  scopes:
    - support.type.object.module
- source: ','
  scopes:
    - punctuation.separator.comma
- source: info
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
    - new.expr
- source: return
  scopes:
    - keyword.control.flow.return
- source: postInstantiation
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: module
  scopes:
    - support.type.object.module
- source: ','
  scopes:
    - punctuation.separator.comma
- source: instance
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.function
    - meta.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: (
  scopes:
    - meta.brace.round
- source: currentModuleWeakSymbols
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: metadata
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: weakImports
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: flags
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: loadAsync
  scopes:
    - variable.other.property
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: metadata
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: neededDynlibs
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: reduce
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: e
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: then
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: loadDynamicLibrary
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: flags
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: Promise
  scopesBegin:
    - meta.function-call
  scopes:
    - support.class.promise
- source: .
  scopes:
    - punctuation.accessor
- source: resolve
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
- source: )
  scopesEnd:
    - meta.brace.round
- source: .
  scopesBegin:
    - meta.function-call
  scopes:
    - punctuation.accessor
- source: then
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: loadModule
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: (
  scopes:
    - meta.brace.round
- source: metadata
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: neededDynlibs
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: forEach
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: loadDynamicLibrary
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: flags
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: localScope
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: loadModule
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
- source: )
  scopesEnd:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.arrow
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.comma
- source: mergeLibSymbols
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: for
  scopes:
    - keyword.control.loop
- source: (
  scopes:
    - meta.brace.round
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: '['
  scopesBegin:
    - meta.array-binding-pattern-variable
  scopes:
    - punctuation.definition.binding-pattern.array
- source: _
  scopes:
    - meta.definition.variable
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: s
  scopes:
    - meta.definition.variable
    - variable.other.readwrite
- source: ']'
  scopes:
    - punctuation.definition.binding-pattern.array
  scopesEnd:
    - meta.var.expr
    - meta.array-binding-pattern-variable
- source: of
  scopes:
    - keyword.operator.expression.of
- source: Object
  scopesBegin:
    - meta.function-call
  scopes:
    - support.class.builtin
- source: .
  scopes:
    - punctuation.accessor
- source: entries
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: r
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: o
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: isSymbolDefined
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: o
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '||'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: wasmImports
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: o
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: s
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.var.expr
    - meta.arrow
    - meta.block
- source: r
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: a
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __main_argc_argv
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.var.expr
    - string.quoted.double
- source: _
  scopes:
    - variable.other.readwrite
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: main
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: r
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: a
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: a
  scopes:
    - variable.other.readwrite
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: r
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: main
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: startsWith
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: dynCall_
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: '&&'
  scopesBegin:
    - keyword.operator.logical
- source: '!'
  scopesEnd:
    - keyword.operator.logical
- source: Module
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: hasOwnProperty
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: _
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: s
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.arrow
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.comma
- source: asyncLoad
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: _
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: s
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: r
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: s
  scopes:
    - variable.other.readwrite
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: '`'
  scopesBegin:
    - string.template
  scopes:
    - punctuation.definition.string.template.begin
- source: 'al '
- source: '${'
  scopesBegin:
    - meta.template.expression
  scopes:
    - punctuation.definition.template-expression.begin
- source: e
  scopes:
    - meta.embedded.line
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.template-expression.end
  scopesEnd:
    - meta.template.expression
- source: '`'
  scopes:
    - punctuation.definition.string.template.end
  scopesEnd:
    - meta.var.expr
    - string.template
- source: readAsync
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: a
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: t
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Uint8Array
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: a
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: r
  scopes:
    - variable.other.readwrite
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: removeRunDependency
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: r
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.arrow
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: a
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: throw
  scopes:
    - keyword.control.trycatch
- source: '`'
  scopesBegin:
    - string.template
  scopes:
    - punctuation.definition.string.template.begin
- source: Loading data file "
- source: '${'
  scopesBegin:
    - meta.template.expression
  scopes:
    - punctuation.definition.template-expression.begin
- source: e
  scopes:
    - meta.embedded.line
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.template-expression.end
  scopesEnd:
    - meta.template.expression
- source: '" failed.'
- source: '`'
  scopes:
    - punctuation.definition.string.template.end
  scopesEnd:
    - string.template
- source: _
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.arrow
    - meta.block
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: r
  scopes:
    - variable.other.readwrite
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: addRunDependency
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: r
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.var.expr
    - meta.arrow
    - meta.block
- source: function
  scopesBegin:
    - meta.function
  scopes:
    - storage.type.function
- source: loadDynamicLibrary
  scopes:
    - meta.definition.function
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '{'
  scopesBegin:
    - meta.objectliteral
  scopes:
    - punctuation.definition.block
- source: global
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: 'true'
  scopes:
    - constant.language.boolean.true
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: nodelete
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: 'true'
  scopes:
    - constant.language.boolean.true
  scopesEnd:
    - meta.object.member
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.objectliteral
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: _
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: s
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: r
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: LDSO
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: loadedLibsByName
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: e
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.var.expr
    - meta.array.literal
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: r
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: return
  scopes:
    - keyword.control.flow.return
- source: t
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: global
  scopes:
    - variable.other.property
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: r
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: global
  scopes:
    - variable.other.property
- source: '||'
  scopes:
    - keyword.operator.logical
- source: (
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: r
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: global
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: 'true'
  scopes:
    - constant.language.boolean.true
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: mergeLibSymbols
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: r
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: exports
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.comma
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: _
  scopes:
    - variable.other.readwrite
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: Object
  scopesBegin:
    - meta.function-call
  scopes:
    - support.class.builtin
- source: .
  scopes:
    - punctuation.accessor
- source: assign
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: _
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: r
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: exports
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: nodelete
  scopes:
    - variable.other.property
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: r
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: refcount
  scopes:
    - variable.other.property
- source: '!=='
  scopes:
    - keyword.operator.comparison
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: r
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: refcount
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: r
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: refcount
  scopes:
    - variable.other.property
- source: ++
  scopes:
    - keyword.operator.increment
- source: ','
  scopes:
    - punctuation.separator.comma
- source: s
  scopes:
    - variable.other.readwrite
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: LDSO
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: loadedLibsByHandle
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: s
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: r
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '!'
  scopes:
    - keyword.operator.logical
- source: t
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: loadAsync
  scopes:
    - variable.other.property
- source: '||'
  scopes:
    - keyword.operator.logical
- source: Promise
  scopesBegin:
    - meta.function-call
  scopes:
    - support.class.promise
- source: .
  scopes:
    - punctuation.accessor
- source: resolve
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: 'true'
  scopes:
    - constant.language.boolean.true
- source: )
  scopes:
    - meta.brace.round
- source: function
  scopesBegin:
    - meta.function
  scopes:
    - storage.type.function
- source: a
  scopes:
    - meta.definition.function
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: s
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: u
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: HEAPU32
  scopes:
    - variable.other.constant
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: (
  scopes:
    - meta.brace.round
- source: s
  scopes:
    - variable.other.readwrite
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '28'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: '>>'
  scopes:
    - keyword.operator.bitwise.shift
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: m
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: HEAPU32
  scopes:
    - variable.other.constant
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: (
  scopes:
    - meta.brace.round
- source: s
  scopes:
    - variable.other.readwrite
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '32'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: '>>'
  scopes:
    - keyword.operator.bitwise.shift
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.var.expr
    - meta.array.literal
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: u
  scopes:
    - variable.other.readwrite
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: m
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: w
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: HEAP8
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: slice
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: u
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: u
  scopes:
    - variable.other.readwrite
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: m
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: return
  scopes:
    - keyword.control.flow.return
- source: t
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: loadAsync
  scopes:
    - variable.other.property
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: Promise
  scopesBegin:
    - meta.function-call
  scopes:
    - support.class.promise
- source: .
  scopes:
    - punctuation.accessor
- source: resolve
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: w
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: w
  scopes:
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: c
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: locateFile
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: loadAsync
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
- source: return
  scopes:
    - keyword.control.flow.return
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Promise
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: function
  scopesBegin:
    - meta.function.expression
  scopes:
    - storage.type.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: f
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: p
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: asyncLoad
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: c
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: f
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: p
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.function.expression
    - meta.block
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: readBinary
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: throw
  scopes:
    - keyword.control.trycatch
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Error
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: '`'
  scopesBegin:
    - string.template
  scopes:
    - punctuation.definition.string.template.begin
- source: '${'
  scopesBegin:
    - meta.template.expression
  scopes:
    - punctuation.definition.template-expression.begin
- source: c
  scopes:
    - meta.embedded.line
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.template-expression.end
  scopesEnd:
    - meta.template.expression
- source: ': file not found, and synchronous loading of external files is not available'
- source: '`'
  scopes:
    - punctuation.definition.string.template.end
  scopesEnd:
    - string.template
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: return
  scopes:
    - keyword.control.flow.return
- source: readBinary
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: c
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: function
  scopes:
    - storage.type.function
- source: o
  scopes:
    - meta.definition.function
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: t
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: loadAsync
  scopes:
    - variable.other.property
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: a
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: .
  scopesBegin:
    - meta.function-call
  scopes:
    - punctuation.accessor
- source: then
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: u
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: loadWebAssemblyModule
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: u
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: s
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: loadWebAssemblyModule
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: a
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: s
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: function
  scopes:
    - storage.type.function
- source: 'n'
  scopes:
    - meta.definition.function
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: u
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: r
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: global
  scopes:
    - variable.other.property
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: mergeLibSymbols
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: u
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: _
  scopes:
    - variable.other.readwrite
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: Object
  scopesBegin:
    - meta.function-call
  scopes:
    - support.class.builtin
- source: .
  scopes:
    - punctuation.accessor
- source: assign
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: _
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: u
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: r
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: exports
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: u
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.function
    - meta.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: (
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: r
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: newDSO
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: s
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: loading
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: .
  scopes:
    - punctuation.accessor
- source: refcount
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: t
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: nodelete
  scopes:
    - variable.other.property
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: r
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: global
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: t
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: global
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: loadAsync
  scopes:
    - variable.other.property
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: o
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: .
  scopesBegin:
    - meta.function-call
  scopes:
    - punctuation.accessor
- source: then
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: u
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: 'n'
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: u
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: 'true'
  scopes:
    - constant.language.boolean.true
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: (
  scopes:
    - meta.brace.round
- source: 'n'
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: o
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: 'true'
  scopes:
    - constant.language.boolean.true
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.function
    - meta.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: reportUndefinedSymbols
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: for
  scopes:
    - keyword.control.loop
- source: (
  scopes:
    - meta.brace.round
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: '['
  scopesBegin:
    - meta.array-binding-pattern-variable
  scopes:
    - punctuation.definition.binding-pattern.array
- source: e
  scopes:
    - meta.definition.variable
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - meta.definition.variable
    - variable.other.readwrite
- source: ']'
  scopes:
    - punctuation.definition.binding-pattern.array
  scopesEnd:
    - meta.var.expr
    - meta.array-binding-pattern-variable
- source: of
  scopes:
    - keyword.operator.expression.of
- source: Object
  scopesBegin:
    - meta.function-call
  scopes:
    - support.class.builtin
- source: .
  scopes:
    - punctuation.accessor
- source: entries
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: GOT
  scopes:
    - variable.other.constant
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: value
  scopes:
    - variable.other.property
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: _
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: resolveGlobalSymbol
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: 'true'
  scopes:
    - constant.language.boolean.true
- source: )
  scopes:
    - meta.brace.round
- source: .
  scopes:
    - punctuation.accessor
- source: sym
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.var.expr
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: _
  scopes:
    - variable.other.readwrite
- source: '&&'
  scopesBegin:
    - keyword.operator.logical
- source: '!'
  scopesEnd:
    - keyword.operator.logical
- source: t
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: required
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
- source: continue
  scopes:
    - keyword.control.loop
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: typeof
  scopes:
    - keyword.operator.expression.typeof
- source: _
  scopes:
    - variable.other.readwrite
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: function
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: value
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: addFunction
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: _
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: sig
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
- source: else
  scopes:
    - keyword.control.conditional
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: typeof
  scopes:
    - keyword.operator.expression.typeof
- source: _
  scopes:
    - variable.other.readwrite
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: throw
  scopes:
    - keyword.control.trycatch
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Error
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: '`'
  scopesBegin:
    - string.template
  scopes:
    - punctuation.definition.string.template.begin
- source: bad export type for '
- source: '${'
  scopesBegin:
    - meta.template.expression
  scopes:
    - punctuation.definition.template-expression.begin
- source: e
  scopes:
    - meta.embedded.line
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.template-expression.end
  scopesEnd:
    - meta.template.expression
- source: ''': '
- source: '${'
  scopesBegin:
    - meta.template.expression
  scopes:
    - punctuation.definition.template-expression.begin
- source: typeof
  scopesBegin:
    - meta.embedded.line
  scopes:
    - keyword.operator.expression.typeof
- source: _
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.embedded.line
- source: '}'
  scopes:
    - punctuation.definition.template-expression.end
  scopesEnd:
    - meta.template.expression
- source: '`'
  scopes:
    - punctuation.definition.string.template.end
  scopesEnd:
    - string.template
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: t
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: value
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: _
  scopes:
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.arrow
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.comma
- source: loadDylibs
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: dynamicLibraries
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: (
  scopes:
    - meta.brace.round
- source: addRunDependency
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: loadDylibs
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: dynamicLibraries
  scopes:
    - variable.other.readwrite
- source: .
  scopesBegin:
    - meta.function-call
  scopes:
    - punctuation.accessor
- source: reduce
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: e
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: then
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: loadDynamicLibrary
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '{'
  scopesBegin:
    - meta.objectliteral
  scopes:
    - punctuation.definition.block
- source: loadAsync
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: 'true'
  scopes:
    - constant.language.boolean.true
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: global
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: 'true'
  scopes:
    - constant.language.boolean.true
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: nodelete
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: 'true'
  scopes:
    - constant.language.boolean.true
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: allowUndefined
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: 'true'
  scopes:
    - constant.language.boolean.true
  scopesEnd:
    - meta.object.member
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.objectliteral
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: Promise
  scopesBegin:
    - meta.function-call
  scopes:
    - support.class.promise
- source: .
  scopes:
    - punctuation.accessor
- source: resolve
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
- source: )
  scopesEnd:
    - meta.brace.round
- source: .
  scopesBegin:
    - meta.function-call
  scopes:
    - punctuation.accessor
- source: then
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: reportUndefinedSymbols
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: removeRunDependency
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: loadDylibs
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.arrow
    - meta.block
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: reportUndefinedSymbols
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.arrow
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.comma
- source: noExitRuntime
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: noExitRuntime
  scopes:
    - variable.other.property
- source: '||'
  scopes:
    - keyword.operator.logical
- source: 'true'
  scopes:
    - constant.language.boolean.true
  scopesEnd:
    - meta.var.expr
- source: function
  scopesBegin:
    - meta.function
  scopes:
    - storage.type.function
- source: setValue
  scopes:
    - meta.definition.function
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: _
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i8
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: switch
  scopesBegin:
    - switch-statement.expr
    - switch-expression.expr
  scopes:
    - keyword.control.switch
- source: (
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: _
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: endsWith
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '*'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: _
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '*'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - switch-expression.expr
    - meta.brace.round
- source: '{'
  scopesBegin:
    - switch-block.expr
  scopes:
    - punctuation.definition.block
- source: case
  scopesBegin:
    - case-clause.expr
  scopes:
    - keyword.control.switch
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i1
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ':'
  scopes:
    - punctuation.definition.section.case-statement
- source: case
  scopes:
    - keyword.control.switch
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i8
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ':'
  scopes:
    - punctuation.definition.section.case-statement
  scopesEnd:
    - case-clause.expr
- source: HEAP8
  scopes:
    - variable.other.constant
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: e
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: t
  scopes:
    - variable.other.readwrite
- source: break
  scopes:
    - keyword.control.loop
- source: case
  scopesBegin:
    - case-clause.expr
  scopes:
    - keyword.control.switch
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i16
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ':'
  scopes:
    - punctuation.definition.section.case-statement
  scopesEnd:
    - case-clause.expr
- source: HEAP16
  scopes:
    - variable.other.constant
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: e
  scopes:
    - variable.other.readwrite
- source: '>>'
  scopes:
    - keyword.operator.bitwise.shift
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: t
  scopes:
    - variable.other.readwrite
- source: break
  scopes:
    - keyword.control.loop
- source: case
  scopesBegin:
    - case-clause.expr
  scopes:
    - keyword.control.switch
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ':'
  scopes:
    - punctuation.definition.section.case-statement
  scopesEnd:
    - case-clause.expr
- source: HEAP32
  scopes:
    - variable.other.constant
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: e
  scopes:
    - variable.other.readwrite
- source: '>>'
  scopes:
    - keyword.operator.bitwise.shift
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: t
  scopes:
    - variable.other.readwrite
- source: break
  scopes:
    - keyword.control.loop
- source: case
  scopesBegin:
    - case-clause.expr
  scopes:
    - keyword.control.switch
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i64
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ':'
  scopes:
    - punctuation.definition.section.case-statement
  scopesEnd:
    - case-clause.expr
- source: abort
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: to do setValue(i64) use WASM_BIGINT
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: case
  scopesBegin:
    - case-clause.expr
  scopes:
    - keyword.control.switch
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: float
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ':'
  scopes:
    - punctuation.definition.section.case-statement
  scopesEnd:
    - case-clause.expr
- source: HEAPF32
  scopes:
    - variable.other.constant
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: e
  scopes:
    - variable.other.readwrite
- source: '>>'
  scopes:
    - keyword.operator.bitwise.shift
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: t
  scopes:
    - variable.other.readwrite
- source: break
  scopes:
    - keyword.control.loop
- source: case
  scopesBegin:
    - case-clause.expr
  scopes:
    - keyword.control.switch
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: double
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ':'
  scopes:
    - punctuation.definition.section.case-statement
  scopesEnd:
    - case-clause.expr
- source: HEAPF64
  scopes:
    - variable.other.constant
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: e
  scopes:
    - variable.other.readwrite
- source: '>>'
  scopes:
    - keyword.operator.bitwise.shift
- source: '3'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: t
  scopes:
    - variable.other.readwrite
- source: break
  scopes:
    - keyword.control.loop
- source: case
  scopesBegin:
    - case-clause.expr
  scopes:
    - keyword.control.switch
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '*'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ':'
  scopes:
    - punctuation.definition.section.case-statement
  scopesEnd:
    - case-clause.expr
- source: HEAPU32
  scopes:
    - variable.other.constant
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: e
  scopes:
    - variable.other.readwrite
- source: '>>'
  scopes:
    - keyword.operator.bitwise.shift
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: t
  scopes:
    - variable.other.readwrite
- source: break
  scopes:
    - keyword.control.loop
- source: default
  scopesBegin:
    - case-clause.expr
  scopes:
    - keyword.control.switch
- source: ':'
  scopes:
    - punctuation.definition.section.case-statement
  scopesEnd:
    - case-clause.expr
- source: abort
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: '`'
  scopesBegin:
    - string.template
  scopes:
    - punctuation.definition.string.template.begin
- source: 'invalid type for setValue: '
- source: '${'
  scopesBegin:
    - meta.template.expression
  scopes:
    - punctuation.definition.template-expression.begin
- source: _
  scopes:
    - meta.embedded.line
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.template-expression.end
  scopesEnd:
    - meta.template.expression
- source: '`'
  scopes:
    - punctuation.definition.string.template.end
  scopesEnd:
    - string.template
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - switch-block.expr
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - switch-statement.expr
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.function
    - meta.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: ___memory_base
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: WebAssembly
  scopes:
    - entity.name.type.module
- source: .
  scopes:
    - punctuation.accessor
- source: Global
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.objectliteral
  scopes:
    - punctuation.definition.block
- source: value
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.object.member
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.comma
- source: mutable
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: 'false'
  scopes:
    - constant.language.boolean.false
  scopesEnd:
    - meta.object.member
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.objectliteral
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '1024'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ___stack_pointer
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: WebAssembly
  scopes:
    - entity.name.type.module
- source: .
  scopes:
    - punctuation.accessor
- source: Global
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.objectliteral
  scopes:
    - punctuation.definition.block
- source: value
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.object.member
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.comma
- source: mutable
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: 'true'
  scopes:
    - constant.language.boolean.true
  scopesEnd:
    - meta.object.member
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.objectliteral
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '78096'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ___table_base
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: WebAssembly
  scopes:
    - entity.name.type.module
- source: .
  scopes:
    - punctuation.accessor
- source: Global
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.objectliteral
  scopes:
    - punctuation.definition.block
- source: value
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.object.member
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.comma
- source: mutable
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: 'false'
  scopes:
    - constant.language.boolean.false
  scopesEnd:
    - meta.object.member
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.objectliteral
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: ','
  scopes:
    - punctuation.separator.comma
- source: nowIsMonotonic
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: __emscripten_get_now_is_monotonic
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: nowIsMonotonic
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.var.expr
- source: __emscripten_get_now_is_monotonic
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: sig
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: _abort
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: abort
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.var.expr
    - meta.arrow
    - meta.block
- source: _abort
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: sig
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: v
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: _emscripten_date_now
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: Date
  scopesBegin:
    - meta.function-call
  scopes:
    - support.class.builtin
- source: .
  scopes:
    - punctuation.accessor
- source: now
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _emscripten_get_now
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
  scopesEnd:
    - meta.var.expr
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: (
  scopes:
    - meta.brace.round
- source: _emscripten_date_now
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: sig
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: d
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: _emscripten_get_now
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: performance
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: now
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: _emscripten_get_now
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: sig
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: d
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: _emscripten_memcpy_js
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: _
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: HEAPU8
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: copyWithin
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: _emscripten_memcpy_js
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: sig
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: vppp
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: getHeapMax
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: '2147483648'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: growMemory
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: t
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: wasmMemory
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: buffer
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: byteLength
  scopes:
    - variable.other.property
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '65535'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: '65536'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.var.expr
- source: try
  scopes:
    - keyword.control.trycatch
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: wasmMemory
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: grow
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: updateMemoryViews
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: catch
  scopes:
    - keyword.control.trycatch
- source: '{'
  scopesBegin:
    - meta.block
    - punctuation.definition.block
- source: '}'
  scopesEnd:
    - meta.block
    - punctuation.definition.block
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.arrow
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _emscripten_resize_heap
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: t
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: HEAPU8
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
  scopesEnd:
    - meta.var.expr
- source: e
  scopes:
    - variable.other.readwrite
- source: '>>>='
  scopes:
    - keyword.operator.assignment.compound.bitwise
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: _
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: getHeapMax
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.var.expr
    - meta.brace.round
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: '>'
  scopes:
    - keyword.operator.relational
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: return
  scopes:
    - keyword.control.flow.return
- source: 'false'
  scopes:
    - constant.language.boolean.false
- source: for
  scopes:
    - keyword.control.loop
- source: (
  scopes:
    - meta.brace.round
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: s
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: r
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: a
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '1'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.var.expr
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: a
  scopes:
    - variable.other.readwrite
- source: <=
  scopes:
    - keyword.operator.relational
- source: '4'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: a
  scopes:
    - variable.other.readwrite
- source: '*='
  scopes:
    - keyword.operator.assignment.compound
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: o
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: t
  scopes:
    - variable.other.readwrite
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: (
  scopes:
    - meta.brace.round
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '0'
  scopesBegin:
    - constant.numeric.decimal
- source: .
  scopes:
    - meta.delimiter.decimal.period
- source: '2'
  scopesEnd:
    - constant.numeric.decimal
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: a
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: o
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Math
  scopesBegin:
    - meta.function-call
  scopes:
    - support.constant.math
- source: .
  scopes:
    - punctuation.accessor
- source: min
  scopes:
    - support.function.math
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: o
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: e
  scopes:
    - variable.other.readwrite
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '100663296'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: 'n'
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Math
  scopesBegin:
    - meta.function-call
  scopes:
    - support.constant.math
- source: .
  scopes:
    - punctuation.accessor
- source: min
  scopes:
    - support.function.math
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: _
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: s
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Math
  scopesBegin:
    - meta.function-call
  scopes:
    - support.constant.math
- source: .
  scopes:
    - punctuation.accessor
- source: max
  scopes:
    - support.function.math
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: o
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: (
  scopesBegin:
    - meta.brace.round
- source: (
- source: (
  scopesEnd:
    - meta.brace.round
- source: r
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '65536'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: (
  scopes:
    - meta.brace.round
- source: s
  scopes:
    - variable.other.readwrite
- source: '%'
  scopes:
    - keyword.operator.arithmetic
- source: r
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: '%'
  scopes:
    - keyword.operator.arithmetic
- source: r
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.var.expr
    - meta.brace.round
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: growMemory
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: 'n'
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: return
  scopes:
    - keyword.control.flow.return
- source: 'true'
  scopes:
    - constant.language.boolean.true
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: 'false'
  scopes:
    - constant.language.boolean.false
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.var.expr
    - meta.arrow
    - meta.block
- source: _emscripten_resize_heap
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: sig
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ip
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: _fd_close
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: '52'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.var.expr
- source: _fd_close
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: sig
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ii
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: convertI32PairToI53Checked
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '2097152'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: '>>>'
  scopes:
    - keyword.operator.bitwise.shift
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: <
  scopes:
    - keyword.operator.relational
- source: '4194305'
  scopes:
    - constant.numeric.decimal
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '!'
  scopesBegin:
    - keyword.operator.logical
- source: '!'
  scopesEnd:
    - keyword.operator.logical
- source: e
  scopes:
    - variable.other.readwrite
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: '>>>'
  scopes:
    - keyword.operator.bitwise.shift
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '4294967296'
  scopes:
    - constant.numeric.decimal
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: t
  scopes:
    - variable.other.readwrite
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: NaN
  scopes:
    - constant.language.nan
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: function
  scopesBegin:
    - meta.function
  scopes:
    - storage.type.function
- source: _fd_seek
  scopes:
    - meta.definition.function
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: _
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: s
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: r
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: convertI32PairToI53Checked
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '70'
  scopes:
    - constant.numeric.decimal
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.function
    - meta.block
- source: _fd_seek
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: sig
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: iiiiip
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: printCharBuffers
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: 'null'
  scopes:
    - constant.language.null
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '['
  scopesBegin:
    - meta.array.literal
    - meta.brace.square
- source: ']'
  scopesEnd:
    - meta.array.literal
    - meta.brace.square
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '['
  scopesBegin:
    - meta.array.literal
    - meta.brace.square
- source: ']'
  scopesEnd:
    - meta.array.literal
    - meta.brace.square
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: printChar
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: _
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: printCharBuffers
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: e
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.var.expr
    - meta.array.literal
- source: t
  scopes:
    - variable.other.readwrite
- source: '==='
  scopes:
    - keyword.operator.comparison
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: '||'
  scopes:
    - keyword.operator.logical
- source: t
  scopes:
    - variable.other.readwrite
- source: '==='
  scopes:
    - keyword.operator.comparison
- source: '10'
  scopes:
    - constant.numeric.decimal
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: (
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: '==='
  scopes:
    - keyword.operator.comparison
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: out
  scopes:
    - variable.other.readwrite
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: err
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: UTF8ArrayToString
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: _
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: _
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: _
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: push
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.arrow
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.comma
- source: SYSCALLS
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '{'
  scopesBegin:
    - meta.objectliteral
  scopes:
    - punctuation.definition.block
- source: varargs
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: void
  scopes:
    - keyword.operator.expression.void
- source: '0'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: get
  scopesBegin:
    - meta.method.declaration
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: e
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: HEAP32
  scopes:
    - variable.other.constant
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: SYSCALLS
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: varargs
  scopes:
    - variable.other.property
- source: '>>'
  scopes:
    - keyword.operator.bitwise.shift
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.var.expr
    - meta.array.literal
- source: return
  scopes:
    - keyword.control.flow.return
- source: (
  scopes:
    - meta.brace.round
- source: SYSCALLS
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: varargs
  scopes:
    - variable.other.property
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: '4'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: e
  scopes:
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.method.declaration
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.comma
- source: getp
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
  scopes:
    - entity.name.function
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: SYSCALLS
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: get
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.object.member
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: getStr
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
  scopes:
    - entity.name.function
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: UTF8ToString
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.objectliteral
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _fd_write
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: _
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: s
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: for
  scopes:
    - keyword.control.loop
- source: (
  scopes:
    - meta.brace.round
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: r
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: a
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.var.expr
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: a
  scopes:
    - variable.other.readwrite
- source: <
  scopes:
    - keyword.operator.relational
- source: _
  scopes:
    - variable.other.readwrite
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: a
  scopes:
    - variable.other.readwrite
- source: ++
  scopes:
    - keyword.operator.increment
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: o
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: HEAPU32
  scopes:
    - variable.other.constant
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: t
  scopes:
    - variable.other.readwrite
- source: '>>'
  scopes:
    - keyword.operator.bitwise.shift
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: 'n'
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: HEAPU32
  scopes:
    - variable.other.constant
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '4'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: '>>'
  scopes:
    - keyword.operator.bitwise.shift
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.var.expr
    - meta.array.literal
- source: t
  scopes:
    - variable.other.readwrite
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: '8'
  scopes:
    - constant.numeric.decimal
- source: for
  scopes:
    - keyword.control.loop
- source: (
  scopes:
    - meta.brace.round
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: u
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.var.expr
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: u
  scopes:
    - variable.other.readwrite
- source: <
  scopes:
    - keyword.operator.relational
- source: 'n'
  scopes:
    - variable.other.readwrite
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: u
  scopes:
    - variable.other.readwrite
- source: ++
  scopes:
    - keyword.operator.increment
- source: )
  scopes:
    - meta.brace.round
- source: printChar
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: HEAPU8
  scopes:
    - variable.other.constant
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: o
  scopes:
    - variable.other.readwrite
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: u
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: r
  scopes:
    - variable.other.readwrite
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: 'n'
  scopes:
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: (
  scopes:
    - meta.brace.round
- source: HEAPU32
  scopes:
    - variable.other.constant
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: s
  scopes:
    - variable.other.readwrite
- source: '>>'
  scopes:
    - keyword.operator.bitwise.shift
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: r
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.var.expr
    - meta.arrow
    - meta.block
- source: function
  scopesBegin:
    - meta.function
  scopes:
    - storage.type.function
- source: _tree_sitter_log_callback
  scopes:
    - meta.definition.function
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: currentLogCallback
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: _
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: UTF8ToString
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: currentLogCallback
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: _
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: e
  scopes:
    - variable.other.readwrite
- source: '!=='
  scopes:
    - keyword.operator.comparison
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: function
  scopes:
    - storage.type.function
- source: _tree_sitter_parse_callback
  scopes:
    - meta.definition.function
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: _
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: s
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: r
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: a
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: currentParseCallback
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '{'
  scopesBegin:
    - meta.objectliteral
  scopes:
    - punctuation.definition.block
- source: row
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: _
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: column
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: s
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.object.member
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.objectliteral
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: typeof
  scopes:
    - keyword.operator.expression.typeof
- source: a
  scopes:
    - variable.other.readwrite
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: string
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: (
  scopes:
    - meta.brace.round
- source: setValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: r
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: a
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: stringToUTF16
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: a
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '10240'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: setValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: r
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.function
    - meta.block
- source: _fd_write
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: sig
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: iippp
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: runtimeKeepaliveCounter
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: keepRuntimeAlive
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: noExitRuntime
  scopes:
    - variable.other.readwrite
- source: '||'
  scopes:
    - keyword.operator.logical
- source: runtimeKeepaliveCounter
  scopes:
    - variable.other.readwrite
- source: '>'
  scopes:
    - keyword.operator.relational
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _proc_exit
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: (
  scopes:
    - meta.brace.round
- source: EXITSTATUS
  scopes:
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: keepRuntimeAlive
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: '||'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: onExit
  scopes:
    - entity.name.function
- source: '?.'
  scopes:
    - punctuation.accessor.optional
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: ABORT
  scopes:
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: 'true'
  scopes:
    - constant.language.boolean.true
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: quit_
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: ExitStatus
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.var.expr
    - meta.arrow
    - meta.block
- source: _proc_exit
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: sig
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: vi
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: exitJS
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: (
  scopes:
    - meta.brace.round
- source: EXITSTATUS
  scopes:
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _proc_exit
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.arrow
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.comma
- source: handleException
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: instanceof
  scopes:
    - keyword.operator.expression.instanceof
- source: ExitStatus
  scopes:
    - entity.name.type
- source: '||'
  scopes:
    - keyword.operator.logical
- source: e
  scopes:
    - variable.other.readwrite
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: unwind
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: return
  scopes:
    - keyword.control.flow.return
- source: EXITSTATUS
  scopes:
    - variable.other.constant
- source: quit_
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.arrow
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.comma
- source: lengthBytesUTF8
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: for
  scopes:
    - keyword.control.loop
- source: (
  scopes:
    - meta.brace.round
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: t
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.var.expr
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: _
  scopes:
    - variable.other.readwrite
- source: <
  scopes:
    - keyword.operator.relational
- source: e
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ++
  scopes:
    - keyword.operator.increment
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: s
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: e
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: charCodeAt
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: s
  scopes:
    - variable.other.readwrite
- source: <=
  scopes:
    - keyword.operator.relational
- source: '127'
  scopes:
    - constant.numeric.decimal
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: t
  scopes:
    - variable.other.readwrite
- source: ++
  scopes:
    - keyword.operator.increment
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: s
  scopes:
    - variable.other.readwrite
- source: <=
  scopes:
    - keyword.operator.relational
- source: '2047'
  scopes:
    - constant.numeric.decimal
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: s
  scopes:
    - variable.other.readwrite
- source: '>='
  scopes:
    - keyword.operator.relational
- source: '55296'
  scopes:
    - constant.numeric.decimal
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: s
  scopes:
    - variable.other.readwrite
- source: <=
  scopes:
    - keyword.operator.relational
- source: '57343'
  scopes:
    - constant.numeric.decimal
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: (
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: '4'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ++
  scopes:
    - keyword.operator.increment
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: '3'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: t
  scopes:
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.arrow
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.comma
- source: stringToUTF8Array
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: _
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: s
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: s
  scopes:
    - variable.other.readwrite
- source: '>'
  scopes:
    - keyword.operator.relational
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: return
  scopes:
    - keyword.control.flow.return
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: for
  scopes:
    - keyword.control.loop
- source: (
  scopes:
    - meta.brace.round
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: r
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: _
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: a
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: _
  scopes:
    - variable.other.readwrite
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: s
  scopes:
    - variable.other.readwrite
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: o
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.var.expr
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: o
  scopes:
    - variable.other.readwrite
- source: <
  scopes:
    - keyword.operator.relational
- source: e
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ++
  scopes:
    - keyword.operator.increment
- source: o
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: 'n'
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: e
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: charCodeAt
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: o
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: 'n'
  scopes:
    - variable.other.readwrite
- source: '>='
  scopes:
    - keyword.operator.relational
- source: '55296'
  scopes:
    - constant.numeric.decimal
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: 'n'
  scopes:
    - variable.other.readwrite
- source: <=
  scopes:
    - keyword.operator.relational
- source: '57343'
  scopes:
    - constant.numeric.decimal
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: 'n'
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: '65536'
  scopes:
    - constant.numeric.decimal
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: (
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: '1023'
  scopes:
    - constant.numeric.decimal
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: 'n'
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '10'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: '|'
  scopes:
    - keyword.operator.bitwise
- source: (
  scopes:
    - meta.brace.round
- source: '1023'
  scopes:
    - constant.numeric.decimal
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: e
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: charCodeAt
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: ++
  scopes:
    - keyword.operator.increment
- source: o
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: 'n'
  scopes:
    - variable.other.readwrite
- source: <=
  scopes:
    - keyword.operator.relational
- source: '127'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: _
  scopes:
    - variable.other.readwrite
- source: '>='
  scopes:
    - keyword.operator.relational
- source: a
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: break
  scopes:
    - keyword.control.loop
- source: t
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: _
  scopes:
    - variable.other.readwrite
- source: ++
  scopes:
    - keyword.operator.increment
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: 'n'
  scopes:
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: else
  scopesBegin:
    - keyword.control.conditional
- source: if
  scopesEnd:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: 'n'
  scopes:
    - variable.other.readwrite
- source: <=
  scopes:
    - keyword.operator.relational
- source: '2047'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: _
  scopes:
    - variable.other.readwrite
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: '>='
  scopes:
    - keyword.operator.relational
- source: a
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: break
  scopes:
    - keyword.control.loop
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: _
  scopes:
    - variable.other.readwrite
- source: ++
  scopes:
    - keyword.operator.increment
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '192'
  scopes:
    - constant.numeric.decimal
- source: '|'
  scopes:
    - keyword.operator.bitwise
- source: (
  scopes:
    - meta.brace.round
- source: 'n'
  scopes:
    - variable.other.readwrite
- source: '>>'
  scopes:
    - keyword.operator.bitwise.shift
- source: '6'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: _
  scopes:
    - variable.other.readwrite
- source: ++
  scopes:
    - keyword.operator.increment
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '128'
  scopes:
    - constant.numeric.decimal
- source: '|'
  scopes:
    - keyword.operator.bitwise
- source: (
  scopes:
    - meta.brace.round
- source: '63'
  scopes:
    - constant.numeric.decimal
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: 'n'
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: else
  scopesBegin:
    - keyword.control.conditional
- source: if
  scopesEnd:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: 'n'
  scopes:
    - variable.other.readwrite
- source: <=
  scopes:
    - keyword.operator.relational
- source: '65535'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: _
  scopes:
    - variable.other.readwrite
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: '>='
  scopes:
    - keyword.operator.relational
- source: a
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: break
  scopes:
    - keyword.control.loop
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: _
  scopes:
    - variable.other.readwrite
- source: ++
  scopes:
    - keyword.operator.increment
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '224'
  scopes:
    - constant.numeric.decimal
- source: '|'
  scopes:
    - keyword.operator.bitwise
- source: (
  scopes:
    - meta.brace.round
- source: 'n'
  scopes:
    - variable.other.readwrite
- source: '>>'
  scopes:
    - keyword.operator.bitwise.shift
- source: '12'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: _
  scopes:
    - variable.other.readwrite
- source: ++
  scopes:
    - keyword.operator.increment
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '128'
  scopes:
    - constant.numeric.decimal
- source: '|'
  scopes:
    - keyword.operator.bitwise
- source: (
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: 'n'
  scopes:
    - variable.other.readwrite
- source: '>>'
  scopes:
    - keyword.operator.bitwise.shift
- source: '6'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: '63'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: _
  scopes:
    - variable.other.readwrite
- source: ++
  scopes:
    - keyword.operator.increment
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '128'
  scopes:
    - constant.numeric.decimal
- source: '|'
  scopes:
    - keyword.operator.bitwise
- source: (
  scopes:
    - meta.brace.round
- source: '63'
  scopes:
    - constant.numeric.decimal
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: 'n'
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.conditional
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: _
  scopes:
    - variable.other.readwrite
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '3'
  scopes:
    - constant.numeric.decimal
- source: '>='
  scopes:
    - keyword.operator.relational
- source: a
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: break
  scopes:
    - keyword.control.loop
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: _
  scopes:
    - variable.other.readwrite
- source: ++
  scopes:
    - keyword.operator.increment
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '240'
  scopes:
    - constant.numeric.decimal
- source: '|'
  scopes:
    - keyword.operator.bitwise
- source: (
  scopes:
    - meta.brace.round
- source: 'n'
  scopes:
    - variable.other.readwrite
- source: '>>'
  scopes:
    - keyword.operator.bitwise.shift
- source: '18'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: _
  scopes:
    - variable.other.readwrite
- source: ++
  scopes:
    - keyword.operator.increment
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '128'
  scopes:
    - constant.numeric.decimal
- source: '|'
  scopes:
    - keyword.operator.bitwise
- source: (
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: 'n'
  scopes:
    - variable.other.readwrite
- source: '>>'
  scopes:
    - keyword.operator.bitwise.shift
- source: '12'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: '63'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: _
  scopes:
    - variable.other.readwrite
- source: ++
  scopes:
    - keyword.operator.increment
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '128'
  scopes:
    - constant.numeric.decimal
- source: '|'
  scopes:
    - keyword.operator.bitwise
- source: (
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: 'n'
  scopes:
    - variable.other.readwrite
- source: '>>'
  scopes:
    - keyword.operator.bitwise.shift
- source: '6'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: '63'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: _
  scopes:
    - variable.other.readwrite
- source: ++
  scopes:
    - keyword.operator.increment
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '128'
  scopes:
    - constant.numeric.decimal
- source: '|'
  scopes:
    - keyword.operator.bitwise
- source: (
  scopes:
    - meta.brace.round
- source: '63'
  scopes:
    - constant.numeric.decimal
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: 'n'
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: _
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: r
  scopes:
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.arrow
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.comma
- source: stringToUTF8
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: _
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: stringToUTF8Array
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: HEAPU8
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: stringToUTF8OnStack
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: t
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: lengthBytesUTF8
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: stackAlloc
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: return
  scopes:
    - keyword.control.flow.return
- source: stringToUTF8
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.arrow
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.comma
- source: stringToUTF16
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: _
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopesBegin:
    - meta.brace.round
- source: (
- source: (
  scopesEnd:
    - meta.brace.round
- source: _
  scopes:
    - variable.other.readwrite
- source: '??'
  scopes:
    - keyword.operator.logical
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '2147483647'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: <
  scopes:
    - keyword.operator.relational
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: return
  scopes:
    - keyword.control.flow.return
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: for
  scopes:
    - keyword.control.loop
- source: (
  scopes:
    - meta.brace.round
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: s
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: r
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: _
  scopes:
    - variable.other.readwrite
- source: '-='
  scopes:
    - keyword.operator.assignment.compound
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: <
  scopes:
    - keyword.operator.relational
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: e
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: _
  scopes:
    - variable.other.readwrite
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: e
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
- source: ','
  scopes:
    - punctuation.separator.comma
- source: a
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.var.expr
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: a
  scopes:
    - variable.other.readwrite
- source: <
  scopes:
    - keyword.operator.relational
- source: r
  scopes:
    - variable.other.readwrite
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ++
  scopes:
    - keyword.operator.increment
- source: a
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: o
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: e
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: charCodeAt
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: a
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: (
  scopes:
    - meta.brace.round
- source: HEAP16
  scopes:
    - variable.other.constant
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: t
  scopes:
    - variable.other.readwrite
- source: '>>'
  scopes:
    - keyword.operator.bitwise.shift
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: o
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: (
  scopes:
    - meta.brace.round
- source: HEAP16
  scopes:
    - variable.other.constant
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: t
  scopes:
    - variable.other.readwrite
- source: '>>'
  scopes:
    - keyword.operator.bitwise.shift
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: s
  scopes:
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.arrow
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.comma
- source: AsciiToString
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: for
  scopes:
    - keyword.control.loop
- source: (
  scopes:
    - meta.brace.round
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: t
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.var.expr
    - string.quoted.double
- source: ;
  scopesBegin:
    - punctuation.terminator.statement
- source: ;
  scopesEnd:
    - punctuation.terminator.statement
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: _
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: HEAPU8
  scopes:
    - variable.other.constant
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: e
  scopes:
    - variable.other.readwrite
- source: ++
  scopes:
    - keyword.operator.increment
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.var.expr
    - meta.array.literal
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: return
  scopes:
    - keyword.control.flow.return
- source: t
  scopesBegin:
    - variable.other.readwrite
- source: t
  scopesEnd:
    - variable.other.readwrite
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: String
  scopesBegin:
    - meta.function-call
  scopes:
    - support.class.builtin
- source: .
  scopes:
    - punctuation.accessor
- source: fromCharCode
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.arrow
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.comma
- source: wasmImports
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '{'
  scopesBegin:
    - meta.objectliteral
  scopes:
    - punctuation.definition.block
- source: __heap_base
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: ___heap_base
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: __indirect_function_table
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: wasmTable
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: __memory_base
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: ___memory_base
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: __stack_pointer
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: ___stack_pointer
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: __table_base
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: ___table_base
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _emscripten_get_now_is_monotonic
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: __emscripten_get_now_is_monotonic
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: abort
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: _abort
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: emscripten_get_now
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: _emscripten_get_now
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: emscripten_memcpy_js
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: _emscripten_memcpy_js
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: emscripten_resize_heap
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: _emscripten_resize_heap
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: fd_close
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: _fd_close
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: fd_seek
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: _fd_seek
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: fd_write
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: _fd_write
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: memory
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: wasmMemory
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: tree_sitter_log_callback
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: _tree_sitter_log_callback
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: tree_sitter_parse_callback
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: _tree_sitter_parse_callback
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.object.member
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.objectliteral
- source: ','
  scopes:
    - punctuation.separator.comma
- source: wasmExports
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: createWasm
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ___wasm_call_ctors
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: ___wasm_call_ctors
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: __wasm_call_ctors
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ___wasm_apply_data_relocs
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: ___wasm_apply_data_relocs
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: __wasm_apply_data_relocs
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _malloc
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _malloc
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _malloc
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _malloc
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: malloc
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _calloc
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _calloc
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _calloc
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _calloc
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: calloc
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _realloc
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _realloc
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _realloc
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _realloc
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: realloc
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _free
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _free
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _free
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _free
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: free
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_language_symbol_count
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_language_symbol_count
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_language_symbol_count
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_language_symbol_count
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_language_symbol_count
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_language_state_count
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_language_state_count
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_language_state_count
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_language_state_count
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_language_state_count
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_language_version
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_language_version
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_language_version
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_language_version
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_language_version
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_language_field_count
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_language_field_count
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_language_field_count
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_language_field_count
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_language_field_count
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_language_next_state
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_language_next_state
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: _
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_language_next_state
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_language_next_state
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_language_next_state
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_language_symbol_name
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_language_symbol_name
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_language_symbol_name
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_language_symbol_name
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_language_symbol_name
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_language_symbol_for_name
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_language_symbol_for_name
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: _
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: s
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_language_symbol_for_name
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_language_symbol_for_name
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_language_symbol_for_name
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: s
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _strncmp
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _strncmp
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: _
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _strncmp
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _strncmp
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: strncmp
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_language_symbol_type
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_language_symbol_type
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_language_symbol_type
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_language_symbol_type
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_language_symbol_type
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_language_field_name_for_id
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_language_field_name_for_id
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_language_field_name_for_id
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_language_field_name_for_id
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_language_field_name_for_id
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_lookahead_iterator_new
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_lookahead_iterator_new
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_lookahead_iterator_new
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_lookahead_iterator_new
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_lookahead_iterator_new
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_lookahead_iterator_delete
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_lookahead_iterator_delete
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_lookahead_iterator_delete
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_lookahead_iterator_delete
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_lookahead_iterator_delete
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_lookahead_iterator_reset_state
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_lookahead_iterator_reset_state
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_lookahead_iterator_reset_state
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_lookahead_iterator_reset_state
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_lookahead_iterator_reset_state
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_lookahead_iterator_reset
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_lookahead_iterator_reset
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: _
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_lookahead_iterator_reset
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_lookahead_iterator_reset
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_lookahead_iterator_reset
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_lookahead_iterator_next
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_lookahead_iterator_next
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_lookahead_iterator_next
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_lookahead_iterator_next
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_lookahead_iterator_next
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_lookahead_iterator_current_symbol
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_lookahead_iterator_current_symbol
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_lookahead_iterator_current_symbol
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_lookahead_iterator_current_symbol
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_lookahead_iterator_current_symbol
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _memset
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _memset
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: _
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _memset
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _memset
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: memset
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _memcpy
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _memcpy
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: _
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _memcpy
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _memcpy
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: memcpy
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_parser_delete
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_parser_delete
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_parser_delete
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_parser_delete
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_parser_delete
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_parser_reset
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_parser_reset
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_parser_reset
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_parser_reset
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_parser_reset
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_parser_set_language
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_parser_set_language
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_parser_set_language
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_parser_set_language
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_parser_set_language
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_parser_timeout_micros
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_parser_timeout_micros
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_parser_timeout_micros
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_parser_timeout_micros
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_parser_timeout_micros
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_parser_set_timeout_micros
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_parser_set_timeout_micros
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: _
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_parser_set_timeout_micros
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_parser_set_timeout_micros
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_parser_set_timeout_micros
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_parser_set_included_ranges
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_parser_set_included_ranges
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: _
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_parser_set_included_ranges
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_parser_set_included_ranges
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_parser_set_included_ranges
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _memmove
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _memmove
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: _
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _memmove
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _memmove
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: memmove
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _memcmp
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _memcmp
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: _
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _memcmp
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _memcmp
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: memcmp
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_query_new
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_query_new
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: _
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: s
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: r
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_query_new
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_query_new
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_query_new
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: s
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: r
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_query_delete
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_query_delete
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_query_delete
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_query_delete
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_query_delete
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _iswspace
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _iswspace
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _iswspace
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _iswspace
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: iswspace
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _iswalnum
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _iswalnum
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _iswalnum
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _iswalnum
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: iswalnum
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_query_pattern_count
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_query_pattern_count
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_query_pattern_count
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_query_pattern_count
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_query_pattern_count
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_query_capture_count
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_query_capture_count
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_query_capture_count
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_query_capture_count
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_query_capture_count
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_query_string_count
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_query_string_count
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_query_string_count
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_query_string_count
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_query_string_count
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_query_capture_name_for_id
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_query_capture_name_for_id
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: _
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_query_capture_name_for_id
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_query_capture_name_for_id
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_query_capture_name_for_id
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_query_string_value_for_id
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_query_string_value_for_id
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: _
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_query_string_value_for_id
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_query_string_value_for_id
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_query_string_value_for_id
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_query_predicates_for_pattern
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_query_predicates_for_pattern
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: _
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_query_predicates_for_pattern
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_query_predicates_for_pattern
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_query_predicates_for_pattern
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_query_disable_capture
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_query_disable_capture
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: _
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_query_disable_capture
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_query_disable_capture
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_query_disable_capture
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_tree_copy
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_copy
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_tree_copy
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_copy
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_tree_copy
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_tree_delete
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_delete
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_tree_delete
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_delete
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_tree_delete
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_init
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_init
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_init
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_init
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_init
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
- source: )
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_parser_new_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_parser_new_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_parser_new_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_parser_new_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_parser_new_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
- source: )
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_parser_enable_logger_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_parser_enable_logger_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_parser_enable_logger_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_parser_enable_logger_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_parser_enable_logger_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_parser_parse_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_parser_parse_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: _
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: s
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: r
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_parser_parse_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_parser_parse_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_parser_parse_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: s
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: r
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_parser_included_ranges_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_parser_included_ranges_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_parser_included_ranges_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_parser_included_ranges_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_parser_included_ranges_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_language_type_is_named_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_language_type_is_named_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_language_type_is_named_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_language_type_is_named_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_language_type_is_named_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_language_type_is_visible_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_language_type_is_visible_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_language_type_is_visible_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_language_type_is_visible_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_language_type_is_visible_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_tree_root_node_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_root_node_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_tree_root_node_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_root_node_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_tree_root_node_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_tree_root_node_with_offset_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_root_node_with_offset_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_tree_root_node_with_offset_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_root_node_with_offset_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_tree_root_node_with_offset_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_tree_edit_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_edit_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_tree_edit_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_edit_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_tree_edit_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_tree_included_ranges_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_included_ranges_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_tree_included_ranges_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_included_ranges_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_tree_included_ranges_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_tree_get_changed_ranges_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_get_changed_ranges_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_tree_get_changed_ranges_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_get_changed_ranges_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_tree_get_changed_ranges_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_tree_cursor_new_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_new_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_tree_cursor_new_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_new_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_tree_cursor_new_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_tree_cursor_delete_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_delete_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_tree_cursor_delete_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_delete_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_tree_cursor_delete_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_tree_cursor_reset_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_reset_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_tree_cursor_reset_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_reset_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_tree_cursor_reset_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_tree_cursor_reset_to_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_reset_to_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_tree_cursor_reset_to_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_reset_to_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_tree_cursor_reset_to_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_tree_cursor_goto_first_child_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_goto_first_child_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_tree_cursor_goto_first_child_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_goto_first_child_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_tree_cursor_goto_first_child_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_tree_cursor_goto_last_child_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_goto_last_child_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_tree_cursor_goto_last_child_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_goto_last_child_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_tree_cursor_goto_last_child_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_tree_cursor_goto_first_child_for_index_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_goto_first_child_for_index_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_tree_cursor_goto_first_child_for_index_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_goto_first_child_for_index_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_tree_cursor_goto_first_child_for_index_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_tree_cursor_goto_first_child_for_position_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_goto_first_child_for_position_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_tree_cursor_goto_first_child_for_position_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_goto_first_child_for_position_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_tree_cursor_goto_first_child_for_position_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_tree_cursor_goto_next_sibling_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_goto_next_sibling_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_tree_cursor_goto_next_sibling_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_goto_next_sibling_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_tree_cursor_goto_next_sibling_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_tree_cursor_goto_previous_sibling_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_goto_previous_sibling_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_tree_cursor_goto_previous_sibling_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_goto_previous_sibling_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_tree_cursor_goto_previous_sibling_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_tree_cursor_goto_descendant_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_goto_descendant_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_tree_cursor_goto_descendant_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_goto_descendant_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_tree_cursor_goto_descendant_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_tree_cursor_goto_parent_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_goto_parent_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_tree_cursor_goto_parent_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_goto_parent_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_tree_cursor_goto_parent_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_tree_cursor_current_node_type_id_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_current_node_type_id_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_tree_cursor_current_node_type_id_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_current_node_type_id_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_tree_cursor_current_node_type_id_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_tree_cursor_current_node_state_id_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_current_node_state_id_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_tree_cursor_current_node_state_id_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_current_node_state_id_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_tree_cursor_current_node_state_id_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_tree_cursor_current_node_is_named_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_current_node_is_named_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_tree_cursor_current_node_is_named_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_current_node_is_named_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_tree_cursor_current_node_is_named_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_tree_cursor_current_node_is_missing_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_current_node_is_missing_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_tree_cursor_current_node_is_missing_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_current_node_is_missing_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_tree_cursor_current_node_is_missing_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_tree_cursor_current_node_id_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_current_node_id_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_tree_cursor_current_node_id_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_current_node_id_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_tree_cursor_current_node_id_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_tree_cursor_start_position_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_start_position_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_tree_cursor_start_position_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_start_position_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_tree_cursor_start_position_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_tree_cursor_end_position_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_end_position_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_tree_cursor_end_position_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_end_position_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_tree_cursor_end_position_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_tree_cursor_start_index_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_start_index_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_tree_cursor_start_index_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_start_index_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_tree_cursor_start_index_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_tree_cursor_end_index_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_end_index_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_tree_cursor_end_index_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_end_index_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_tree_cursor_end_index_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_tree_cursor_current_field_id_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_current_field_id_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_tree_cursor_current_field_id_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_current_field_id_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_tree_cursor_current_field_id_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_tree_cursor_current_depth_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_current_depth_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_tree_cursor_current_depth_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_current_depth_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_tree_cursor_current_depth_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_tree_cursor_current_descendant_index_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_current_descendant_index_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_tree_cursor_current_descendant_index_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_current_descendant_index_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_tree_cursor_current_descendant_index_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_tree_cursor_current_node_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_current_node_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_tree_cursor_current_node_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_current_node_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_tree_cursor_current_node_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_node_symbol_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_symbol_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_node_symbol_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_symbol_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_node_symbol_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_node_field_name_for_child_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_field_name_for_child_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_node_field_name_for_child_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_field_name_for_child_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_node_field_name_for_child_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_node_children_by_field_id_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_children_by_field_id_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_node_children_by_field_id_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_children_by_field_id_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_node_children_by_field_id_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_node_first_child_for_byte_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_first_child_for_byte_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_node_first_child_for_byte_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_first_child_for_byte_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_node_first_child_for_byte_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_node_first_named_child_for_byte_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_first_named_child_for_byte_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_node_first_named_child_for_byte_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_first_named_child_for_byte_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_node_first_named_child_for_byte_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_node_grammar_symbol_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_grammar_symbol_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_node_grammar_symbol_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_grammar_symbol_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_node_grammar_symbol_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_node_child_count_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_child_count_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_node_child_count_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_child_count_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_node_child_count_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_node_named_child_count_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_named_child_count_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_node_named_child_count_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_named_child_count_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_node_named_child_count_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_node_child_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_child_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_node_child_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_child_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_node_child_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_node_named_child_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_named_child_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_node_named_child_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_named_child_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_node_named_child_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_node_child_by_field_id_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_child_by_field_id_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_node_child_by_field_id_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_child_by_field_id_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_node_child_by_field_id_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_node_next_sibling_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_next_sibling_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_node_next_sibling_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_next_sibling_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_node_next_sibling_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_node_prev_sibling_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_prev_sibling_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_node_prev_sibling_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_prev_sibling_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_node_prev_sibling_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_node_next_named_sibling_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_next_named_sibling_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_node_next_named_sibling_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_next_named_sibling_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_node_next_named_sibling_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_node_prev_named_sibling_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_prev_named_sibling_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_node_prev_named_sibling_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_prev_named_sibling_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_node_prev_named_sibling_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_node_descendant_count_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_descendant_count_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_node_descendant_count_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_descendant_count_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_node_descendant_count_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_node_parent_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_parent_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_node_parent_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_parent_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_node_parent_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_node_descendant_for_index_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_descendant_for_index_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_node_descendant_for_index_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_descendant_for_index_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_node_descendant_for_index_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_node_named_descendant_for_index_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_named_descendant_for_index_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_node_named_descendant_for_index_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_named_descendant_for_index_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_node_named_descendant_for_index_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_node_descendant_for_position_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_descendant_for_position_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_node_descendant_for_position_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_descendant_for_position_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_node_descendant_for_position_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_node_named_descendant_for_position_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_named_descendant_for_position_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_node_named_descendant_for_position_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_named_descendant_for_position_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_node_named_descendant_for_position_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_node_start_point_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_start_point_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_node_start_point_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_start_point_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_node_start_point_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_node_end_point_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_end_point_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_node_end_point_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_end_point_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_node_end_point_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_node_start_index_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_start_index_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_node_start_index_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_start_index_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_node_start_index_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_node_end_index_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_end_index_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_node_end_index_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_end_index_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_node_end_index_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_node_to_string_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_to_string_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_node_to_string_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_to_string_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_node_to_string_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_node_children_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_children_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_node_children_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_children_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_node_children_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_node_named_children_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_named_children_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_node_named_children_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_named_children_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_node_named_children_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_node_descendants_of_type_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_descendants_of_type_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: _
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: s
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: r
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: a
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: o
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_node_descendants_of_type_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_descendants_of_type_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_node_descendants_of_type_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: s
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: r
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: a
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: o
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_node_is_named_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_is_named_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_node_is_named_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_is_named_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_node_is_named_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_node_has_changes_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_has_changes_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_node_has_changes_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_has_changes_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_node_has_changes_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_node_has_error_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_has_error_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_node_has_error_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_has_error_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_node_has_error_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_node_is_error_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_is_error_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_node_is_error_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_is_error_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_node_is_error_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_node_is_missing_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_is_missing_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_node_is_missing_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_is_missing_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_node_is_missing_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_node_is_extra_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_is_extra_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_node_is_extra_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_is_extra_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_node_is_extra_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_node_parse_state_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_parse_state_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_node_parse_state_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_parse_state_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_node_parse_state_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_node_next_parse_state_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_next_parse_state_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_node_next_parse_state_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_next_parse_state_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_node_next_parse_state_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_query_matches_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_query_matches_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: _
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: s
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: r
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: a
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: o
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: 'n'
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: u
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: m
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_query_matches_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_query_matches_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_query_matches_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: s
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: r
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: a
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: o
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: 'n'
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: u
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: m
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _ts_query_captures_wasm
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_query_captures_wasm
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: _
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: s
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: r
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: a
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: o
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: 'n'
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: u
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: m
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _ts_query_captures_wasm
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_query_captures_wasm
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ts_query_captures_wasm
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: s
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: r
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: a
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: o
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: 'n'
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: u
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: m
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _iswalpha
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _iswalpha
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _iswalpha
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _iswalpha
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: iswalpha
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _iswblank
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _iswblank
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _iswblank
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _iswblank
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: iswblank
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _iswdigit
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _iswdigit
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _iswdigit
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _iswdigit
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: iswdigit
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _iswlower
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _iswlower
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _iswlower
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _iswlower
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: iswlower
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _iswupper
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _iswupper
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _iswupper
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _iswupper
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: iswupper
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _iswxdigit
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _iswxdigit
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _iswxdigit
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _iswxdigit
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: iswxdigit
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _memchr
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _memchr
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: _
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _memchr
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _memchr
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: memchr
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _strlen
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _strlen
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _strlen
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _strlen
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: strlen
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _strcmp
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _strcmp
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _strcmp
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _strcmp
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: strcmp
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _strncat
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _strncat
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: _
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _strncat
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _strncat
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: strncat
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _strncpy
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _strncpy
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: _
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _strncpy
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _strncpy
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: strncpy
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _towlower
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _towlower
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _towlower
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _towlower
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: towlower
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _towupper
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _towupper
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _towupper
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _towupper
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: towupper
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _setThrew
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _setThrew
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: setThrew
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: stackSave
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: stackSave
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: stackSave
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: stackRestore
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: stackRestore
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: stackRestore
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: stackAlloc
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: stackAlloc
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: stackAlloc
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: dynCall_jiji
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: dynCall_jiji
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: _
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: s
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: r
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: dynCall_jiji
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: dynCall_jiji
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: dynCall_jiji
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: s
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: r
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _orig$ts_parser_timeout_micros
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _orig$ts_parser_timeout_micros
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _orig$ts_parser_timeout_micros
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _orig$ts_parser_timeout_micros
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: orig$ts_parser_timeout_micros
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _orig$ts_parser_set_timeout_micros
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _orig$ts_parser_set_timeout_micros
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: _orig$ts_parser_set_timeout_micros
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: _orig$ts_parser_set_timeout_micros
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: wasmExports
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: orig$ts_parser_set_timeout_micros
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: calledRun
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
  scopesEnd:
    - meta.var.expr
- source: function
  scopesBegin:
    - meta.function
  scopes:
    - storage.type.function
- source: callMain
  scopes:
    - meta.definition.function
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '['
  scopesBegin:
    - meta.array.literal
    - meta.brace.square
- source: ']'
  scopesEnd:
    - meta.array.literal
    - meta.brace.square
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: t
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: resolveGlobalSymbol
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: main
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: .
  scopes:
    - punctuation.accessor
- source: sym
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.var.expr
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: e
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: unshift
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: thisProgram
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: _
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: e
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
- source: ','
  scopes:
    - punctuation.separator.comma
- source: s
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: stackAlloc
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: '4'
  scopes:
    - constant.numeric.decimal
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: (
  scopes:
    - meta.brace.round
- source: _
  scopes:
    - variable.other.readwrite
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: r
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: s
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.var.expr
- source: e
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: forEach
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: o
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: (
  scopes:
    - meta.brace.round
- source: HEAPU32
  scopes:
    - variable.other.constant
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: r
  scopes:
    - variable.other.readwrite
- source: '>>'
  scopes:
    - keyword.operator.bitwise.shift
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: stringToUTF8OnStack
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: o
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: r
  scopes:
    - variable.other.readwrite
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: '4'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.arrow
    - meta.block
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: HEAPU32
  scopes:
    - variable.other.constant
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: r
  scopes:
    - variable.other.readwrite
- source: '>>'
  scopes:
    - keyword.operator.bitwise.shift
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: try
  scopes:
    - keyword.control.trycatch
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: a
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: t
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: _
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: s
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: return
  scopes:
    - keyword.control.flow.return
- source: exitJS
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: a
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: 'true'
  scopes:
    - constant.language.boolean.true
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: a
  scopes:
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: catch
  scopes:
    - keyword.control.trycatch
- source: (
  scopes:
    - meta.brace.round
- source: o
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: handleException
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: o
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: function
  scopes:
    - storage.type.function
- source: run
  scopes:
    - meta.definition.function
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: arguments_
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: function
  scopesBegin:
    - meta.function
  scopes:
    - storage.type.function
- source: t
  scopes:
    - meta.definition.function
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: calledRun
  scopes:
    - variable.other.readwrite
- source: '||'
  scopes:
    - keyword.operator.logical
- source: (
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: calledRun
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: 'true'
  scopes:
    - constant.language.boolean.true
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: calledRun
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: 'true'
  scopes:
    - constant.language.boolean.true
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ABORT
  scopes:
    - variable.other.constant
- source: '||'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: initRuntime
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: preMain
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: onRuntimeInitialized
  scopes:
    - variable.other.property
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: Module
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: onRuntimeInitialized
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: shouldRunNow
  scopes:
    - variable.other.readwrite
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: callMain
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: postRun
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
- source: )
- source: )
  scopesEnd:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.function
    - meta.block
- source: runDependencies
  scopes:
    - variable.other.readwrite
- source: '>'
  scopes:
    - keyword.operator.relational
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: '||'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: preRun
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: runDependencies
  scopes:
    - variable.other.readwrite
- source: '>'
  scopes:
    - keyword.operator.relational
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: '||'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: setStatus
  scopes:
    - variable.other.property
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: setStatus
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Running...
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: setTimeout
  scopes:
    - meta.function-call
    - support.function
- source: (
  scopes:
    - meta.brace.round
- source: function
  scopesBegin:
    - meta.function.expression
  scopes:
    - storage.type.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: setTimeout
  scopes:
    - meta.function-call
    - support.function
- source: (
  scopes:
    - meta.brace.round
- source: function
  scopesBegin:
    - meta.function.expression
  scopes:
    - storage.type.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: Module
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: setStatus
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.function.expression
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.function.expression
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: t
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
- source: )
- source: )
  scopesEnd:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.function
    - meta.block
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopesBegin:
    - meta.brace.round
- source: (
- source: (
  scopesEnd:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: AsciiToString
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: AsciiToString
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: stringToUTF16
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: stringToUTF16
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: dependenciesFulfilled
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: function
  scopesBegin:
    - meta.function.expression
  scopes:
    - storage.type.function
- source: e
  scopes:
    - meta.definition.function
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: calledRun
  scopes:
    - variable.other.readwrite
- source: '||'
  scopes:
    - keyword.operator.logical
- source: run
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: calledRun
  scopes:
    - variable.other.readwrite
- source: '||'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: dependenciesFulfilled
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.function.expression
    - meta.block
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: preInit
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: for
  scopes:
    - keyword.control.loop
- source: (
  scopes:
    - meta.brace.round
- source: typeof
  scopes:
    - keyword.operator.expression.typeof
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: preInit
  scopes:
    - variable.other.property
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: function
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: preInit
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: preInit
  scopes:
    - variable.other.property
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: preInit
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
- source: '>'
  scopes:
    - keyword.operator.relational
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: )
  scopes:
    - meta.brace.round
- source: Module
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: preInit
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: pop
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
- source: (
- source: )
  scopesEnd:
    - meta.brace.round
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: shouldRunNow
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: 'true'
  scopes:
    - constant.language.boolean.true
  scopesEnd:
    - meta.var.expr
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: noInitialRun
  scopes:
    - variable.other.property
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: shouldRunNow
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: 'false'
  scopes:
    - constant.language.boolean.false
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: run
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: C
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Module
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: INTERNAL
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '{'
  scopesBegin:
    - meta.objectliteral
    - punctuation.definition.block
- source: '}'
  scopesEnd:
    - meta.objectliteral
    - punctuation.definition.block
- source: ','
  scopes:
    - punctuation.separator.comma
- source: SIZE_OF_INT
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '4'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: SIZE_OF_CURSOR
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '4'
  scopes:
    - constant.numeric.decimal
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: SIZE_OF_INT
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: SIZE_OF_NODE
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '5'
  scopes:
    - constant.numeric.decimal
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: SIZE_OF_INT
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: SIZE_OF_POINT
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: SIZE_OF_INT
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: SIZE_OF_RANGE
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: SIZE_OF_INT
  scopes:
    - variable.other.constant
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: SIZE_OF_POINT
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ZERO_POINT
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '{'
  scopesBegin:
    - meta.objectliteral
  scopes:
    - punctuation.definition.block
- source: row
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: '0'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: column
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: '0'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.object.member
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.objectliteral
- source: ','
  scopes:
    - punctuation.separator.comma
- source: QUERY_WORD_REGEX
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: /
  scopesBegin:
    - string.regexp
  scopes:
    - punctuation.definition.string.begin
- source: '['
  scopesBegin:
    - constant.other.character-class.set.regexp
  scopes:
    - punctuation.definition.character-class.regexp
- source: \w
  scopesBegin:
    - constant.other.character-class.range.regexp
  scopes:
    - constant.character.escape.backslash.regexp
- source: '-.'
  scopesEnd:
    - constant.other.character-class.range.regexp
- source: ']'
  scopes:
    - punctuation.definition.character-class.regexp
  scopesEnd:
    - constant.other.character-class.set.regexp
- source: '*'
  scopes:
    - keyword.operator.quantifier.regexp
- source: /
  scopes:
    - punctuation.definition.string.end
- source: g
  scopes:
    - keyword.other
  scopesEnd:
    - string.regexp
- source: ','
  scopes:
    - punctuation.separator.comma
- source: PREDICATE_STEP_TYPE_CAPTURE
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: PREDICATE_STEP_TYPE_STRING
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: LANGUAGE_FUNCTION_REGEX
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: /
  scopesBegin:
    - string.regexp
  scopes:
    - punctuation.definition.string.begin
- source: ^
  scopes:
    - keyword.control.anchor.regexp
- source: _
- source: '?'
  scopes:
    - keyword.operator.quantifier.regexp
- source: tree_sitter_
- source: \w
  scopes:
    - constant.other.character-class.regexp
- source: +
  scopes:
    - keyword.operator.quantifier.regexp
- source: /
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.regexp
- source: ','
  scopes:
    - punctuation.separator.comma
- source: VERSION
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: MIN_COMPATIBLE_VERSION
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: TRANSFER_BUFFER
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: currentParseCallback
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: currentLogCallback
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
  scopesEnd:
    - meta.var.expr
- source: //
  scopesBegin:
    - comment.line.double-slash
    - punctuation.definition.comment
- source: //
- source: //
  scopesEnd:
    - punctuation.definition.comment
- source: ' all the tree-sitter classes '
- source: //
  scopesBegin:
    - punctuation.definition.comment
- source: //
  scopesEnd:
    - comment.line.double-slash
    - punctuation.definition.comment
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: firstTime
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: 'true'
  scopes:
    - constant.language.boolean.true
  scopesEnd:
    - meta.var.expr
- source: export
  scopesBegin:
    - meta.class
  scopes:
    - keyword.control.export
- source: class
  scopes:
    - storage.type.class
- source: Parser
  scopes:
    - entity.name.type.class
- source: '{'
  scopes:
    - punctuation.definition.block
- source: constructor
  scopesBegin:
    - meta.method.declaration
  scopes:
    - storage.type
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: this
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: initialize
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.method.declaration
    - meta.block
- source: static
  scopes:
    - storage.modifier
- source: init
  scopesBegin:
    - meta.method.declaration
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: firstTime
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: firstTime
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: 'false'
  scopes:
    - constant.language.boolean.false
- source: return
  scopes:
    - keyword.control.flow.return
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: (
  scopes:
    - meta.brace.round
- source: TRANSFER_BUFFER
  scopes:
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_init
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: VERSION
  scopes:
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: getValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: TRANSFER_BUFFER
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: MIN_COMPATIBLE_VERSION
  scopes:
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: getValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: TRANSFER_BUFFER
  scopes:
    - variable.other.constant
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: SIZE_OF_INT
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: initialize
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_parser_new_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: getValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: TRANSFER_BUFFER
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: getValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: TRANSFER_BUFFER
  scopes:
    - variable.other.constant
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: SIZE_OF_INT
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: delete
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_parser_delete
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _free
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: setLanguage
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: _
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
  scopesEnd:
    - meta.var.expr
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: constructor
  scopes:
    - support.variable.property
- source: '!=='
  scopes:
    - keyword.operator.comparison
- source: Language
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: throw
  scopes:
    - keyword.control.trycatch
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Error
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Argument must be a Language
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: _
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: t
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: s
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_language_version
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: s
  scopes:
    - variable.other.readwrite
- source: <
  scopes:
    - keyword.operator.relational
- source: MIN_COMPATIBLE_VERSION
  scopes:
    - variable.other.constant
- source: '||'
  scopes:
    - keyword.operator.logical
- source: VERSION
  scopes:
    - variable.other.constant
- source: <
  scopes:
    - keyword.operator.relational
- source: s
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: throw
  scopes:
    - keyword.control.trycatch
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Error
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: '`'
  scopesBegin:
    - string.template
  scopes:
    - punctuation.definition.string.template.begin
- source: 'Incompatible language version '
- source: '${'
  scopesBegin:
    - meta.template.expression
  scopes:
    - punctuation.definition.template-expression.begin
- source: s
  scopes:
    - meta.embedded.line
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.template-expression.end
  scopesEnd:
    - meta.template.expression
- source: '. Compatibility range '
- source: '${'
  scopesBegin:
    - meta.template.expression
  scopes:
    - punctuation.definition.template-expression.begin
- source: MIN_COMPATIBLE_VERSION
  scopes:
    - meta.embedded.line
    - variable.other.constant
- source: '}'
  scopes:
    - punctuation.definition.template-expression.end
  scopesEnd:
    - meta.template.expression
- source: ' through '
- source: '${'
  scopesBegin:
    - meta.template.expression
  scopes:
    - punctuation.definition.template-expression.begin
- source: VERSION
  scopes:
    - meta.embedded.line
    - variable.other.constant
- source: '}'
  scopes:
    - punctuation.definition.template-expression.end
  scopesEnd:
    - meta.template.expression
- source: .
- source: '`'
  scopes:
    - punctuation.definition.string.template.end
  scopesEnd:
    - string.template
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: _
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: 'null'
  scopes:
    - constant.language.null
- source: )
  scopes:
    - meta.brace.round
- source: return
  scopes:
    - keyword.control.flow.return
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: language
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_parser_set_language
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: this
  scopes:
    - variable.language.this
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: getLanguage
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: language
  scopes:
    - variable.other.property
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.method.declaration
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' parse(input: string | Parser.Input, previousTree?: Parser.Tree, options?: Parser.Options): Parser.Tree'
  scopesEnd:
    - comment.line.double-slash
- source: parse
  scopesBegin:
    - meta.method.declaration
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: inputString
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: previousTree
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: options
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: typeof
  scopes:
    - keyword.operator.expression.typeof
- source: inputString
  scopes:
    - variable.other.readwrite
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: string
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: currentParseCallback
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: u
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: m
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: inputString
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: slice
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: u
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.conditional
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: typeof
  scopes:
    - keyword.operator.expression.typeof
- source: inputString
  scopes:
    - variable.other.readwrite
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: function
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: throw
  scopes:
    - keyword.control.trycatch
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Error
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Argument must be a string or a function
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: currentParseCallback
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: inputString
  scopes:
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: logCallback
  scopes:
    - variable.other.property
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: (
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: currentLogCallback
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: logCallback
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_parser_enable_logger_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: (
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: currentLogCallback
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: 'null'
  scopes:
    - constant.language.null
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_parser_enable_logger_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: r
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: a
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.var.expr
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: options
  scopes:
    - variable.other.object
- source: '?.'
  scopes:
    - punctuation.accessor.optional
- source: includedRanges
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: (
  scopes:
    - meta.brace.round
- source: r
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: options
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: includedRanges
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: a
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _calloc
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: r
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: SIZE_OF_RANGE
  scopes:
    - variable.other.constant
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: u
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: a
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.var.expr
- source: for
  scopes:
    - keyword.control.loop
- source: (
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: m
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.var.expr
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: m
  scopes:
    - variable.other.readwrite
- source: <
  scopes:
    - keyword.operator.relational
- source: r
  scopes:
    - variable.other.readwrite
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: m
  scopes:
    - variable.other.readwrite
- source: ++
  scopes:
    - keyword.operator.increment
- source: )
  scopes:
    - meta.brace.round
- source: marshalRange
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: u
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: options
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: includedRanges
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: m
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: u
  scopes:
    - variable.other.readwrite
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: SIZE_OF_RANGE
  scopes:
    - variable.other.constant
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: o
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_parser_parse_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: this
  scopes:
    - variable.language.this
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: previousTree
  scopes:
    - variable.other.readwrite
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: previousTree
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: a
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: r
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: o
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: throw
  scopes:
    - keyword.control.trycatch
- source: (
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: currentParseCallback
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: 'null'
  scopes:
    - constant.language.null
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: currentLogCallback
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: 'null'
  scopes:
    - constant.language.null
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Error
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Parsing failed
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: )
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: 'n'
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Tree
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: INTERNAL
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: o
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: language
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.comma
- source: currentParseCallback
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
    - new.expr
- source: 'n'
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: parse
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: newString
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: newOptions
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: this
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: parse
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: newString
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: 'n'
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: newOptions
  scopes:
    - variable.other.readwrite
- source: '||'
  scopes:
    - keyword.operator.logical
- source: options
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' enable modification'
  scopesEnd:
    - comment.line.double-slash
- source: Object
  scopesBegin:
    - meta.function-call
  scopes:
    - support.class.builtin
- source: .
  scopes:
    - punctuation.accessor
- source: defineProperty
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: 'n'
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: string
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '{'
  scopesBegin:
    - meta.objectliteral
  scopes:
    - punctuation.definition.block
- source: get
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
  scopes:
    - entity.name.function
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: inputString
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: set
  scopesBegin:
    - meta.method.declaration
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: v
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: inputString
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: v
  scopes:
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.method.declaration
    - meta.block
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.objectliteral
- source: )
  scopes:
    - meta.brace.round
- source: return
  scopes:
    - keyword.control.flow.return
- source: (
  scopes:
    - meta.brace.round
- source: currentParseCallback
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: 'null'
  scopes:
    - constant.language.null
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: currentLogCallback
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: 'null'
  scopes:
    - constant.language.null
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: 'n'
  scopes:
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: reset
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_parser_reset
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: getIncludedRanges
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_parser_included_ranges_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: t
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: getValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: TRANSFER_BUFFER
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: getValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: TRANSFER_BUFFER
  scopes:
    - variable.other.constant
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: SIZE_OF_INT
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: s
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Array
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
    - new.expr
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: '>'
  scopes:
    - keyword.operator.relational
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: r
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: _
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.var.expr
- source: for
  scopes:
    - keyword.control.loop
- source: (
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: a
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.var.expr
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: a
  scopes:
    - variable.other.readwrite
- source: <
  scopes:
    - keyword.operator.relational
- source: t
  scopes:
    - variable.other.readwrite
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: a
  scopes:
    - variable.other.readwrite
- source: ++
  scopes:
    - keyword.operator.increment
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: s
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: a
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: unmarshalRange
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: r
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: r
  scopes:
    - variable.other.readwrite
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: SIZE_OF_RANGE
  scopes:
    - variable.other.constant
- source: )
  scopes:
    - meta.brace.round
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _free
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: s
  scopes:
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: getTimeoutMicros
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_parser_timeout_micros
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: setTimeoutMicros
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_parser_set_timeout_micros
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: setLogger
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: typeof
  scopes:
    - keyword.operator.expression.typeof
- source: t
  scopes:
    - variable.other.readwrite
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: function
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: throw
  scopes:
    - keyword.control.trycatch
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Error
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Logger callback must be a function
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.conditional
- source: t
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: 'null'
  scopes:
    - constant.language.null
- source: return
  scopes:
    - keyword.control.flow.return
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: logCallback
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: this
  scopes:
    - variable.language.this
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: getLogger
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: logCallback
  scopes:
    - variable.other.property
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.method.declaration
    - meta.block
- source: '}'
  scopes:
    - punctuation.definition.block
- source: export
  scopes:
    - keyword.control.export
- source: class
  scopes:
    - storage.type.class
- source: Tree
  scopes:
    - entity.name.type.class
- source: '{'
  scopes:
    - punctuation.definition.block
- source: constructor
  scopesBegin:
    - meta.method.declaration
  scopes:
    - storage.type
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: _
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: s
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: r
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: assertInternal
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: language
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: s
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: textCallback
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: r
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: copy
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: t
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_copy
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: return
  scopes:
    - keyword.control.flow.return
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Tree
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: INTERNAL
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: language
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.comma
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: textCallback
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: delete
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_delete
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: edit
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: '{'
  scopesBegin:
    - meta.parameter.object-binding-pattern
  scopes:
    - punctuation.definition.binding-pattern.object
- source: startIndex
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.comma
- source: oldEndIndex
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.comma
- source: newEndIndex
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.comma
- source: startPosition
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.comma
- source: oldEndPosition
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.comma
- source: newEndPosition
  scopes:
    - variable.parameter
- source: '}'
  scopes:
    - punctuation.definition.binding-pattern.object
  scopesEnd:
    - meta.parameter.object-binding-pattern
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: marshalEdit
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.objectliteral
  scopes:
    - punctuation.definition.block
- source: startIndex
  scopes:
    - meta.object.member
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: oldEndIndex
  scopes:
    - meta.object.member
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: newEndIndex
  scopes:
    - meta.object.member
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: startPosition
  scopes:
    - meta.object.member
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: oldEndPosition
  scopes:
    - meta.object.member
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: newEndPosition
  scopes:
    - meta.object.member
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.objectliteral
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_edit_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: get
  scopes:
    - storage.type.property
- source: rootNode
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_root_node_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: unmarshalNode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: rootNodeWithOffset
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: _
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: s
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: TRANSFER_BUFFER
  scopes:
    - variable.other.constant
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: SIZE_OF_NODE
  scopes:
    - variable.other.constant
  scopesEnd:
    - meta.var.expr
- source: return
  scopes:
    - keyword.control.flow.return
- source: setValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: s
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: marshalPoint
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: s
  scopes:
    - variable.other.readwrite
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: SIZE_OF_INT
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_root_node_with_offset_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: unmarshalNode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: getLanguage
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: language
  scopes:
    - variable.other.property
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: walk
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: this
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: rootNode
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: walk
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: getChangedRanges
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: constructor
  scopes:
    - support.variable.property
- source: '!=='
  scopes:
    - keyword.operator.comparison
- source: Tree
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: throw
  scopes:
    - keyword.control.trycatch
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: TypeError
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Argument must be a Tree
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_get_changed_ranges_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: _
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: getValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: TRANSFER_BUFFER
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: s
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: getValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: TRANSFER_BUFFER
  scopes:
    - variable.other.constant
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: SIZE_OF_INT
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: r
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Array
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
    - new.expr
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: _
  scopes:
    - variable.other.readwrite
- source: '>'
  scopes:
    - keyword.operator.relational
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: a
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: s
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.var.expr
- source: for
  scopes:
    - keyword.control.loop
- source: (
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: o
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.var.expr
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: o
  scopes:
    - variable.other.readwrite
- source: <
  scopes:
    - keyword.operator.relational
- source: _
  scopes:
    - variable.other.readwrite
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: o
  scopes:
    - variable.other.readwrite
- source: ++
  scopes:
    - keyword.operator.increment
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: r
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: o
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: unmarshalRange
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: a
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: a
  scopes:
    - variable.other.readwrite
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: SIZE_OF_RANGE
  scopes:
    - variable.other.constant
- source: )
  scopes:
    - meta.brace.round
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _free
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: s
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: r
  scopes:
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: getIncludedRanges
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_included_ranges_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: t
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: getValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: TRANSFER_BUFFER
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: getValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: TRANSFER_BUFFER
  scopes:
    - variable.other.constant
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: SIZE_OF_INT
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: s
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Array
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
    - new.expr
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: '>'
  scopes:
    - keyword.operator.relational
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: r
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: _
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.var.expr
- source: for
  scopes:
    - keyword.control.loop
- source: (
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: a
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.var.expr
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: a
  scopes:
    - variable.other.readwrite
- source: <
  scopes:
    - keyword.operator.relational
- source: t
  scopes:
    - variable.other.readwrite
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: a
  scopes:
    - variable.other.readwrite
- source: ++
  scopes:
    - keyword.operator.increment
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: s
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: a
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: unmarshalRange
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: r
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: r
  scopes:
    - variable.other.readwrite
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: SIZE_OF_RANGE
  scopes:
    - variable.other.constant
- source: )
  scopes:
    - meta.brace.round
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _free
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: s
  scopes:
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.method.declaration
    - meta.block
- source: '}'
  scopes:
    - punctuation.definition.block
- source: export
  scopes:
    - keyword.control.export
- source: class
  scopes:
    - storage.type.class
- source: Node
  scopes:
    - entity.name.type.class
- source: '{'
  scopes:
    - punctuation.definition.block
- source: constructor
  scopesBegin:
    - meta.method.declaration
  scopes:
    - storage.type
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: _
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: assertInternal
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: get
  scopes:
    - storage.type.property
- source: typeId
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: marshalNode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_symbol_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: get
  scopes:
    - storage.type.property
- source: grammarId
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: marshalNode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_grammar_symbol_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: get
  scopes:
    - storage.type.property
- source: type
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: language
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: types
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: typeId
  scopes:
    - variable.other.property
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '||'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ERROR
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: get
  scopes:
    - storage.type.property
- source: grammarType
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: language
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: types
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: grammarId
  scopes:
    - variable.other.property
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '||'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ERROR
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: get
  scopes:
    - storage.type.property
- source: endPosition
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: marshalNode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_end_point_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: unmarshalPoint
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: TRANSFER_BUFFER
  scopes:
    - variable.other.constant
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: get
  scopes:
    - storage.type.property
- source: endIndex
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: marshalNode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_end_index_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: get
  scopes:
    - storage.type.property
- source: text
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: getText
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.comma
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: startIndex
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.comma
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: endIndex
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: get
  scopes:
    - storage.type.property
- source: parseState
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: marshalNode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_parse_state_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: get
  scopes:
    - storage.type.property
- source: nextParseState
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: marshalNode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_next_parse_state_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: get
  scopes:
    - storage.type.property
- source: isNamed
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: marshalNode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_is_named_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: '==='
  scopes:
    - keyword.operator.comparison
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: get
  scopes:
    - storage.type.property
- source: hasError
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: marshalNode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_has_error_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: '==='
  scopes:
    - keyword.operator.comparison
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: get
  scopes:
    - storage.type.property
- source: hasChanges
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: marshalNode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_has_changes_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: '==='
  scopes:
    - keyword.operator.comparison
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: get
  scopes:
    - storage.type.property
- source: isError
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: marshalNode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_is_error_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: '==='
  scopes:
    - keyword.operator.comparison
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: get
  scopes:
    - storage.type.property
- source: isMissing
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: marshalNode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_is_missing_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: '==='
  scopes:
    - keyword.operator.comparison
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: get
  scopes:
    - storage.type.property
- source: isExtra
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: marshalNode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_is_extra_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: '==='
  scopes:
    - keyword.operator.comparison
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: equals
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: id
  scopes:
    - variable.other.property
- source: '==='
  scopes:
    - keyword.operator.comparison
- source: t
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: id
  scopes:
    - variable.other.property
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: child
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: marshalNode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_child_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: unmarshalNode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: namedChild
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: marshalNode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_named_child_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: unmarshalNode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: childForFieldId
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: marshalNode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_child_by_field_id_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: unmarshalNode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: childForFieldName
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: _
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: this
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: language
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: fields
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: indexOf
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: return
  scopes:
    - keyword.control.flow.return
- source: _
  scopes:
    - variable.other.readwrite
- source: '!=='
  scopes:
    - keyword.operator.comparison
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: this
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: childForFieldId
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: 'null'
  scopes:
    - constant.language.null
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: fieldNameForChild
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: marshalNode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: _
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_field_name_for_child_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: return
  scopes:
    - keyword.control.flow.return
- source: _
  scopes:
    - variable.other.readwrite
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: AsciiToString
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: 'null'
  scopes:
    - constant.language.null
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: childrenForFieldName
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: _
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: this
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: language
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: fields
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: indexOf
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: return
  scopes:
    - keyword.control.flow.return
- source: _
  scopes:
    - variable.other.readwrite
- source: '!=='
  scopes:
    - keyword.operator.comparison
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: _
  scopes:
    - variable.other.readwrite
- source: '!=='
  scopes:
    - keyword.operator.comparison
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: this
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: childrenForFieldId
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: '['
  scopesBegin:
    - meta.array.literal
    - meta.brace.square
- source: ']'
  scopesEnd:
    - meta.array.literal
    - meta.brace.square
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: childrenForFieldId
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: marshalNode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_children_by_field_id_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: _
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: getValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: TRANSFER_BUFFER
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: s
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: getValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: TRANSFER_BUFFER
  scopes:
    - variable.other.constant
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: SIZE_OF_INT
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: r
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Array
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
    - new.expr
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: _
  scopes:
    - variable.other.readwrite
- source: '>'
  scopes:
    - keyword.operator.relational
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: a
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: s
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.var.expr
- source: for
  scopes:
    - keyword.control.loop
- source: (
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: o
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.var.expr
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: o
  scopes:
    - variable.other.readwrite
- source: <
  scopes:
    - keyword.operator.relational
- source: _
  scopes:
    - variable.other.readwrite
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: o
  scopes:
    - variable.other.readwrite
- source: ++
  scopes:
    - keyword.operator.increment
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: r
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: o
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: unmarshalNode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.comma
- source: a
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: a
  scopes:
    - variable.other.readwrite
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: SIZE_OF_NODE
  scopes:
    - variable.other.constant
- source: )
  scopes:
    - meta.brace.round
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _free
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: s
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: r
  scopes:
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: firstChildForIndex
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: marshalNode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: setValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: TRANSFER_BUFFER
  scopes:
    - variable.other.constant
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: SIZE_OF_NODE
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_first_child_for_byte_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: unmarshalNode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: firstNamedChildForIndex
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: marshalNode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: setValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: TRANSFER_BUFFER
  scopes:
    - variable.other.constant
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: SIZE_OF_NODE
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_first_named_child_for_byte_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: unmarshalNode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: get
  scopes:
    - storage.type.property
- source: childCount
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: marshalNode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_child_count_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: get
  scopes:
    - storage.type.property
- source: namedChildCount
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: marshalNode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_named_child_count_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: get
  scopes:
    - storage.type.property
- source: firstChild
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: this
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: child
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: get
  scopes:
    - storage.type.property
- source: firstNamedChild
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: this
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: namedChild
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: get
  scopes:
    - storage.type.property
- source: lastChild
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: this
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: child
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: childCount
  scopes:
    - variable.other.property
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: get
  scopes:
    - storage.type.property
- source: lastNamedChild
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: this
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: namedChild
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: namedChildCount
  scopes:
    - variable.other.property
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: get
  scopes:
    - storage.type.property
- source: children
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: _children
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: marshalNode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_children_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: t
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: getValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: TRANSFER_BUFFER
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: getValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: TRANSFER_BUFFER
  scopes:
    - variable.other.constant
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: SIZE_OF_INT
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopesBegin:
    - meta.brace.round
- source: (
- source: (
  scopesEnd:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: _children
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Array
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: '>'
  scopes:
    - keyword.operator.relational
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: s
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: _
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.var.expr
- source: for
  scopes:
    - keyword.control.loop
- source: (
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: r
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.var.expr
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: r
  scopes:
    - variable.other.readwrite
- source: <
  scopes:
    - keyword.operator.relational
- source: t
  scopes:
    - variable.other.readwrite
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: r
  scopes:
    - variable.other.readwrite
- source: ++
  scopes:
    - keyword.operator.increment
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: _children
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: r
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: unmarshalNode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.comma
- source: s
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: s
  scopes:
    - variable.other.readwrite
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: SIZE_OF_NODE
  scopes:
    - variable.other.constant
- source: )
  scopes:
    - meta.brace.round
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _free
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: _children
  scopes:
    - variable.other.property
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: get
  scopes:
    - storage.type.property
- source: namedChildren
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: _namedChildren
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: marshalNode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_named_children_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: t
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: getValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: TRANSFER_BUFFER
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: getValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: TRANSFER_BUFFER
  scopes:
    - variable.other.constant
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: SIZE_OF_INT
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopesBegin:
    - meta.brace.round
- source: (
- source: (
  scopesEnd:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: _namedChildren
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Array
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: '>'
  scopes:
    - keyword.operator.relational
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: s
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: _
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.var.expr
- source: for
  scopes:
    - keyword.control.loop
- source: (
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: r
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.var.expr
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: r
  scopes:
    - variable.other.readwrite
- source: <
  scopes:
    - keyword.operator.relational
- source: t
  scopes:
    - variable.other.readwrite
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: r
  scopes:
    - variable.other.readwrite
- source: ++
  scopes:
    - keyword.operator.increment
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: _namedChildren
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: r
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: unmarshalNode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.comma
- source: s
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: s
  scopes:
    - variable.other.readwrite
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: SIZE_OF_NODE
  scopes:
    - variable.other.constant
- source: )
  scopes:
    - meta.brace.round
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _free
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: _namedChildren
  scopes:
    - variable.other.property
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: descendantsOfType
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: _
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: s
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: Array
  scopesBegin:
    - meta.function-call
  scopes:
    - support.class.builtin
- source: .
  scopes:
    - punctuation.accessor
- source: isArray
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '||'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: t
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: '||'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: _
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ZERO_POINT
  scopes:
    - variable.other.constant
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: s
  scopes:
    - variable.other.readwrite
- source: '||'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: s
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ZERO_POINT
  scopes:
    - variable.other.constant
- source: )
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: r
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '['
  scopesBegin:
    - meta.array.literal
    - meta.brace.square
- source: ']'
  scopesEnd:
    - meta.array.literal
    - meta.brace.square
- source: ','
  scopes:
    - punctuation.separator.comma
- source: a
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: language
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: types
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.var.expr
- source: for
  scopes:
    - keyword.control.loop
- source: (
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: w
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: c
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: a
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
  scopesEnd:
    - meta.var.expr
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: w
  scopes:
    - variable.other.readwrite
- source: <
  scopes:
    - keyword.operator.relational
- source: c
  scopes:
    - variable.other.readwrite
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: w
  scopes:
    - variable.other.readwrite
- source: ++
  scopes:
    - keyword.operator.increment
- source: )
  scopes:
    - meta.brace.round
- source: t
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: includes
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: a
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: w
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: r
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: push
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: w
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: o
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _malloc
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: SIZE_OF_INT
  scopes:
    - variable.other.constant
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: r
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: for
  scopes:
    - keyword.control.loop
- source: (
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: w
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: c
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: r
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
  scopesEnd:
    - meta.var.expr
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: w
  scopes:
    - variable.other.readwrite
- source: <
  scopes:
    - keyword.operator.relational
- source: c
  scopes:
    - variable.other.readwrite
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: w
  scopes:
    - variable.other.readwrite
- source: ++
  scopes:
    - keyword.operator.increment
- source: )
  scopes:
    - meta.brace.round
- source: setValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: o
  scopes:
    - variable.other.readwrite
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: w
  scopes:
    - variable.other.readwrite
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: SIZE_OF_INT
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: r
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: w
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: marshalNode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_descendants_of_type_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: o
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: r
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: row
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: column
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.comma
- source: s
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: row
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.comma
- source: s
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: column
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: 'n'
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: getValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: TRANSFER_BUFFER
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: u
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: getValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: TRANSFER_BUFFER
  scopes:
    - variable.other.constant
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: SIZE_OF_INT
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: m
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Array
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: 'n'
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
    - new.expr
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: 'n'
  scopes:
    - variable.other.readwrite
- source: '>'
  scopes:
    - keyword.operator.relational
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: w
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: u
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.var.expr
- source: for
  scopes:
    - keyword.control.loop
- source: (
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: c
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.var.expr
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: c
  scopes:
    - variable.other.readwrite
- source: <
  scopes:
    - keyword.operator.relational
- source: 'n'
  scopes:
    - variable.other.readwrite
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: c
  scopes:
    - variable.other.readwrite
- source: ++
  scopes:
    - keyword.operator.increment
- source: )
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: m
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: c
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: unmarshalNode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.comma
- source: w
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: w
  scopes:
    - variable.other.readwrite
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: SIZE_OF_NODE
  scopes:
    - variable.other.constant
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _free
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: u
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _free
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: o
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: m
  scopes:
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: get
  scopes:
    - storage.type.property
- source: nextSibling
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: marshalNode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_next_sibling_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: unmarshalNode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: get
  scopes:
    - storage.type.property
- source: previousSibling
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: marshalNode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_prev_sibling_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: unmarshalNode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: get
  scopes:
    - storage.type.property
- source: nextNamedSibling
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: marshalNode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_next_named_sibling_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: unmarshalNode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: get
  scopes:
    - storage.type.property
- source: previousNamedSibling
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: marshalNode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_prev_named_sibling_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: unmarshalNode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: get
  scopes:
    - storage.type.property
- source: descendantCount
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: marshalNode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_descendant_count_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: get
  scopes:
    - storage.type.property
- source: parent
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: marshalNode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_parent_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: unmarshalNode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: get
  scopes:
    - storage.type.property
- source: depth
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: _depth
  scopes:
    - variable.other.property
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: 'null'
  scopes:
    - constant.language.null
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: parent
  scopes:
    - variable.other.property
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: 'null'
  scopes:
    - constant.language.null
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: _depth
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.conditional
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: _depth
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: parent
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: depth
  scopes:
    - variable.other.property
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: _depth
  scopes:
    - variable.other.property
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: descendantForIndex
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: _
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: typeof
  scopes:
    - keyword.operator.expression.typeof
- source: t
  scopes:
    - variable.other.readwrite
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '||'
  scopes:
    - keyword.operator.logical
- source: typeof
  scopes:
    - keyword.operator.expression.typeof
- source: _
  scopes:
    - variable.other.readwrite
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: throw
  scopes:
    - keyword.control.trycatch
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Error
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Arguments must be numbers
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: marshalNode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: s
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: TRANSFER_BUFFER
  scopes:
    - variable.other.constant
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: SIZE_OF_NODE
  scopes:
    - variable.other.constant
  scopesEnd:
    - meta.var.expr
- source: return
  scopes:
    - keyword.control.flow.return
- source: setValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: s
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: setValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: s
  scopes:
    - variable.other.readwrite
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: SIZE_OF_INT
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_descendant_for_index_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: unmarshalNode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: namedDescendantForIndex
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: _
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: typeof
  scopes:
    - keyword.operator.expression.typeof
- source: t
  scopes:
    - variable.other.readwrite
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '||'
  scopes:
    - keyword.operator.logical
- source: typeof
  scopes:
    - keyword.operator.expression.typeof
- source: _
  scopes:
    - variable.other.readwrite
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: throw
  scopes:
    - keyword.control.trycatch
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Error
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Arguments must be numbers
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: marshalNode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: s
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: TRANSFER_BUFFER
  scopes:
    - variable.other.constant
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: SIZE_OF_NODE
  scopes:
    - variable.other.constant
  scopesEnd:
    - meta.var.expr
- source: return
  scopes:
    - keyword.control.flow.return
- source: setValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: s
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: setValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: s
  scopes:
    - variable.other.readwrite
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: SIZE_OF_INT
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_named_descendant_for_index_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: unmarshalNode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: descendantForPosition
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: _
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: isPoint
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '||'
  scopesBegin:
    - keyword.operator.logical
- source: '!'
  scopesEnd:
    - keyword.operator.logical
- source: isPoint
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: throw
  scopes:
    - keyword.control.trycatch
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Error
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'Arguments must be {row, column} objects'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: marshalNode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: s
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: TRANSFER_BUFFER
  scopes:
    - variable.other.constant
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: SIZE_OF_NODE
  scopes:
    - variable.other.constant
  scopesEnd:
    - meta.var.expr
- source: return
  scopes:
    - keyword.control.flow.return
- source: marshalPoint
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: s
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: marshalPoint
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: s
  scopes:
    - variable.other.readwrite
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: SIZE_OF_POINT
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_descendant_for_position_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: unmarshalNode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: namedDescendantForPosition
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: _
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: isPoint
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '||'
  scopesBegin:
    - keyword.operator.logical
- source: '!'
  scopesEnd:
    - keyword.operator.logical
- source: isPoint
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: throw
  scopes:
    - keyword.control.trycatch
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Error
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'Arguments must be {row, column} objects'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: marshalNode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: s
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: TRANSFER_BUFFER
  scopes:
    - variable.other.constant
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: SIZE_OF_NODE
  scopes:
    - variable.other.constant
  scopesEnd:
    - meta.var.expr
- source: return
  scopes:
    - keyword.control.flow.return
- source: marshalPoint
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: s
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: marshalPoint
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: s
  scopes:
    - variable.other.readwrite
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: SIZE_OF_POINT
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_named_descendant_for_position_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: unmarshalNode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: walk
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: marshalNode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_new_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: TreeCursor
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: INTERNAL
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: toString
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: marshalNode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: t
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_node_to_string_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: AsciiToString
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: return
  scopes:
    - keyword.control.flow.return
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _free
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: get
  scopes:
    - storage.type.property
- source: hasChildren
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: children
  scopes:
    - variable.other.object.property
- source: '?.'
  scopes:
    - punctuation.accessor.optional
- source: length
  scopes:
    - support.variable.property
- source: '||'
  scopes:
    - keyword.operator.logical
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: '>'
  scopes:
    - keyword.operator.relational
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: '*'
  scopes:
    - keyword.generator.asterisk
- source: traverse
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: arg
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '{'
  scopesBegin:
    - meta.objectliteral
  scopes:
    - punctuation.definition.block
- source: _parentNodes
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: '['
  scopesBegin:
    - meta.array.literal
    - meta.brace.square
- source: ']'
  scopesEnd:
    - meta.object.member
    - meta.array.literal
    - meta.brace.square
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.objectliteral
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: const
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: '{'
  scopesBegin:
    - meta.object-binding-pattern-variable
  scopes:
    - punctuation.definition.binding-pattern.object
- source: _parentNodes
  scopes:
    - meta.definition.variable
    - variable.other.constant
- source: '}'
  scopes:
    - punctuation.definition.binding-pattern.object
  scopesEnd:
    - meta.object-binding-pattern-variable
- source: '='
  scopes:
    - keyword.operator.assignment
- source: arg
  scopes:
    - variable.other.readwrite
- source: const
  scopes:
    - storage.type
- source: parentNodes
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: this
  scopes:
    - variable.language.this
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ...
  scopes:
    - keyword.operator.spread
- source: _parentNodes
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.var.expr
    - meta.array.literal
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: children
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: yield
  scopes:
    - keyword.control.flow.yield
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: _parentNodes
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: this
  scopes:
    - variable.language.this
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '-'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.conditional
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: yield
  scopes:
    - keyword.control.flow.yield
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: _parentNodes
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: this
  scopes:
    - variable.language.this
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '->'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: for
  scopes:
    - keyword.control.loop
- source: (
  scopes:
    - meta.brace.round
- source: const
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: each
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
  scopesEnd:
    - meta.var.expr
- source: of
  scopes:
    - keyword.operator.expression.of
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: children
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: each
  scopes:
    - variable.other.readwrite
- source: instanceof
  scopes:
    - keyword.operator.expression.instanceof
- source: Node
  scopes:
    - entity.name.type
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: for
  scopes:
    - keyword.control.loop
- source: (
  scopes:
    - meta.brace.round
- source: const
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: eachInner
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
  scopesEnd:
    - meta.var.expr
- source: of
  scopes:
    - keyword.operator.expression.of
- source: each
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: traverse
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.objectliteral
  scopes:
    - punctuation.definition.block
- source: _parentNodes
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: parentNodes
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.object.member
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.objectliteral
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: yield
  scopes:
    - keyword.control.flow.yield
- source: eachInner
  scopes:
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.conditional
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: yield
  scopes:
    - keyword.control.flow.yield
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: _parentNodes
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: each
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '-'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: yield
  scopes:
    - keyword.control.flow.yield
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: _parentNodes
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: this
  scopes:
    - variable.language.this
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: <-
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: toJSON
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: const
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: optionalData
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '{'
  scopesBegin:
    - meta.objectliteral
    - punctuation.definition.block
- source: '}'
  scopesEnd:
    - meta.var.expr
    - meta.objectliteral
    - punctuation.definition.block
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: typeof
  scopes:
    - keyword.operator.expression.typeof
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: rootLeadingWhitespace
  scopes:
    - variable.other.property
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: string
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: optionalData
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: rootLeadingWhitespace
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: rootLeadingWhitespace
  scopes:
    - variable.other.property
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: children
  scopes:
    - variable.other.property
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: children
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: '{'
  scopesBegin:
    - meta.objectliteral
  scopes:
    - punctuation.definition.block
- source: type
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: type
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: typeId
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: typeId
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: startPosition
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: startPosition
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: startIndex
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: startIndex
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: endPosition
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: endPosition
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: startIndex
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: startIndex
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: endIndex
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: endIndex
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: indent
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: indent
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: textOverride
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: textOverride
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ...
  scopesBegin:
    - meta.object.member
  scopes:
    - keyword.operator.spread
- source: optionalData
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: children
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: this
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: children
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: map
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: each
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: each
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: toJSON
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
- source: )
  scopesEnd:
    - meta.object.member
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.objectliteral
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.conditional
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: '{'
  scopesBegin:
    - meta.objectliteral
  scopes:
    - punctuation.definition.block
- source: type
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: type
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: typeId
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: typeId
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: startPosition
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: startPosition
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: startIndex
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: startIndex
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: endPosition
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: endPosition
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: startIndex
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: startIndex
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: endIndex
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: endIndex
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: indent
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: indent
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: textOverride
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: textOverride
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ...
  scopesBegin:
    - meta.object.member
  scopes:
    - keyword.operator.spread
- source: optionalData
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: text
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: text
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: children
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: '['
  scopesBegin:
    - meta.array.literal
    - meta.brace.square
- source: ']'
  scopesEnd:
    - meta.object.member
    - meta.array.literal
    - meta.brace.square
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.objectliteral
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: Symbol
  scopesBegin:
    - meta.function-call
  scopes:
    - support.class.builtin
- source: .
  scopes:
    - punctuation.accessor
- source: for
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Deno.customInspect
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: inspect
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: options
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: const
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: optional
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '{'
  scopesBegin:
    - meta.objectliteral
    - punctuation.definition.block
- source: '}'
  scopesEnd:
    - meta.var.expr
    - meta.objectliteral
    - punctuation.definition.block
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: typeof
  scopes:
    - keyword.operator.expression.typeof
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: rootLeadingWhitespace
  scopes:
    - variable.other.property
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: string
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: optional
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: rootLeadingWhitespace
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: rootLeadingWhitespace
  scopes:
    - variable.other.property
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: inspect
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.objectliteral
  scopes:
    - punctuation.definition.block
- source: type
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: type
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: typeId
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: typeId
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: startPosition
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: startPosition
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: startIndex
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: startIndex
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: endPosition
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: endPosition
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: startIndex
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: startIndex
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: endIndex
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: endIndex
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: indent
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: indent
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ...
  scopesBegin:
    - meta.object.member
  scopes:
    - keyword.operator.spread
- source: optional
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: hasChildren
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: hasChildren
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: children
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: ...
  scopes:
    - keyword.operator.spread
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: children
  scopes:
    - variable.other.property
- source: '||'
  scopes:
    - keyword.operator.logical
- source: '['
  scopesBegin:
    - meta.array.literal
    - meta.brace.square
- source: ']'
  scopesEnd:
    - meta.array.literal
    - meta.brace.square
- source: )
  scopes:
    - meta.brace.round
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.object.member
    - meta.array.literal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.objectliteral
- source: ','
  scopes:
    - punctuation.separator.comma
- source: options
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: '*'
  scopes:
    - keyword.generator.asterisk
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: Symbol
  scopes:
    - support.class.builtin
- source: .
  scopes:
    - punctuation.accessor
- source: iterator
  scopes:
    - variable.other.property
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: yield
  scopes:
    - keyword.control.flow.yield
- source: '*'
  scopes:
    - keyword.generator.asterisk
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: children
  scopes:
    - variable.other.property
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: get
  scopes:
    - storage.type.property
- source: length
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: children
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.method.declaration
    - meta.block
- source: /**
  scopesBegin:
    - comment.block.documentation
  scopes:
    - punctuation.definition.comment
- source: '         * Query'
- source: '         *'
- source: '         * '
- source: '@'
  scopesBegin:
    - meta.example.jsdoc
    - storage.type.class.jsdoc
  scopes:
    - punctuation.definition.block.tag.jsdoc
- source: example
  scopesEnd:
    - storage.type.class.jsdoc
- source: '         * '
- source: '```js'
  scopes:
    - source.embedded
- source: '         * '
- source: >-
    import { Parser, parserFromWasm } from
    "https://deno.land/x/deno_tree_sitter/main.js"
  scopes:
    - source.embedded
- source: '         * '
- source: >-
    import javascript from
    "https://github.com/jeff-hykin/common_tree_sitter_languages/raw/4d8a6d34d7f6263ff570f333cdcf5ded6be89e3d/main/javascript.js"
  scopes:
    - source.embedded
- source: '         * '
- source: const parser = await parserFromWasm(javascript) // path or Uint8Array
  scopes:
    - source.embedded
- source: '         * '
- source: var tree = parser.parse('let a = 1;let b = 1;let c = 1;')
  scopes:
    - source.embedded
- source: '         *'
- source: '         * '
- source: 'tree.rootNode.query(`(identifier) @blahBlahBlah`, {matchLimit: 2})'
  scopes:
    - source.embedded
- source: '         * '
- source: '// returns:'
  scopes:
    - source.embedded
- source: '         * '
- source: '['
  scopes:
    - source.embedded
- source: '         *   '
- source: '{'
  scopes:
    - source.embedded
- source: '         *     '
- source: 'pattern: 0,'
  scopes:
    - source.embedded
- source: '         *     '
- source: 'captures: ['
  scopes:
    - source.embedded
- source: '         *       '
- source: '{'
  scopes:
    - source.embedded
- source: '         *         '
- source: 'name: "blahBlahBlah",'
  scopes:
    - source.embedded
- source: '         *         '
- source: 'node: {'
  scopes:
    - source.embedded
- source: '         *           '
- source: 'type: "identifier",'
  scopes:
    - source.embedded
- source: '         *           '
- source: 'typeId: 1,'
  scopes:
    - source.embedded
- source: '         *           '
- source: 'startPosition: { row: 0, column: 4 },'
  scopes:
    - source.embedded
- source: '         *           '
- source: 'startIndex: 4,'
  scopes:
    - source.embedded
- source: '         *           '
- source: 'endPosition: { row: 0, column: 5 },'
  scopes:
    - source.embedded
- source: '         *           '
- source: 'endIndex: 5,'
  scopes:
    - source.embedded
- source: '         *           '
- source: 'indent: undefined,'
  scopes:
    - source.embedded
- source: '         *           '
- source: 'hasChildren: false,'
  scopes:
    - source.embedded
- source: '         *           '
- source: 'children: []'
  scopes:
    - source.embedded
- source: '         *         '
- source: '}'
  scopes:
    - source.embedded
- source: '         *       '
- source: '}'
  scopes:
    - source.embedded
- source: '         *     '
- source: ']'
  scopes:
    - source.embedded
- source: '         *   '
- source: '},'
  scopes:
    - source.embedded
- source: '         *   '
- source: '{'
  scopes:
    - source.embedded
- source: '         *     '
- source: 'pattern: 0,'
  scopes:
    - source.embedded
- source: '         *     '
- source: 'captures: ['
  scopes:
    - source.embedded
- source: '         *       '
- source: '{'
  scopes:
    - source.embedded
- source: '         *         '
- source: 'name: "blahBlahBlah",'
  scopes:
    - source.embedded
- source: '         *         '
- source: 'node: {'
  scopes:
    - source.embedded
- source: '         *           '
- source: 'type: "identifier",'
  scopes:
    - source.embedded
- source: '         *           '
- source: 'typeId: 1,'
  scopes:
    - source.embedded
- source: '         *           '
- source: 'startPosition: { row: 0, column: 14 },'
  scopes:
    - source.embedded
- source: '         *           '
- source: 'startIndex: 14,'
  scopes:
    - source.embedded
- source: '         *           '
- source: 'endPosition: { row: 0, column: 15 },'
  scopes:
    - source.embedded
- source: '         *           '
- source: 'endIndex: 15,'
  scopes:
    - source.embedded
- source: '         *           '
- source: 'indent: undefined,'
  scopes:
    - source.embedded
- source: '         *           '
- source: 'hasChildren: false,'
  scopes:
    - source.embedded
- source: '         *           '
- source: 'children: []'
  scopes:
    - source.embedded
- source: '         *         '
- source: '}'
  scopes:
    - source.embedded
- source: '         *       '
- source: '}'
  scopes:
    - source.embedded
- source: '         *     '
- source: ']'
  scopes:
    - source.embedded
- source: '         *   '
- source: '},'
  scopes:
    - source.embedded
- source: '         *   '
- source: '{'
  scopes:
    - source.embedded
- source: '         *     '
- source: 'pattern: 0,'
  scopes:
    - source.embedded
- source: '         *     '
- source: 'captures: ['
  scopes:
    - source.embedded
- source: '         *       '
- source: '{'
  scopes:
    - source.embedded
- source: '         *         '
- source: 'name: "blahBlahBlah",'
  scopes:
    - source.embedded
- source: '         *         '
- source: 'node: {'
  scopes:
    - source.embedded
- source: '         *           '
- source: 'type: "identifier",'
  scopes:
    - source.embedded
- source: '         *           '
- source: 'typeId: 1,'
  scopes:
    - source.embedded
- source: '         *           '
- source: 'startPosition: { row: 0, column: 24 },'
  scopes:
    - source.embedded
- source: '         *           '
- source: 'startIndex: 24,'
  scopes:
    - source.embedded
- source: '         *           '
- source: 'endPosition: { row: 0, column: 25 },'
  scopes:
    - source.embedded
- source: '         *           '
- source: 'endIndex: 25,'
  scopes:
    - source.embedded
- source: '         *           '
- source: 'indent: undefined,'
  scopes:
    - source.embedded
- source: '         *           '
- source: 'hasChildren: false,'
  scopes:
    - source.embedded
- source: '         *           '
- source: 'children: []'
  scopes:
    - source.embedded
- source: '         *         '
- source: '}'
  scopes:
    - source.embedded
- source: '         *       '
- source: '}'
  scopes:
    - source.embedded
- source: '         *     '
- source: ']'
  scopes:
    - source.embedded
- source: '         *   '
- source: '}'
  scopes:
    - source.embedded
- source: '         * '
- source: ']'
  scopes:
    - source.embedded
- source: '         * '
- source: '```'
  scopes:
    - source.embedded
- source: '         *'
- source: '         * '
  scopesEnd:
    - meta.example.jsdoc
- source: '@'
  scopesBegin:
    - storage.type.class.jsdoc
  scopes:
    - punctuation.definition.block.tag.jsdoc
- source: param
  scopesEnd:
    - storage.type.class.jsdoc
- source: '{'
  scopesBegin:
    - entity.name.type.instance.jsdoc
  scopes:
    - punctuation.definition.bracket.curly.begin.jsdoc
- source: String
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end.jsdoc
  scopesEnd:
    - entity.name.type.instance.jsdoc
- source: queryString
  scopes:
    - variable.other.jsdoc
- source: ' - see https://tree-sitter.github.io/tree-sitter/using-parsers#query-syntax'
- source: '         * '
- source: '@'
  scopesBegin:
    - storage.type.class.jsdoc
  scopes:
    - punctuation.definition.block.tag.jsdoc
- source: param
  scopesEnd:
    - storage.type.class.jsdoc
- source: options.matchLimit
  scopes:
    - variable.other.jsdoc
- source: ' - max number of results'
- source: '         * '
- source: '@'
  scopesBegin:
    - storage.type.class.jsdoc
  scopes:
    - punctuation.definition.block.tag.jsdoc
- source: param
  scopesEnd:
    - storage.type.class.jsdoc
- source: options.startPosition
  scopes:
    - variable.other.jsdoc
- source: ' - {row: Number, column: number}'
- source: '         * '
- source: '@'
  scopesBegin:
    - storage.type.class.jsdoc
  scopes:
    - punctuation.definition.block.tag.jsdoc
- source: param
  scopesEnd:
    - storage.type.class.jsdoc
- source: options.endPosition
  scopes:
    - variable.other.jsdoc
- source: ' - {row: Number, column: number}'
- source: '         * '
- source: '@'
  scopesBegin:
    - storage.type.class.jsdoc
  scopes:
    - punctuation.definition.block.tag.jsdoc
- source: param
  scopesEnd:
    - storage.type.class.jsdoc
- source: options.maxResultDepth
  scopes:
    - variable.other.jsdoc
- source: ' - depth relative to the current node (1 = direct children, 2 = grandchildren, etc)'
- source: '         * '
- source: '@'
  scopesBegin:
    - storage.type.class.jsdoc
  scopes:
    - punctuation.definition.block.tag.jsdoc
- source: returns
  scopesEnd:
    - storage.type.class.jsdoc
- source: '{'
  scopesBegin:
    - entity.name.type.instance.jsdoc
  scopes:
    - punctuation.definition.bracket.curly.begin.jsdoc
- source: '['
- source: Object
- source: ']'
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end.jsdoc
  scopesEnd:
    - entity.name.type.instance.jsdoc
- source: output
- source: '         *'
- source: '*/'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.block.documentation
- source: query
  scopesBegin:
    - meta.method.declaration
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: queryString
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: options
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: const
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: '{'
  scopesBegin:
    - meta.object-binding-pattern-variable
  scopes:
    - punctuation.definition.binding-pattern.object
- source: matchLimit
  scopes:
    - meta.definition.variable
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: startPosition
  scopes:
    - meta.definition.variable
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: endPosition
  scopes:
    - meta.definition.variable
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: maxResultDepth
  scopes:
    - meta.definition.variable
    - variable.other.constant
- source: '}'
  scopes:
    - punctuation.definition.binding-pattern.object
  scopesEnd:
    - meta.object-binding-pattern-variable
- source: '='
  scopes:
    - keyword.operator.assignment
- source: options
  scopes:
    - variable.other.readwrite
- source: '||'
  scopes:
    - keyword.operator.logical
- source: '{'
  scopesBegin:
    - meta.objectliteral
    - punctuation.definition.block
- source: '}'
  scopesEnd:
    - meta.objectliteral
    - punctuation.definition.block
- source: const
  scopes:
    - storage.type
- source: realMaxResultDepth
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: maxResultDepth
  scopes:
    - variable.other.readwrite
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: 'null'
  scopes:
    - constant.language.null
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: Infinity
  scopes:
    - constant.language.infinity
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: maxResultDepth
  scopes:
    - variable.other.readwrite
- source: const
  scopes:
    - storage.type
- source: result
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: this
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: language
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: query
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: queryString
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: .
  scopesBegin:
    - meta.function-call
  scopes:
    - punctuation.accessor
- source: matches
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: ','
  scopes:
    - punctuation.separator.comma
- source: startPosition
  scopes:
    - variable.other.readwrite
- source: '||'
  scopes:
    - keyword.operator.logical
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: startPosition
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.comma
- source: endPosition
  scopes:
    - variable.other.readwrite
- source: '||'
  scopes:
    - keyword.operator.logical
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: endPosition
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.comma
- source: matchLimit
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: return
  scopes:
    - keyword.control.flow.return
- source: result
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: filter
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: each
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: each
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: captures
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: every
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: each
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: each
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: node
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: depth
  scopes:
    - variable.other.property
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: depth
  scopes:
    - variable.other.property
- source: <=
  scopes:
    - keyword.operator.relational
- source: realMaxResultDepth
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.method.declaration
    - meta.block
- source: /**
  scopesBegin:
    - comment.block.documentation
  scopes:
    - punctuation.definition.comment
- source: '         * quickQuery'
- source: '         *'
- source: '         * '
- source: '@'
  scopesBegin:
    - meta.example.jsdoc
    - storage.type.class.jsdoc
  scopes:
    - punctuation.definition.block.tag.jsdoc
- source: example
  scopesEnd:
    - storage.type.class.jsdoc
- source: '         * '
- source: '```js'
  scopes:
    - source.embedded
- source: '         * '
- source: >-
    import { Parser, parserFromWasm } from
    "https://deno.land/x/deno_tree_sitter/main.js"
  scopes:
    - source.embedded
- source: '         * '
- source: >-
    import javascript from
    "https://github.com/jeff-hykin/common_tree_sitter_languages/raw/676ffa3b93768b8ac628fd5c61656f7dc41ba413/main/javascript.js"
  scopes:
    - source.embedded
- source: '         * '
- source: const parser = await parserFromWasm(javascript) // path or Uint8Array
  scopes:
    - source.embedded
- source: '         * '
- source: var tree = parser.parse('let a = 1;let b = 1;let c = 1;')
  scopes:
    - source.embedded
- source: '         *'
- source: '         * '
- source: 'tree.rootNode.quickQuery(`(identifier)`, {matchLimit: 2})'
  scopes:
    - source.embedded
- source: '         * '
- source: '// returns:'
  scopes:
    - source.embedded
- source: '         * '
- source: '['
  scopes:
    - source.embedded
- source: '         *   '
- source: '{'
  scopes:
    - source.embedded
- source: '         *      '
- source: 'type: "identifier",'
  scopes:
    - source.embedded
- source: '         *      '
- source: 'typeId: 1,'
  scopes:
    - source.embedded
- source: '         *      '
- source: 'startPosition: { row: 0, column: 4 },'
  scopes:
    - source.embedded
- source: '         *      '
- source: 'startIndex: 4,'
  scopes:
    - source.embedded
- source: '         *      '
- source: 'endPosition: { row: 0, column: 5 },'
  scopes:
    - source.embedded
- source: '         *      '
- source: 'endIndex: 5,'
  scopes:
    - source.embedded
- source: '         *      '
- source: 'indent: undefined,'
  scopes:
    - source.embedded
- source: '         *      '
- source: 'hasChildren: false,'
  scopes:
    - source.embedded
- source: '         *      '
- source: 'children: []'
  scopes:
    - source.embedded
- source: '         *   '
- source: '}'
  scopes:
    - source.embedded
- source: '         * '
- source: ']'
  scopes:
    - source.embedded
- source: '         * '
- source: '```'
  scopes:
    - source.embedded
- source: '         *'
- source: '         * '
  scopesEnd:
    - meta.example.jsdoc
- source: '@'
  scopesBegin:
    - storage.type.class.jsdoc
  scopes:
    - punctuation.definition.block.tag.jsdoc
- source: param
  scopesEnd:
    - storage.type.class.jsdoc
- source: '{'
  scopesBegin:
    - entity.name.type.instance.jsdoc
  scopes:
    - punctuation.definition.bracket.curly.begin.jsdoc
- source: String
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end.jsdoc
  scopesEnd:
    - entity.name.type.instance.jsdoc
- source: queryString
  scopes:
    - variable.other.jsdoc
- source: ' - see https://tree-sitter.github.io/tree-sitter/using-parsers#query-syntax'
- source: '         * '
- source: '@'
  scopesBegin:
    - storage.type.class.jsdoc
  scopes:
    - punctuation.definition.block.tag.jsdoc
- source: param
  scopesEnd:
    - storage.type.class.jsdoc
- source: options.matchLimit
  scopes:
    - variable.other.jsdoc
- source: ' - max number of results'
- source: '         * '
- source: '@'
  scopesBegin:
    - storage.type.class.jsdoc
  scopes:
    - punctuation.definition.block.tag.jsdoc
- source: param
  scopesEnd:
    - storage.type.class.jsdoc
- source: options.startPosition
  scopes:
    - variable.other.jsdoc
- source: ' - {row: Number, column: number}'
- source: '         * '
- source: '@'
  scopesBegin:
    - storage.type.class.jsdoc
  scopes:
    - punctuation.definition.block.tag.jsdoc
- source: param
  scopesEnd:
    - storage.type.class.jsdoc
- source: options.endPosition
  scopes:
    - variable.other.jsdoc
- source: ' - {row: Number, column: number}'
- source: '         * '
- source: '@'
  scopesBegin:
    - storage.type.class.jsdoc
  scopes:
    - punctuation.definition.block.tag.jsdoc
- source: param
  scopesEnd:
    - storage.type.class.jsdoc
- source: options.maxResultDepth
  scopes:
    - variable.other.jsdoc
- source: ' - depth relative to the current node (1 = direct children, 2 = grandchildren, etc)'
- source: '         * '
- source: '@'
  scopesBegin:
    - storage.type.class.jsdoc
  scopes:
    - punctuation.definition.block.tag.jsdoc
- source: returns
  scopesEnd:
    - storage.type.class.jsdoc
- source: '{'
  scopesBegin:
    - entity.name.type.instance.jsdoc
  scopes:
    - punctuation.definition.bracket.curly.begin.jsdoc
- source: '['
- source: Object
- source: ']'
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end.jsdoc
  scopesEnd:
    - entity.name.type.instance.jsdoc
- source: output
- source: '         *'
- source: '*/'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.block.documentation
- source: quickQuery
  scopesBegin:
    - meta.method.declaration
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: queryString
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: options
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: topLevelVarname
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: let
  scopes:
    - storage.type
- source: thereMightBeIssues
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: 'true'
  scopes:
    - constant.language.boolean.true
  scopesEnd:
    - meta.var.expr
- source: while
  scopes:
    - keyword.control.loop
- source: (
  scopes:
    - meta.brace.round
- source: thereMightBeIssues
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: topLevelVarname
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '`'
  scopesBegin:
    - string.template
  scopes:
    - punctuation.definition.string.template.begin
- source: '${'
  scopesBegin:
    - meta.template.expression
  scopes:
    - punctuation.definition.template-expression.begin
- source: topLevelVarname
  scopes:
    - meta.embedded.line
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.template-expression.end
  scopesEnd:
    - meta.template.expression
- source: _
- source: '`'
  scopes:
    - punctuation.definition.string.template.end
  scopesEnd:
    - string.template
- source: thereMightBeIssues
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: queryString
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: includes
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: '`'
  scopesBegin:
    - string.template
  scopes:
    - punctuation.definition.string.template.begin
- source: '@'
- source: '${'
  scopesBegin:
    - meta.template.expression
  scopes:
    - punctuation.definition.template-expression.begin
- source: topLevelVarname
  scopes:
    - meta.embedded.line
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.template-expression.end
  scopesEnd:
    - meta.template.expression
- source: '`'
  scopes:
    - punctuation.definition.string.template.end
  scopesEnd:
    - string.template
- source: )
  scopes:
    - meta.brace.round
- source: '||'
  scopes:
    - keyword.operator.logical
- source: queryString
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: includes
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: '`'
  scopesBegin:
    - string.template
  scopes:
    - punctuation.definition.string.template.begin
- source: '@'
- source: '${'
  scopesBegin:
    - meta.template.expression
  scopes:
    - punctuation.definition.template-expression.begin
- source: topLevelVarname
  scopes:
    - meta.embedded.line
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.template-expression.end
  scopesEnd:
    - meta.template.expression
- source: \t
  scopes:
    - constant.character.escape
- source: '`'
  scopes:
    - punctuation.definition.string.template.end
  scopesEnd:
    - string.template
- source: )
  scopes:
    - meta.brace.round
- source: '||'
  scopes:
    - keyword.operator.logical
- source: queryString
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: endsWith
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: '`'
  scopesBegin:
    - string.template
  scopes:
    - punctuation.definition.string.template.begin
- source: '@'
- source: '${'
  scopesBegin:
    - meta.template.expression
  scopes:
    - punctuation.definition.template-expression.begin
- source: topLevelVarname
  scopes:
    - meta.embedded.line
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.template-expression.end
  scopesEnd:
    - meta.template.expression
- source: '`'
  scopes:
    - punctuation.definition.string.template.end
  scopesEnd:
    - string.template
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' add the top-level extraction always'
  scopesEnd:
    - comment.line.double-slash
- source: queryString
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '`'
  scopesBegin:
    - string.template
  scopes:
    - punctuation.definition.string.template.begin
- source: '${'
  scopesBegin:
    - meta.template.expression
  scopes:
    - punctuation.definition.template-expression.begin
- source: queryString
  scopes:
    - meta.embedded.line
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.template-expression.end
  scopesEnd:
    - meta.template.expression
- source: ' @'
- source: '${'
  scopesBegin:
    - meta.template.expression
  scopes:
    - punctuation.definition.template-expression.begin
- source: topLevelVarname
  scopes:
    - meta.embedded.line
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.template-expression.end
  scopesEnd:
    - meta.template.expression
- source: '`'
  scopes:
    - punctuation.definition.string.template.end
  scopesEnd:
    - string.template
- source: const
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: output
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: this
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: query
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: queryString
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: options
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: .
  scopesBegin:
    - meta.function-call
  scopes:
    - punctuation.accessor
- source: map
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: each
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: Object
  scopesBegin:
    - meta.function-call
  scopes:
    - support.class.builtin
- source: .
  scopes:
    - punctuation.accessor
- source: fromEntries
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: each
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: captures
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: map
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: each
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: each
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: name
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.comma
- source: each
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: node
  scopes:
    - variable.other.property
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.arrow
    - meta.array.literal
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
- source: )
  scopesEnd:
    - meta.var.expr
    - meta.brace.round
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' combine the top-level extraction and the named extractions using proxies'
  scopesEnd:
    - comment.line.double-slash
- source: return
  scopes:
    - keyword.control.flow.return
- source: output
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: map
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: eachMatch
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: const
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: topLevel
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: eachMatch
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: topLevelVarname
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.var.expr
    - meta.array.literal
- source: delete
  scopes:
    - keyword.operator.expression.delete
- source: eachMatch
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: topLevelVarname
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: const
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: keys
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Object
  scopesBegin:
    - meta.function-call
  scopes:
    - support.class.builtin
- source: .
  scopes:
    - punctuation.accessor
- source: keys
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: eachMatch
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: keys
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: topLevel
  scopes:
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Proxy
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: topLevel
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '{'
  scopesBegin:
    - meta.objectliteral
  scopes:
    - punctuation.definition.block
- source: ownKeys
  scopesBegin:
    - meta.method.declaration
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: original
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: ...
  scopes:
    - keyword.operator.rest
- source: args
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: keys
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: concat
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: Reflect
  scopesBegin:
    - meta.function-call
  scopes:
    - support.class.builtin
- source: .
  scopes:
    - punctuation.accessor
- source: ownKeys
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: original
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ...
  scopes:
    - keyword.operator.spread
- source: args
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.method.declaration
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.comma
- source: getOwnPropertyDescriptor
  scopesBegin:
    - meta.method.declaration
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: original
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: prop
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: '{'
  scopesBegin:
    - meta.objectliteral
  scopes:
    - punctuation.definition.block
- source: enumerable
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: 'true'
  scopes:
    - constant.language.boolean.true
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: configurable
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: 'true'
  scopes:
    - constant.language.boolean.true
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.objectliteral
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.method.declaration
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.comma
- source: get
  scopesBegin:
    - meta.method.declaration
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: original
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: key
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: ...
  scopes:
    - keyword.operator.rest
- source: args
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' replace the inspect and toJSON'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: key
  scopes:
    - variable.other.readwrite
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: Symbol
  scopesBegin:
    - meta.function-call
  scopes:
    - support.class.builtin
- source: .
  scopes:
    - punctuation.accessor
- source: for
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Deno.customInspect
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: '||'
  scopes:
    - keyword.operator.logical
- source: key
  scopes:
    - variable.other.readwrite
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: toJSON
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: inspect
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: a
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: a
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: options
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '{'
  scopesBegin:
    - meta.objectliteral
    - punctuation.definition.block
- source: '}'
  scopesEnd:
    - meta.objectliteral
    - punctuation.definition.block
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: const
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: optional
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '{'
  scopesBegin:
    - meta.objectliteral
    - punctuation.definition.block
- source: '}'
  scopesEnd:
    - meta.var.expr
    - meta.objectliteral
    - punctuation.definition.block
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: typeof
  scopes:
    - keyword.operator.expression.typeof
- source: original
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: rootLeadingWhitespace
  scopes:
    - variable.other.property
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: string
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: optional
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: rootLeadingWhitespace
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: original
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: rootLeadingWhitespace
  scopes:
    - variable.other.property
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: inspect
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.objectliteral
  scopes:
    - punctuation.definition.block
- source: ...
  scopesBegin:
    - meta.object.member
  scopes:
    - keyword.operator.spread
- source: Object
  scopesBegin:
    - meta.function-call
  scopes:
    - support.class.builtin
- source: .
  scopes:
    - punctuation.accessor
- source: fromEntries
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: keys
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: map
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: eachKey
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: eachKey
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: eachMatch
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: eachKey
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.arrow
    - meta.array.literal
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.object.member
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: type
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: original
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: type
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: typeId
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: original
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: typeId
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: startPosition
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: original
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: startPosition
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: startIndex
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: original
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: startIndex
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: endPosition
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: original
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: endPosition
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: startIndex
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: original
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: startIndex
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: endIndex
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: original
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: endIndex
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: indent
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: original
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: indent
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ...
  scopesBegin:
    - meta.object.member
  scopes:
    - keyword.operator.spread
- source: optional
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: hasChildren
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: original
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: hasChildren
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: children
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: ...
  scopes:
    - keyword.operator.spread
- source: (
  scopes:
    - meta.brace.round
- source: original
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: children
  scopes:
    - variable.other.property
- source: '||'
  scopes:
    - keyword.operator.logical
- source: '['
  scopesBegin:
    - meta.array.literal
    - meta.brace.square
- source: ']'
  scopesEnd:
    - meta.array.literal
    - meta.brace.square
- source: )
  scopes:
    - meta.brace.round
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.object.member
    - meta.array.literal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.objectliteral
- source: ','
  scopes:
    - punctuation.separator.comma
- source: options
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.arrow
    - meta.block
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: keys
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: includes
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: key
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: eachMatch
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: key
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: Reflect
  scopesBegin:
    - meta.function-call
  scopes:
    - support.class.builtin
- source: .
  scopes:
    - punctuation.accessor
- source: get
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: original
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: key
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ...
  scopes:
    - keyword.operator.spread
- source: args
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.method.declaration
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.comma
- source: set
  scopesBegin:
    - meta.method.declaration
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: original
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: key
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: value
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: keys
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: includes
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: key
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: eachMatch
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: key
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: value
  scopes:
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: Reflect
  scopesBegin:
    - meta.function-call
  scopes:
    - support.class.builtin
- source: .
  scopes:
    - punctuation.accessor
- source: set
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: original
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: key
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: value
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.method.declaration
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.comma
- source: has
  scopesBegin:
    - meta.method.declaration
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: target
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: key
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: keys
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: includes
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: key
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '||'
  scopes:
    - keyword.operator.logical
- source: Reflect
  scopesBegin:
    - meta.function-call
  scopes:
    - support.class.builtin
- source: .
  scopes:
    - punctuation.accessor
- source: has
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: target
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: key
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.method.declaration
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.comma
- source: deleteProperty
  scopesBegin:
    - meta.method.declaration
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: target
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: key
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: keys
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: includes
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: key
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: delete
  scopes:
    - keyword.operator.expression.delete
- source: keys
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: keys
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: indexOf
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: key
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: Reflect
  scopesBegin:
    - meta.function-call
  scopes:
    - support.class.builtin
- source: .
  scopes:
    - punctuation.accessor
- source: deleteProperty
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: target
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: key
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.method.declaration
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.comma
- source: isExtensible
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: Reflect
  scopes:
    - support.class.builtin
- source: .
  scopes:
    - punctuation.accessor
- source: isExtensible
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: preventExtensions
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: Reflect
  scopes:
    - support.class.builtin
- source: .
  scopes:
    - punctuation.accessor
- source: preventExtensions
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: setPrototypeOf
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: Reflect
  scopes:
    - support.class.builtin
- source: .
  scopes:
    - punctuation.accessor
- source: setPrototypeOf
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: defineProperty
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: Reflect
  scopes:
    - support.class.builtin
- source: .
  scopes:
    - punctuation.accessor
- source: defineProperty
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: getPrototypeOf
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: Reflect
  scopes:
    - support.class.builtin
- source: .
  scopes:
    - punctuation.accessor
- source: getPrototypeOf
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.objectliteral
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.arrow
    - meta.block
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.method.declaration
    - meta.block
- source: /**
  scopesBegin:
    - comment.block.documentation
  scopes:
    - punctuation.definition.comment
- source: '         * quickQueryFirst'
- source: '         *'
- source: '         * '
- source: '@'
  scopesBegin:
    - meta.example.jsdoc
    - storage.type.class.jsdoc
  scopes:
    - punctuation.definition.block.tag.jsdoc
- source: example
  scopesEnd:
    - storage.type.class.jsdoc
- source: '         * '
- source: '```js'
  scopes:
    - source.embedded
- source: '         * '
- source: >-
    import { Parser, parserFromWasm } from
    "https://deno.land/x/deno_tree_sitter/main.js"
  scopes:
    - source.embedded
- source: '         * '
- source: >-
    import javascript from
    "https://github.com/jeff-hykin/common_tree_sitter_languages/raw/4d8a6d34d7f6263ff570f333cdcf5ded6be89e3d/main/javascript.js"
  scopes:
    - source.embedded
- source: '         * '
- source: const parser = await parserFromWasm(javascript) // path or Uint8Array
  scopes:
    - source.embedded
- source: '         * '
- source: var tree = parser.parse('let a = 1;let b = 1;let c = 1;')
  scopes:
    - source.embedded
- source: '         *'
- source: '         * '
- source: tree.rootNode.quickQueryFirst(`(identifier)`)
  scopes:
    - source.embedded
- source: '         * '
- source: '// returns:'
  scopes:
    - source.embedded
- source: '         * '
- source: '({'
  scopes:
    - source.embedded
- source: '         *      '
- source: 'type: "identifier",'
  scopes:
    - source.embedded
- source: '         *      '
- source: 'typeId: 1,'
  scopes:
    - source.embedded
- source: '         *      '
- source: 'startPosition: { row: 0, column: 4 },'
  scopes:
    - source.embedded
- source: '         *      '
- source: 'startIndex: 4,'
  scopes:
    - source.embedded
- source: '         *      '
- source: 'endPosition: { row: 0, column: 5 },'
  scopes:
    - source.embedded
- source: '         *      '
- source: 'endIndex: 5,'
  scopes:
    - source.embedded
- source: '         *      '
- source: 'indent: undefined,'
  scopes:
    - source.embedded
- source: '         *      '
- source: 'hasChildren: false,'
  scopes:
    - source.embedded
- source: '         *      '
- source: 'children: []'
  scopes:
    - source.embedded
- source: '         * '
- source: '})'
  scopes:
    - source.embedded
- source: '         * '
- source: '```'
  scopes:
    - source.embedded
- source: '         *'
- source: '         * '
  scopesEnd:
    - meta.example.jsdoc
- source: '@'
  scopesBegin:
    - storage.type.class.jsdoc
  scopes:
    - punctuation.definition.block.tag.jsdoc
- source: param
  scopesEnd:
    - storage.type.class.jsdoc
- source: '{'
  scopesBegin:
    - entity.name.type.instance.jsdoc
  scopes:
    - punctuation.definition.bracket.curly.begin.jsdoc
- source: String
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end.jsdoc
  scopesEnd:
    - entity.name.type.instance.jsdoc
- source: queryString
  scopes:
    - variable.other.jsdoc
- source: ' - see https://tree-sitter.github.io/tree-sitter/using-parsers#query-syntax'
- source: '         * '
- source: '@'
  scopesBegin:
    - storage.type.class.jsdoc
  scopes:
    - punctuation.definition.block.tag.jsdoc
- source: param
  scopesEnd:
    - storage.type.class.jsdoc
- source: options.startPosition
  scopes:
    - variable.other.jsdoc
- source: ' - {row: Number, column: number}'
- source: '         * '
- source: '@'
  scopesBegin:
    - storage.type.class.jsdoc
  scopes:
    - punctuation.definition.block.tag.jsdoc
- source: param
  scopesEnd:
    - storage.type.class.jsdoc
- source: options.endPosition
  scopes:
    - variable.other.jsdoc
- source: ' - {row: Number, column: number}'
- source: '         * '
- source: '@'
  scopesBegin:
    - storage.type.class.jsdoc
  scopes:
    - punctuation.definition.block.tag.jsdoc
- source: param
  scopesEnd:
    - storage.type.class.jsdoc
- source: options.maxResultDepth
  scopes:
    - variable.other.jsdoc
- source: ' - depth relative to the current node (1 = direct children, 2 = grandchildren, etc)'
- source: '         * '
- source: '@'
  scopesBegin:
    - storage.type.class.jsdoc
  scopes:
    - punctuation.definition.block.tag.jsdoc
- source: returns
  scopesEnd:
    - storage.type.class.jsdoc
- source: '{'
  scopesBegin:
    - entity.name.type.instance.jsdoc
  scopes:
    - punctuation.definition.bracket.curly.begin.jsdoc
- source: Object
- source: '}'
  scopes:
    - punctuation.definition.bracket.curly.end.jsdoc
  scopesEnd:
    - entity.name.type.instance.jsdoc
- source: output
- source: '         *'
- source: '*/'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.block.documentation
- source: quickQueryFirst
  scopesBegin:
    - meta.method.declaration
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: queryString
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: options
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: this
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: quickQuery
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: queryString
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '{'
  scopesBegin:
    - meta.objectliteral
  scopes:
    - punctuation.definition.block
- source: ...
  scopesBegin:
    - meta.object.member
  scopes:
    - keyword.operator.spread
- source: options
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: matchLimit
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: '1'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.object.member
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.objectliteral
- source: )
  scopes:
    - meta.brace.round
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: gutWith
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: stringOrNode
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: const
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: oldTree
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: const
  scopes:
    - storage.type
- source: '{'
  scopesBegin:
    - meta.object-binding-pattern-variable
  scopes:
    - punctuation.definition.binding-pattern.object
- source: startPosition
  scopes:
    - variable.object.property
- source: ':'
  scopes:
    - punctuation.destructuring
- source: originalStart
  scopes:
    - meta.definition.variable
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: endPosition
  scopes:
    - variable.object.property
- source: ':'
  scopes:
    - punctuation.destructuring
- source: originalEnd
  scopes:
    - meta.definition.variable
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: startIndex
  scopes:
    - variable.object.property
- source: ':'
  scopes:
    - punctuation.destructuring
- source: originalStartIndex
  scopes:
    - meta.definition.variable
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: endIndex
  scopes:
    - variable.object.property
- source: ':'
  scopes:
    - punctuation.destructuring
- source: originalEndIndex
  scopes:
    - meta.definition.variable
    - variable.other.constant
- source: '}'
  scopes:
    - punctuation.definition.binding-pattern.object
  scopesEnd:
    - meta.object-binding-pattern-variable
- source: '='
  scopes:
    - keyword.operator.assignment
- source: this
  scopes:
    - variable.language.this
  scopesEnd:
    - meta.var.expr
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: typeof
  scopes:
    - keyword.operator.expression.typeof
- source: stringOrNode
  scopes:
    - variable.other.readwrite
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: string
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: stringOrNode
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: stringOrNode
  scopes:
    - variable.other.object
- source: '?.'
  scopes:
    - punctuation.accessor.optional
- source: text
  scopes:
    - variable.other.property
- source: '||'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: const
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: addedLines
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: stringOrNode
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: match
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: /
  scopesBegin:
    - string.regexp
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.other.character-class.regexp
- source: /
  scopes:
    - punctuation.definition.string.end
- source: g
  scopes:
    - keyword.other
  scopesEnd:
    - string.regexp
- source: )
  scopes:
    - meta.brace.round
- source: '?.'
  scopes:
    - punctuation.accessor.optional
- source: length
  scopes:
    - support.variable.property
- source: '||'
  scopes:
    - keyword.operator.logical
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: let
  scopes:
    - storage.type
- source: newEndRow
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: originalStart
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: row
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.var.expr
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: addedLines
  scopes:
    - variable.other.readwrite
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: newEndRow
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: originalStart
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: row
  scopes:
    - variable.other.property
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: stringOrNode
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.conditional
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: newEndRow
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: stringOrNode
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: split
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: .
  scopesBegin:
    - meta.function-call
  scopes:
    - punctuation.accessor
- source: slice
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: const
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: newString
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: this
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: string
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: slice
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: originalStartIndex
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: stringOrNode
  scopes:
    - variable.other.readwrite
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: this
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: string
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: slice
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: originalEndIndex
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' update the .text of all the nodes'
  scopesEnd:
    - comment.line.double-slash
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: string
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: newString
  scopes:
    - variable.other.readwrite
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' update all the indices'
  scopesEnd:
    - comment.line.double-slash
- source: oldTree
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: edit
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.objectliteral
  scopes:
    - punctuation.definition.block
- source: startIndex
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: originalStartIndex
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: oldEndIndex
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: originalEndIndex
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: newEndIndex
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: originalStartIndex
  scopes:
    - variable.other.readwrite
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: stringOrNode
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: startPosition
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: originalStart
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: oldEndPosition
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: originalEnd
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: newEndPosition
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: '{'
  scopesBegin:
    - meta.objectliteral
  scopes:
    - punctuation.definition.block
- source: row
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: newEndRow
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: column
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: originalStart
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: column
  scopes:
    - variable.other.property
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: addedLines
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.object.member
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.object.member
    - meta.objectliteral
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.objectliteral
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.method.declaration
    - meta.block
- source: '}'
  scopes:
    - punctuation.definition.block
- source: export
  scopes:
    - keyword.control.export
- source: class
  scopes:
    - storage.type.class
- source: TreeCursor
  scopes:
    - entity.name.type.class
- source: '{'
  scopes:
    - punctuation.definition.block
- source: constructor
  scopesBegin:
    - meta.method.declaration
  scopes:
    - storage.type
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: _
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: assertInternal
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: unmarshalTreeCursor
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: delete
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: marshalTreeCursor
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_delete_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: this
  scopes:
    - variable.language.this
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: this
  scopes:
    - variable.language.this
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: reset
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: marshalNode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: marshalTreeCursor
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: ','
  scopes:
    - punctuation.separator.comma
- source: TRANSFER_BUFFER
  scopes:
    - variable.other.constant
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: SIZE_OF_NODE
  scopes:
    - variable.other.constant
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_reset_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: unmarshalTreeCursor
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: resetTo
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: marshalTreeCursor
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: ','
  scopes:
    - punctuation.separator.comma
- source: TRANSFER_BUFFER
  scopes:
    - variable.other.constant
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: marshalTreeCursor
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: TRANSFER_BUFFER
  scopes:
    - variable.other.constant
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: SIZE_OF_CURSOR
  scopes:
    - variable.other.constant
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_reset_to_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: unmarshalTreeCursor
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: get
  scopes:
    - storage.type.property
- source: nodeType
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: language
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: types
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: nodeTypeId
  scopes:
    - variable.other.property
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '||'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ERROR
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: get
  scopes:
    - storage.type.property
- source: nodeTypeId
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: marshalTreeCursor
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_current_node_type_id_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: get
  scopes:
    - storage.type.property
- source: nodeStateId
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: marshalTreeCursor
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_current_node_state_id_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: get
  scopes:
    - storage.type.property
- source: nodeId
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: marshalTreeCursor
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_current_node_id_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: get
  scopes:
    - storage.type.property
- source: nodeIsNamed
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: marshalTreeCursor
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_current_node_is_named_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: '==='
  scopes:
    - keyword.operator.comparison
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: get
  scopes:
    - storage.type.property
- source: nodeIsMissing
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: marshalTreeCursor
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_current_node_is_missing_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: '==='
  scopes:
    - keyword.operator.comparison
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: get
  scopes:
    - storage.type.property
- source: nodeText
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: marshalTreeCursor
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: t
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_start_index_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_end_index_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: return
  scopes:
    - keyword.control.flow.return
- source: getText
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: get
  scopes:
    - storage.type.property
- source: startPosition
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: marshalTreeCursor
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_start_position_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: unmarshalPoint
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: TRANSFER_BUFFER
  scopes:
    - variable.other.constant
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: get
  scopes:
    - storage.type.property
- source: endPosition
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: marshalTreeCursor
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_end_position_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: unmarshalPoint
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: TRANSFER_BUFFER
  scopes:
    - variable.other.constant
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: get
  scopes:
    - storage.type.property
- source: startIndex
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: marshalTreeCursor
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_start_index_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: get
  scopes:
    - storage.type.property
- source: endIndex
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: marshalTreeCursor
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_end_index_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: get
  scopes:
    - storage.type.property
- source: currentNode
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: marshalTreeCursor
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_current_node_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: unmarshalNode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: get
  scopes:
    - storage.type.property
- source: currentFieldId
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: marshalTreeCursor
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_current_field_id_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: get
  scopes:
    - storage.type.property
- source: currentFieldName
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: language
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: fields
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: currentFieldId
  scopes:
    - variable.other.property
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: get
  scopes:
    - storage.type.property
- source: currentDepth
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: marshalTreeCursor
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_current_depth_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: get
  scopes:
    - storage.type.property
- source: currentDescendantIndex
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: marshalTreeCursor
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_current_descendant_index_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: gotoFirstChild
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: marshalTreeCursor
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: t
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_goto_first_child_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: return
  scopes:
    - keyword.control.flow.return
- source: unmarshalTreeCursor
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: '==='
  scopes:
    - keyword.operator.comparison
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: gotoLastChild
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: marshalTreeCursor
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: t
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_goto_last_child_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: return
  scopes:
    - keyword.control.flow.return
- source: unmarshalTreeCursor
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: '==='
  scopes:
    - keyword.operator.comparison
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: gotoFirstChildForIndex
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: marshalTreeCursor
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: setValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: TRANSFER_BUFFER
  scopes:
    - variable.other.constant
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: SIZE_OF_CURSOR
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: _
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_goto_first_child_for_index_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: return
  scopes:
    - keyword.control.flow.return
- source: unmarshalTreeCursor
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: '==='
  scopes:
    - keyword.operator.comparison
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: gotoFirstChildForPosition
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: marshalTreeCursor
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: marshalPoint
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: TRANSFER_BUFFER
  scopes:
    - variable.other.constant
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: SIZE_OF_CURSOR
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: _
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_goto_first_child_for_position_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: return
  scopes:
    - keyword.control.flow.return
- source: unmarshalTreeCursor
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: '==='
  scopes:
    - keyword.operator.comparison
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: gotoNextSibling
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: marshalTreeCursor
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: t
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_goto_next_sibling_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: return
  scopes:
    - keyword.control.flow.return
- source: unmarshalTreeCursor
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: '==='
  scopes:
    - keyword.operator.comparison
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: gotoPreviousSibling
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: marshalTreeCursor
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: t
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_goto_previous_sibling_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: return
  scopes:
    - keyword.control.flow.return
- source: unmarshalTreeCursor
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: '==='
  scopes:
    - keyword.operator.comparison
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: gotoDescendant
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: marshalTreeCursor
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_goto_descendant_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: unmarshalTreeCursor
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: gotoParent
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: marshalTreeCursor
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: t
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_tree_cursor_goto_parent_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: return
  scopes:
    - keyword.control.flow.return
- source: unmarshalTreeCursor
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: '==='
  scopes:
    - keyword.operator.comparison
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.method.declaration
    - meta.block
- source: '}'
  scopes:
    - punctuation.definition.block
- source: export
  scopes:
    - keyword.control.export
- source: class
  scopes:
    - storage.type.class
- source: Language
  scopes:
    - entity.name.type.class
- source: '{'
  scopes:
    - punctuation.definition.block
- source: constructor
  scopesBegin:
    - meta.method.declaration
  scopes:
    - storage.type
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: _
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: assertInternal
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: types
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Array
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_language_symbol_count
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - new.expr
    - meta.brace.round
- source: )
  scopes:
    - meta.brace.round
- source: for
  scopes:
    - keyword.control.loop
- source: (
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: s
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: r
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: types
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
  scopesEnd:
    - meta.var.expr
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: s
  scopes:
    - variable.other.readwrite
- source: <
  scopes:
    - keyword.operator.relational
- source: r
  scopes:
    - variable.other.readwrite
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: s
  scopes:
    - variable.other.readwrite
- source: ++
  scopes:
    - keyword.operator.increment
- source: )
  scopes:
    - meta.brace.round
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_language_symbol_type
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: s
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: <
  scopes:
    - keyword.operator.relational
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: types
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: s
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: UTF8ToString
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_language_symbol_name
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: s
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
- source: )
  scopesEnd:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: fields
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Array
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_language_field_count
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: for
  scopes:
    - keyword.control.loop
- source: (
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: s
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: r
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: fields
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
  scopesEnd:
    - meta.var.expr
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: s
  scopes:
    - variable.other.readwrite
- source: <
  scopes:
    - keyword.operator.relational
- source: r
  scopes:
    - variable.other.readwrite
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: s
  scopes:
    - variable.other.readwrite
- source: ++
  scopes:
    - keyword.operator.increment
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: a
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_language_field_name_for_id
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: s
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: fields
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: s
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: a
  scopes:
    - variable.other.readwrite
- source: '!=='
  scopes:
    - keyword.operator.comparison
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: UTF8ToString
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: a
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: 'null'
  scopes:
    - constant.language.null
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: get
  scopes:
    - storage.type.property
- source: version
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_language_version
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: get
  scopes:
    - storage.type.property
- source: fieldCount
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: fields
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: get
  scopes:
    - storage.type.property
- source: stateCount
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_language_state_count
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: fieldIdForName
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: _
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: this
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: fields
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: indexOf
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: return
  scopes:
    - keyword.control.flow.return
- source: _
  scopes:
    - variable.other.readwrite
- source: '!=='
  scopes:
    - keyword.operator.comparison
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: _
  scopes:
    - variable.other.readwrite
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: 'null'
  scopes:
    - constant.language.null
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: fieldNameForId
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: fields
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: t
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '||'
  scopes:
    - keyword.operator.logical
- source: 'null'
  scopes:
    - constant.language.null
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: idForNodeType
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: _
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: s
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: lengthBytesUTF8
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: r
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _malloc
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: s
  scopes:
    - variable.other.readwrite
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: stringToUTF8
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: r
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: s
  scopes:
    - variable.other.readwrite
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: a
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_language_symbol_for_name
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: r
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: s
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: return
  scopes:
    - keyword.control.flow.return
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _free
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: r
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: a
  scopes:
    - variable.other.readwrite
- source: '||'
  scopes:
    - keyword.operator.logical
- source: 'null'
  scopes:
    - constant.language.null
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: get
  scopes:
    - storage.type.property
- source: nodeTypeCount
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_language_symbol_count
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: nodeTypeForId
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: _
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_language_symbol_name
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: return
  scopes:
    - keyword.control.flow.return
- source: _
  scopes:
    - variable.other.readwrite
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: UTF8ToString
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: 'null'
  scopes:
    - constant.language.null
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: nodeTypeIsNamed
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: '!'
  scopesBegin:
    - keyword.operator.logical
- source: '!'
  scopesEnd:
    - keyword.operator.logical
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_language_type_is_named_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: nodeTypeIsVisible
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: '!'
  scopesBegin:
    - keyword.operator.logical
- source: '!'
  scopesEnd:
    - keyword.operator.logical
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_language_type_is_visible_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: nextState
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: _
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_language_next_state
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: lookaheadIterator
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: _
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_lookahead_iterator_new
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: return
  scopes:
    - keyword.control.flow.return
- source: _
  scopes:
    - variable.other.readwrite
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: LookaheadIterable
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: INTERNAL
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: 'null'
  scopes:
    - constant.language.null
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: query
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: _
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: lengthBytesUTF8
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: s
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _malloc
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: _
  scopes:
    - variable.other.readwrite
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: stringToUTF8
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: s
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: r
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_query_new
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: s
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: TRANSFER_BUFFER
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: TRANSFER_BUFFER
  scopes:
    - variable.other.constant
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: SIZE_OF_INT
  scopes:
    - variable.other.constant
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: r
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: d
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: getValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: TRANSFER_BUFFER
  scopes:
    - variable.other.constant
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: SIZE_OF_INT
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: b
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: getValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: TRANSFER_BUFFER
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: h
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: UTF8ToString
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: s
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: b
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
- source: ','
  scopes:
    - punctuation.separator.comma
- source: l
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: t
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: substr
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: h
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '100'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: .
  scopesBegin:
    - meta.function-call
  scopes:
    - punctuation.accessor
- source: split
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: '`'
  scopesBegin:
    - string.template
  scopes:
    - punctuation.definition.string.template.begin
- source: \n
  scopes:
    - constant.character.escape
- source: '`'
  scopes:
    - punctuation.definition.string.template.end
  scopesEnd:
    - string.template
- source: )
  scopes:
    - meta.brace.round
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: g
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: M
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: l
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: match
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: QUERY_WORD_REGEX
  scopes:
    - variable.other.constant
- source: )
  scopes:
    - meta.brace.round
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.var.expr
    - meta.array.literal
- source: switch
  scopesBegin:
    - switch-statement.expr
    - switch-expression.expr
  scopes:
    - keyword.control.switch
- source: (
  scopes:
    - meta.brace.round
- source: d
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - switch-expression.expr
- source: '{'
  scopesBegin:
    - switch-block.expr
  scopes:
    - punctuation.definition.block
- source: case
  scopesBegin:
    - case-clause.expr
  scopes:
    - keyword.control.switch
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ':'
  scopes:
    - punctuation.definition.section.case-statement
  scopesEnd:
    - case-clause.expr
- source: g
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: RangeError
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: '`'
  scopesBegin:
    - string.template
  scopes:
    - punctuation.definition.string.template.begin
- source: Bad node name '
- source: '${'
  scopesBegin:
    - meta.template.expression
  scopes:
    - punctuation.definition.template-expression.begin
- source: M
  scopes:
    - meta.embedded.line
    - variable.other.constant
- source: '}'
  scopes:
    - punctuation.definition.template-expression.end
  scopesEnd:
    - meta.template.expression
- source: ''''
- source: '`'
  scopes:
    - punctuation.definition.string.template.end
  scopesEnd:
    - string.template
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: break
  scopes:
    - keyword.control.loop
- source: case
  scopesBegin:
    - case-clause.expr
  scopes:
    - keyword.control.switch
- source: '3'
  scopes:
    - constant.numeric.decimal
- source: ':'
  scopes:
    - punctuation.definition.section.case-statement
  scopesEnd:
    - case-clause.expr
- source: g
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: RangeError
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: '`'
  scopesBegin:
    - string.template
  scopes:
    - punctuation.definition.string.template.begin
- source: Bad field name '
- source: '${'
  scopesBegin:
    - meta.template.expression
  scopes:
    - punctuation.definition.template-expression.begin
- source: M
  scopes:
    - meta.embedded.line
    - variable.other.constant
- source: '}'
  scopes:
    - punctuation.definition.template-expression.end
  scopesEnd:
    - meta.template.expression
- source: ''''
- source: '`'
  scopes:
    - punctuation.definition.string.template.end
  scopesEnd:
    - string.template
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: break
  scopes:
    - keyword.control.loop
- source: case
  scopesBegin:
    - case-clause.expr
  scopes:
    - keyword.control.switch
- source: '4'
  scopes:
    - constant.numeric.decimal
- source: ':'
  scopes:
    - punctuation.definition.section.case-statement
  scopesEnd:
    - case-clause.expr
- source: g
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: RangeError
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: '`'
  scopesBegin:
    - string.template
  scopes:
    - punctuation.definition.string.template.begin
- source: Bad capture name @
- source: '${'
  scopesBegin:
    - meta.template.expression
  scopes:
    - punctuation.definition.template-expression.begin
- source: M
  scopes:
    - meta.embedded.line
    - variable.other.constant
- source: '}'
  scopes:
    - punctuation.definition.template-expression.end
  scopesEnd:
    - meta.template.expression
- source: '`'
  scopes:
    - punctuation.definition.string.template.end
  scopesEnd:
    - string.template
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: break
  scopes:
    - keyword.control.loop
- source: case
  scopesBegin:
    - case-clause.expr
  scopes:
    - keyword.control.switch
- source: '5'
  scopes:
    - constant.numeric.decimal
- source: ':'
  scopes:
    - punctuation.definition.section.case-statement
  scopesEnd:
    - case-clause.expr
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: (
  scopes:
    - meta.brace.round
- source: g
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: TypeError
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: '`'
  scopesBegin:
    - string.template
  scopes:
    - punctuation.definition.string.template.begin
- source: 'Bad pattern structure at offset '
- source: '${'
  scopesBegin:
    - meta.template.expression
  scopes:
    - punctuation.definition.template-expression.begin
- source: h
  scopes:
    - meta.embedded.line
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.template-expression.end
  scopesEnd:
    - meta.template.expression
- source: ': '''
- source: '${'
  scopesBegin:
    - meta.template.expression
  scopes:
    - punctuation.definition.template-expression.begin
- source: l
  scopes:
    - meta.embedded.line
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.template-expression.end
  scopesEnd:
    - meta.template.expression
- source: '''...'
- source: '`'
  scopes:
    - punctuation.definition.string.template.end
  scopesEnd:
    - string.template
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: M
  scopes:
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: break
  scopes:
    - keyword.control.loop
- source: default
  scopesBegin:
    - case-clause.expr
  scopes:
    - keyword.control.switch
- source: ':'
  scopes:
    - punctuation.definition.section.case-statement
  scopesEnd:
    - case-clause.expr
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: (
  scopes:
    - meta.brace.round
- source: g
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: SyntaxError
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: '`'
  scopesBegin:
    - string.template
  scopes:
    - punctuation.definition.string.template.begin
- source: 'Bad syntax at offset '
- source: '${'
  scopesBegin:
    - meta.template.expression
  scopes:
    - punctuation.definition.template-expression.begin
- source: h
  scopes:
    - meta.embedded.line
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.template-expression.end
  scopesEnd:
    - meta.template.expression
- source: ': '''
- source: '${'
  scopesBegin:
    - meta.template.expression
  scopes:
    - punctuation.definition.template-expression.begin
- source: l
  scopes:
    - meta.embedded.line
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.template-expression.end
  scopesEnd:
    - meta.template.expression
- source: '''...'
- source: '`'
  scopes:
    - punctuation.definition.string.template.end
  scopesEnd:
    - string.template
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: M
  scopes:
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - switch-block.expr
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - switch-statement.expr
- source: throw
  scopes:
    - keyword.control.trycatch
- source: (
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: g
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: index
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: h
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: g
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: M
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _free
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: s
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: g
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: a
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_query_string_count
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: r
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: o
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_query_capture_count
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: r
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: 'n'
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_query_pattern_count
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: r
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: u
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Array
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: o
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: ','
  scopes:
    - punctuation.separator.comma
- source: m
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Array
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: a
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
    - new.expr
- source: for
  scopes:
    - keyword.control.loop
- source: (
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: d
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.var.expr
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: d
  scopes:
    - variable.other.readwrite
- source: <
  scopes:
    - keyword.operator.relational
- source: o
  scopes:
    - variable.other.readwrite
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: d
  scopes:
    - variable.other.readwrite
- source: ++
  scopes:
    - keyword.operator.increment
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: b
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_query_capture_name_for_id
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: r
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: d
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: TRANSFER_BUFFER
  scopes:
    - variable.other.constant
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: h
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: getValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: TRANSFER_BUFFER
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: u
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: d
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: UTF8ToString
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: b
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: h
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: for
  scopes:
    - keyword.control.loop
- source: (
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: d
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.var.expr
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: d
  scopes:
    - variable.other.readwrite
- source: <
  scopes:
    - keyword.operator.relational
- source: a
  scopes:
    - variable.other.readwrite
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: d
  scopes:
    - variable.other.readwrite
- source: ++
  scopes:
    - keyword.operator.increment
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: b
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_query_string_value_for_id
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: r
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: d
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: TRANSFER_BUFFER
  scopes:
    - variable.other.constant
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: h
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: getValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: TRANSFER_BUFFER
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: m
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: d
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: UTF8ToString
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: b
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: h
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: w
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Array
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: 'n'
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: ','
  scopes:
    - punctuation.separator.comma
- source: c
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Array
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: 'n'
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: ','
  scopes:
    - punctuation.separator.comma
- source: f
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Array
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: 'n'
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: ','
  scopes:
    - punctuation.separator.comma
- source: p
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Array
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: 'n'
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: ','
  scopes:
    - punctuation.separator.comma
- source: I
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Array
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: 'n'
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
    - new.expr
- source: for
  scopes:
    - keyword.control.loop
- source: (
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: d
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.var.expr
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: d
  scopes:
    - variable.other.readwrite
- source: <
  scopes:
    - keyword.operator.relational
- source: 'n'
  scopes:
    - variable.other.readwrite
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: d
  scopes:
    - variable.other.readwrite
- source: ++
  scopes:
    - keyword.operator.increment
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: b
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_query_predicates_for_pattern
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: r
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: d
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: TRANSFER_BUFFER
  scopes:
    - variable.other.constant
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: h
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: getValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: TRANSFER_BUFFER
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: (
  scopes:
    - meta.brace.round
- source: p
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: d
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '['
  scopesBegin:
    - meta.array.literal
    - meta.brace.square
- source: ']'
  scopesEnd:
    - meta.array.literal
    - meta.brace.square
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: I
  scopes:
    - variable.other.constant
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: d
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '['
  scopesBegin:
    - meta.array.literal
    - meta.brace.square
- source: ']'
  scopesEnd:
    - meta.array.literal
    - meta.brace.square
- source: )
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: l
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '['
  scopesBegin:
    - meta.array.literal
    - meta.brace.square
- source: ']'
  scopesEnd:
    - meta.array.literal
    - meta.brace.square
- source: ','
  scopes:
    - punctuation.separator.comma
- source: g
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: b
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.var.expr
- source: for
  scopes:
    - keyword.control.loop
- source: (
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: M
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.var.expr
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: M
  scopes:
    - variable.other.constant
- source: <
  scopes:
    - keyword.operator.relational
- source: h
  scopes:
    - variable.other.readwrite
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: M
  scopes:
    - variable.other.constant
- source: ++
  scopes:
    - keyword.operator.increment
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: U
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: getValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: g
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: g
  scopes:
    - variable.other.readwrite
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: SIZE_OF_INT
  scopes:
    - variable.other.constant
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: W
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: getValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: g
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopesBegin:
    - meta.brace.round
- source: (
- source: (
  scopesEnd:
    - meta.brace.round
- source: g
  scopes:
    - variable.other.readwrite
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: SIZE_OF_INT
  scopes:
    - variable.other.constant
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: U
  scopes:
    - variable.other.constant
- source: '==='
  scopes:
    - keyword.operator.comparison
- source: PREDICATE_STEP_TYPE_CAPTURE
  scopes:
    - variable.other.constant
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: l
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: push
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.objectliteral
  scopes:
    - punctuation.definition.block
- source: type
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: capture
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.object.member
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.comma
- source: name
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: u
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: W
  scopes:
    - variable.other.constant
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.object.member
    - meta.array.literal
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.objectliteral
- source: )
  scopes:
    - meta.brace.round
- source: else
  scopesBegin:
    - keyword.control.conditional
- source: if
  scopesEnd:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: U
  scopes:
    - variable.other.constant
- source: '==='
  scopes:
    - keyword.operator.comparison
- source: PREDICATE_STEP_TYPE_STRING
  scopes:
    - variable.other.constant
- source: )
  scopes:
    - meta.brace.round
- source: l
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: push
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.objectliteral
  scopes:
    - punctuation.definition.block
- source: type
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: string
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.object.member
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.comma
- source: value
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: m
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: W
  scopes:
    - variable.other.constant
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.object.member
    - meta.array.literal
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.objectliteral
- source: )
  scopes:
    - meta.brace.round
- source: else
  scopesBegin:
    - keyword.control.conditional
- source: if
  scopesEnd:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: l
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
- source: '>'
  scopes:
    - keyword.operator.relational
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: l
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: .
  scopes:
    - punctuation.accessor
- source: type
  scopes:
    - variable.other.property
- source: '!=='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: string
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: throw
  scopes:
    - keyword.control.trycatch
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Error
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Predicates must begin with a literal value
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: T
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: l
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: .
  scopes:
    - punctuation.accessor
- source: value
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.comma
- source: v
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: R
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: 'true'
  scopes:
    - constant.language.boolean.true
- source: ','
  scopes:
    - punctuation.separator.comma
- source: k
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: 'true'
  scopes:
    - constant.language.boolean.true
  scopesEnd:
    - meta.var.expr
- source: switch
  scopesBegin:
    - switch-statement.expr
    - switch-expression.expr
  scopes:
    - keyword.control.switch
- source: (
  scopes:
    - meta.brace.round
- source: T
  scopes:
    - variable.other.constant
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - switch-expression.expr
- source: '{'
  scopesBegin:
    - switch-block.expr
  scopes:
    - punctuation.definition.block
- source: case
  scopesBegin:
    - case-clause.expr
  scopes:
    - keyword.control.switch
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: any-not-eq?
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ':'
  scopes:
    - punctuation.definition.section.case-statement
- source: case
  scopes:
    - keyword.control.switch
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: not-eq?
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ':'
  scopes:
    - punctuation.definition.section.case-statement
  scopesEnd:
    - case-clause.expr
- source: R
  scopes:
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: 'false'
  scopes:
    - constant.language.boolean.false
- source: case
  scopesBegin:
    - case-clause.expr
  scopes:
    - keyword.control.switch
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: any-eq?
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ':'
  scopes:
    - punctuation.definition.section.case-statement
- source: case
  scopes:
    - keyword.control.switch
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: eq?
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ':'
  scopes:
    - punctuation.definition.section.case-statement
  scopesEnd:
    - case-clause.expr
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: l
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
- source: '!=='
  scopes:
    - keyword.operator.comparison
- source: '3'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: throw
  scopes:
    - keyword.control.trycatch
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Error
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: '`'
  scopesBegin:
    - string.template
  scopes:
    - punctuation.definition.string.template.begin
- source: 'Wrong number of arguments to '
- source: \`
  scopes:
    - constant.character.escape
- source: '#'
- source: '${'
  scopesBegin:
    - meta.template.expression
  scopes:
    - punctuation.definition.template-expression.begin
- source: T
  scopes:
    - meta.embedded.line
    - variable.other.constant
- source: '}'
  scopes:
    - punctuation.definition.template-expression.end
  scopesEnd:
    - meta.template.expression
- source: \`
  scopes:
    - constant.character.escape
- source: ' predicate. Expected 2, got '
- source: '${'
  scopesBegin:
    - meta.template.expression
  scopes:
    - punctuation.definition.template-expression.begin
- source: l
  scopesBegin:
    - meta.embedded.line
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.embedded.line
- source: '}'
  scopes:
    - punctuation.definition.template-expression.end
  scopesEnd:
    - meta.template.expression
- source: '`'
  scopes:
    - punctuation.definition.string.template.end
  scopesEnd:
    - string.template
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: l
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: .
  scopes:
    - punctuation.accessor
- source: type
  scopes:
    - variable.other.property
- source: '!=='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: capture
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: throw
  scopes:
    - keyword.control.trycatch
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Error
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: '`'
  scopesBegin:
    - string.template
  scopes:
    - punctuation.definition.string.template.begin
- source: 'First argument of '
- source: \`
  scopes:
    - constant.character.escape
- source: '#'
- source: '${'
  scopesBegin:
    - meta.template.expression
  scopes:
    - punctuation.definition.template-expression.begin
- source: T
  scopes:
    - meta.embedded.line
    - variable.other.constant
- source: '}'
  scopes:
    - punctuation.definition.template-expression.end
  scopesEnd:
    - meta.template.expression
- source: \`
  scopes:
    - constant.character.escape
- source: ' predicate must be a capture. Got "'
- source: '${'
  scopesBegin:
    - meta.template.expression
  scopes:
    - punctuation.definition.template-expression.begin
- source: l
  scopesBegin:
    - meta.embedded.line
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: .
  scopes:
    - punctuation.accessor
- source: value
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.embedded.line
- source: '}'
  scopes:
    - punctuation.definition.template-expression.end
  scopesEnd:
    - meta.template.expression
- source: '"'
- source: '`'
  scopes:
    - punctuation.definition.string.template.end
  scopesEnd:
    - string.template
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopesBegin:
    - meta.brace.round
- source: (
- source: (
  scopesEnd:
    - meta.brace.round
- source: k
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '!'
  scopes:
    - keyword.operator.logical
- source: T
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: startsWith
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: any-
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: l
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: .
  scopes:
    - punctuation.accessor
- source: type
  scopes:
    - variable.other.property
- source: '==='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: capture
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: 'y'
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: l
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: .
  scopes:
    - punctuation.accessor
- source: name
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.comma
- source: x
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: l
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: .
  scopes:
    - punctuation.accessor
- source: name
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.var.expr
- source: I
  scopes:
    - variable.other.constant
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: d
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: .
  scopesBegin:
    - meta.function-call
  scopes:
    - punctuation.accessor
- source: push
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: S
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: E
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '['
  scopesBegin:
    - meta.array.literal
    - meta.brace.square
- source: ']'
  scopesEnd:
    - meta.array.literal
    - meta.brace.square
- source: ','
  scopes:
    - punctuation.separator.comma
- source: 'N'
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '['
  scopesBegin:
    - meta.array.literal
    - meta.brace.square
- source: ']'
  scopesEnd:
    - meta.var.expr
    - meta.array.literal
    - meta.brace.square
- source: for
  scopes:
    - keyword.control.loop
- source: (
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: F
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
  scopesEnd:
    - meta.var.expr
- source: of
  scopes:
    - keyword.operator.expression.of
- source: S
  scopes:
    - variable.other.constant
- source: )
  scopes:
    - meta.brace.round
- source: F
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: name
  scopes:
    - variable.other.property
- source: '==='
  scopes:
    - keyword.operator.comparison
- source: 'y'
  scopes:
    - variable.other.readwrite
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: E
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: push
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: F
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: node
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: F
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: name
  scopes:
    - variable.other.property
- source: '==='
  scopes:
    - keyword.operator.comparison
- source: x
  scopes:
    - variable.other.readwrite
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: 'N'
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: push
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: F
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: node
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: B
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: F
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: O
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: z
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: z
  scopes:
    - variable.other.readwrite
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: F
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: text
  scopes:
    - variable.other.property
- source: '==='
  scopes:
    - keyword.operator.comparison
- source: O
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: text
  scopes:
    - variable.other.property
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: F
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: text
  scopes:
    - variable.other.property
- source: '!=='
  scopes:
    - keyword.operator.comparison
- source: O
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: text
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: return
  scopes:
    - keyword.control.flow.return
- source: k
  scopes:
    - variable.other.readwrite
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: E
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: every
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: F
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: 'N'
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: some
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: O
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: B
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: F
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: O
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: R
  scopes:
    - variable.other.constant
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
- source: )
  scopesEnd:
    - meta.brace.round
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: E
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: some
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: F
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: 'N'
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: some
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: O
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: B
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: F
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: O
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: R
  scopes:
    - variable.other.constant
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
- source: )
  scopesEnd:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.arrow
    - meta.block
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.conditional
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: v
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: l
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: .
  scopes:
    - punctuation.accessor
- source: name
  scopes:
    - variable.other.property
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: 'y'
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: l
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: .
  scopes:
    - punctuation.accessor
- source: value
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.comma
- source: x
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: E
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: E
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: text
  scopes:
    - variable.other.property
- source: '==='
  scopes:
    - keyword.operator.comparison
- source: 'y'
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: S
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: E
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: E
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: text
  scopes:
    - variable.other.property
- source: '!=='
  scopes:
    - keyword.operator.comparison
- source: 'y'
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.var.expr
- source: I
  scopes:
    - variable.other.constant
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: d
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: .
  scopesBegin:
    - meta.function-call
  scopes:
    - punctuation.accessor
- source: push
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: E
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: 'N'
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '['
  scopesBegin:
    - meta.array.literal
    - meta.brace.square
- source: ']'
  scopesEnd:
    - meta.var.expr
    - meta.array.literal
    - meta.brace.square
- source: for
  scopes:
    - keyword.control.loop
- source: (
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: F
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
  scopesEnd:
    - meta.var.expr
- source: of
  scopes:
    - keyword.operator.expression.of
- source: E
  scopes:
    - variable.other.constant
- source: )
  scopes:
    - meta.brace.round
- source: F
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: name
  scopes:
    - variable.other.property
- source: '==='
  scopes:
    - keyword.operator.comparison
- source: v
  scopes:
    - variable.other.readwrite
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: 'N'
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: push
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: F
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: node
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: B
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopes:
    - variable.other.constant
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: x
  scopes:
    - variable.other.readwrite
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: S
  scopes:
    - variable.other.constant
  scopesEnd:
    - meta.var.expr
- source: return
  scopes:
    - keyword.control.flow.return
- source: k
  scopes:
    - variable.other.readwrite
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: 'N'
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: every
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: B
  scopes:
    - variable.other.constant
- source: )
  scopes:
    - meta.brace.round
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: 'N'
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: some
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: B
  scopes:
    - variable.other.constant
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.arrow
    - meta.block
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: break
  scopes:
    - keyword.control.loop
- source: case
  scopesBegin:
    - case-clause.expr
  scopes:
    - keyword.control.switch
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: any-not-match?
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ':'
  scopes:
    - punctuation.definition.section.case-statement
- source: case
  scopes:
    - keyword.control.switch
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: not-match?
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ':'
  scopes:
    - punctuation.definition.section.case-statement
  scopesEnd:
    - case-clause.expr
- source: R
  scopes:
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: 'false'
  scopes:
    - constant.language.boolean.false
- source: case
  scopesBegin:
    - case-clause.expr
  scopes:
    - keyword.control.switch
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: any-match?
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ':'
  scopes:
    - punctuation.definition.section.case-statement
- source: case
  scopes:
    - keyword.control.switch
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: match?
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ':'
  scopes:
    - punctuation.definition.section.case-statement
  scopesEnd:
    - case-clause.expr
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: l
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
- source: '!=='
  scopes:
    - keyword.operator.comparison
- source: '3'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: throw
  scopes:
    - keyword.control.trycatch
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Error
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: '`'
  scopesBegin:
    - string.template
  scopes:
    - punctuation.definition.string.template.begin
- source: 'Wrong number of arguments to '
- source: \`
  scopes:
    - constant.character.escape
- source: '#'
- source: '${'
  scopesBegin:
    - meta.template.expression
  scopes:
    - punctuation.definition.template-expression.begin
- source: T
  scopes:
    - meta.embedded.line
    - variable.other.constant
- source: '}'
  scopes:
    - punctuation.definition.template-expression.end
  scopesEnd:
    - meta.template.expression
- source: \`
  scopes:
    - constant.character.escape
- source: ' predicate. Expected 2, got '
- source: '${'
  scopesBegin:
    - meta.template.expression
  scopes:
    - punctuation.definition.template-expression.begin
- source: l
  scopesBegin:
    - meta.embedded.line
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.embedded.line
- source: '}'
  scopes:
    - punctuation.definition.template-expression.end
  scopesEnd:
    - meta.template.expression
- source: .
- source: '`'
  scopes:
    - punctuation.definition.string.template.end
  scopesEnd:
    - string.template
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: l
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: .
  scopes:
    - punctuation.accessor
- source: type
  scopes:
    - variable.other.property
- source: '!=='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: capture
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: throw
  scopes:
    - keyword.control.trycatch
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Error
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: '`'
  scopesBegin:
    - string.template
  scopes:
    - punctuation.definition.string.template.begin
- source: 'First argument of '
- source: \`
  scopes:
    - constant.character.escape
- source: '#'
- source: '${'
  scopesBegin:
    - meta.template.expression
  scopes:
    - punctuation.definition.template-expression.begin
- source: T
  scopes:
    - meta.embedded.line
    - variable.other.constant
- source: '}'
  scopes:
    - punctuation.definition.template-expression.end
  scopesEnd:
    - meta.template.expression
- source: \`
  scopes:
    - constant.character.escape
- source: ' predicate must be a capture. Got "'
- source: '${'
  scopesBegin:
    - meta.template.expression
  scopes:
    - punctuation.definition.template-expression.begin
- source: l
  scopesBegin:
    - meta.embedded.line
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: .
  scopes:
    - punctuation.accessor
- source: value
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.embedded.line
- source: '}'
  scopes:
    - punctuation.definition.template-expression.end
  scopesEnd:
    - meta.template.expression
- source: '".'
- source: '`'
  scopes:
    - punctuation.definition.string.template.end
  scopesEnd:
    - string.template
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: l
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: .
  scopes:
    - punctuation.accessor
- source: type
  scopes:
    - variable.other.property
- source: '!=='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: string
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: throw
  scopes:
    - keyword.control.trycatch
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Error
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: '`'
  scopesBegin:
    - string.template
  scopes:
    - punctuation.definition.string.template.begin
- source: 'Second argument of '
- source: \`
  scopes:
    - constant.character.escape
- source: '#'
- source: '${'
  scopesBegin:
    - meta.template.expression
  scopes:
    - punctuation.definition.template-expression.begin
- source: T
  scopes:
    - meta.embedded.line
    - variable.other.constant
- source: '}'
  scopes:
    - punctuation.definition.template-expression.end
  scopesEnd:
    - meta.template.expression
- source: \`
  scopes:
    - constant.character.escape
- source: ' predicate must be a string. Got @'
- source: '${'
  scopesBegin:
    - meta.template.expression
  scopes:
    - punctuation.definition.template-expression.begin
- source: l
  scopesBegin:
    - meta.embedded.line
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: .
  scopes:
    - punctuation.accessor
- source: value
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.embedded.line
- source: '}'
  scopes:
    - punctuation.definition.template-expression.end
  scopesEnd:
    - meta.template.expression
- source: .
- source: '`'
  scopes:
    - punctuation.definition.string.template.end
  scopesEnd:
    - string.template
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: v
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: l
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: .
  scopes:
    - punctuation.accessor
- source: name
  scopes:
    - variable.other.property
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: H
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: RegExp
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: l
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: .
  scopes:
    - punctuation.accessor
- source: value
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
    - new.expr
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: (
  scopes:
    - meta.brace.round
- source: k
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '!'
  scopes:
    - keyword.operator.logical
- source: T
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: startsWith
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: any-
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: I
  scopes:
    - variable.other.constant
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: d
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: .
  scopesBegin:
    - meta.function-call
  scopes:
    - punctuation.accessor
- source: push
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: 'y'
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: x
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '['
  scopesBegin:
    - meta.array.literal
    - meta.brace.square
- source: ']'
  scopesEnd:
    - meta.var.expr
    - meta.array.literal
    - meta.brace.square
- source: for
  scopes:
    - keyword.control.loop
- source: (
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: E
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
  scopesEnd:
    - meta.var.expr
- source: of
  scopes:
    - keyword.operator.expression.of
- source: 'y'
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: E
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: name
  scopes:
    - variable.other.property
- source: '==='
  scopes:
    - keyword.operator.comparison
- source: v
  scopes:
    - variable.other.readwrite
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: x
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: push
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: E
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: node
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: text
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: S
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: E
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: 'N'
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: 'N'
  scopes:
    - variable.other.constant
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: H
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: test
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: E
  scopes:
    - variable.other.constant
- source: )
  scopes:
    - meta.brace.round
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: '!'
  scopes:
    - keyword.operator.logical
- source: H
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: test
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: E
  scopes:
    - variable.other.constant
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.var.expr
    - meta.brace.round
- source: return
  scopes:
    - keyword.control.flow.return
- source: x
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
- source: '==='
  scopes:
    - keyword.operator.comparison
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: '!'
  scopes:
    - keyword.operator.logical
- source: R
  scopes:
    - variable.other.constant
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: k
  scopes:
    - variable.other.readwrite
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: x
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: every
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: E
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: S
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: E
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: R
  scopes:
    - variable.other.constant
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: x
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: some
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: E
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: S
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: E
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: R
  scopes:
    - variable.other.constant
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.arrow
    - meta.block
- source: )
  scopes:
    - meta.brace.round
- source: break
  scopes:
    - keyword.control.loop
- source: case
  scopesBegin:
    - case-clause.expr
  scopes:
    - keyword.control.switch
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: set!
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ':'
  scopes:
    - punctuation.definition.section.case-statement
  scopesEnd:
    - case-clause.expr
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: l
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
- source: <
  scopes:
    - keyword.operator.relational
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: '||'
  scopes:
    - keyword.operator.logical
- source: l
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
- source: '>'
  scopes:
    - keyword.operator.relational
- source: '3'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: throw
  scopes:
    - keyword.control.trycatch
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Error
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: '`'
  scopesBegin:
    - string.template
  scopes:
    - punctuation.definition.string.template.begin
- source: 'Wrong number of arguments to '
- source: \`
  scopes:
    - constant.character.escape
- source: '#set!'
- source: \`
  scopes:
    - constant.character.escape
- source: ' predicate. Expected 1 or 2. Got '
- source: '${'
  scopesBegin:
    - meta.template.expression
  scopes:
    - punctuation.definition.template-expression.begin
- source: l
  scopesBegin:
    - meta.embedded.line
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.embedded.line
- source: '}'
  scopes:
    - punctuation.definition.template-expression.end
  scopesEnd:
    - meta.template.expression
- source: .
- source: '`'
  scopes:
    - punctuation.definition.string.template.end
  scopesEnd:
    - string.template
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: l
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: some
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: 'y'
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: 'y'
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: type
  scopes:
    - variable.other.property
- source: '!=='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: string
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: throw
  scopes:
    - keyword.control.trycatch
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Error
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: Arguments to `#set!` predicate must be a strings.".
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: w
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: d
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '||'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: w
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: d
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '{'
  scopesBegin:
    - meta.objectliteral
    - punctuation.definition.block
- source: '}'
  scopesEnd:
    - meta.objectliteral
    - punctuation.definition.block
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: w
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: d
  scopes:
    - variable.other.readwrite
- source: ']'
  scopesBegin:
    - meta.brace.square
- source: '['
  scopesEnd:
    - meta.brace.square
- source: l
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: .
  scopes:
    - punctuation.accessor
- source: value
  scopes:
    - variable.other.property
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: l
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: l
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: .
  scopes:
    - punctuation.accessor
- source: value
  scopes:
    - variable.other.property
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: 'null'
  scopes:
    - constant.language.null
- source: )
  scopes:
    - meta.brace.round
- source: break
  scopes:
    - keyword.control.loop
- source: case
  scopesBegin:
    - case-clause.expr
  scopes:
    - keyword.control.switch
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: is?
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ':'
  scopes:
    - punctuation.definition.section.case-statement
- source: case
  scopes:
    - keyword.control.switch
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: is-not?
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ':'
  scopes:
    - punctuation.definition.section.case-statement
  scopesEnd:
    - case-clause.expr
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: l
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
- source: <
  scopes:
    - keyword.operator.relational
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: '||'
  scopes:
    - keyword.operator.logical
- source: l
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
- source: '>'
  scopes:
    - keyword.operator.relational
- source: '3'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: throw
  scopes:
    - keyword.control.trycatch
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Error
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: '`'
  scopesBegin:
    - string.template
  scopes:
    - punctuation.definition.string.template.begin
- source: 'Wrong number of arguments to '
- source: \`
  scopes:
    - constant.character.escape
- source: '#'
- source: '${'
  scopesBegin:
    - meta.template.expression
  scopes:
    - punctuation.definition.template-expression.begin
- source: T
  scopes:
    - meta.embedded.line
    - variable.other.constant
- source: '}'
  scopes:
    - punctuation.definition.template-expression.end
  scopesEnd:
    - meta.template.expression
- source: \`
  scopes:
    - constant.character.escape
- source: ' predicate. Expected 1 or 2. Got '
- source: '${'
  scopesBegin:
    - meta.template.expression
  scopes:
    - punctuation.definition.template-expression.begin
- source: l
  scopesBegin:
    - meta.embedded.line
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.embedded.line
- source: '}'
  scopes:
    - punctuation.definition.template-expression.end
  scopesEnd:
    - meta.template.expression
- source: .
- source: '`'
  scopes:
    - punctuation.definition.string.template.end
  scopesEnd:
    - string.template
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: l
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: some
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: 'y'
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: 'y'
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: type
  scopes:
    - variable.other.property
- source: '!=='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: string
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: throw
  scopes:
    - keyword.control.trycatch
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Error
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: '`'
  scopesBegin:
    - string.template
  scopes:
    - punctuation.definition.string.template.begin
- source: 'Arguments to '
- source: \`
  scopes:
    - constant.character.escape
- source: '#'
- source: '${'
  scopesBegin:
    - meta.template.expression
  scopes:
    - punctuation.definition.template-expression.begin
- source: T
  scopes:
    - meta.embedded.line
    - variable.other.constant
- source: '}'
  scopes:
    - punctuation.definition.template-expression.end
  scopesEnd:
    - meta.template.expression
- source: \`
  scopes:
    - constant.character.escape
- source: ' predicate must be a strings.".'
- source: '`'
  scopes:
    - punctuation.definition.string.template.end
  scopesEnd:
    - string.template
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: V
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: T
  scopes:
    - variable.other.constant
- source: '==='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: is?
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: c
  scopes:
    - variable.other.readwrite
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: f
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.var.expr
- source: V
  scopes:
    - variable.other.constant
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: d
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '||'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: V
  scopes:
    - variable.other.constant
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: d
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '{'
  scopesBegin:
    - meta.objectliteral
    - punctuation.definition.block
- source: '}'
  scopesEnd:
    - meta.objectliteral
    - punctuation.definition.block
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: V
  scopes:
    - variable.other.constant
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: d
  scopes:
    - variable.other.readwrite
- source: ']'
  scopesBegin:
    - meta.brace.square
- source: '['
  scopesEnd:
    - meta.brace.square
- source: l
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: .
  scopes:
    - punctuation.accessor
- source: value
  scopes:
    - variable.other.property
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: l
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: l
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: .
  scopes:
    - punctuation.accessor
- source: value
  scopes:
    - variable.other.property
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: 'null'
  scopes:
    - constant.language.null
- source: )
  scopes:
    - meta.brace.round
- source: break
  scopes:
    - keyword.control.loop
- source: case
  scopesBegin:
    - case-clause.expr
  scopes:
    - keyword.control.switch
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: not-any-of?
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ':'
  scopes:
    - punctuation.definition.section.case-statement
  scopesEnd:
    - case-clause.expr
- source: R
  scopes:
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: 'false'
  scopes:
    - constant.language.boolean.false
- source: case
  scopesBegin:
    - case-clause.expr
  scopes:
    - keyword.control.switch
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: any-of?
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ':'
  scopes:
    - punctuation.definition.section.case-statement
  scopesEnd:
    - case-clause.expr
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: l
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
- source: <
  scopes:
    - keyword.operator.relational
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: throw
  scopes:
    - keyword.control.trycatch
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Error
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: '`'
  scopesBegin:
    - string.template
  scopes:
    - punctuation.definition.string.template.begin
- source: 'Wrong number of arguments to '
- source: \`
  scopes:
    - constant.character.escape
- source: '#'
- source: '${'
  scopesBegin:
    - meta.template.expression
  scopes:
    - punctuation.definition.template-expression.begin
- source: T
  scopes:
    - meta.embedded.line
    - variable.other.constant
- source: '}'
  scopes:
    - punctuation.definition.template-expression.end
  scopesEnd:
    - meta.template.expression
- source: \`
  scopes:
    - constant.character.escape
- source: ' predicate. Expected at least 1. Got '
- source: '${'
  scopesBegin:
    - meta.template.expression
  scopes:
    - punctuation.definition.template-expression.begin
- source: l
  scopesBegin:
    - meta.embedded.line
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.embedded.line
- source: '}'
  scopes:
    - punctuation.definition.template-expression.end
  scopesEnd:
    - meta.template.expression
- source: .
- source: '`'
  scopes:
    - punctuation.definition.string.template.end
  scopesEnd:
    - string.template
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: l
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: .
  scopes:
    - punctuation.accessor
- source: type
  scopes:
    - variable.other.property
- source: '!=='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: capture
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: throw
  scopes:
    - keyword.control.trycatch
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Error
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: '`'
  scopesBegin:
    - string.template
  scopes:
    - punctuation.definition.string.template.begin
- source: 'First argument of '
- source: \`
  scopes:
    - constant.character.escape
- source: '#'
- source: '${'
  scopesBegin:
    - meta.template.expression
  scopes:
    - punctuation.definition.template-expression.begin
- source: T
  scopes:
    - meta.embedded.line
    - variable.other.constant
- source: '}'
  scopes:
    - punctuation.definition.template-expression.end
  scopesEnd:
    - meta.template.expression
- source: \`
  scopes:
    - constant.character.escape
- source: ' predicate must be a capture. Got "'
- source: '${'
  scopesBegin:
    - meta.template.expression
  scopes:
    - punctuation.definition.template-expression.begin
- source: l
  scopesBegin:
    - meta.embedded.line
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: .
  scopes:
    - punctuation.accessor
- source: value
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.embedded.line
- source: '}'
  scopes:
    - punctuation.definition.template-expression.end
  scopesEnd:
    - meta.template.expression
- source: '".'
- source: '`'
  scopes:
    - punctuation.definition.string.template.end
  scopesEnd:
    - string.template
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: for
  scopes:
    - keyword.control.loop
- source: (
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: 'y'
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '2'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.var.expr
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: 'y'
  scopes:
    - variable.other.readwrite
- source: <
  scopes:
    - keyword.operator.relational
- source: l
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: 'y'
  scopes:
    - variable.other.readwrite
- source: ++
  scopes:
    - keyword.operator.increment
- source: )
  scopes:
    - meta.brace.round
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: l
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: 'y'
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: .
  scopes:
    - punctuation.accessor
- source: type
  scopes:
    - variable.other.property
- source: '!=='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: string
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: throw
  scopes:
    - keyword.control.trycatch
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Error
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: '`'
  scopesBegin:
    - string.template
  scopes:
    - punctuation.definition.string.template.begin
- source: 'Arguments to '
- source: \`
  scopes:
    - constant.character.escape
- source: '#'
- source: '${'
  scopesBegin:
    - meta.template.expression
  scopes:
    - punctuation.definition.template-expression.begin
- source: T
  scopes:
    - meta.embedded.line
    - variable.other.constant
- source: '}'
  scopes:
    - punctuation.definition.template-expression.end
  scopesEnd:
    - meta.template.expression
- source: \`
  scopes:
    - constant.character.escape
- source: ' predicate must be a strings.".'
- source: '`'
  scopes:
    - punctuation.definition.string.template.end
  scopesEnd:
    - string.template
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: v
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: l
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: .
  scopes:
    - punctuation.accessor
- source: name
  scopes:
    - variable.other.property
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: j
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: l
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: slice
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: .
  scopesBegin:
    - meta.function-call
  scopes:
    - punctuation.accessor
- source: map
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: 'y'
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: 'y'
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: value
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: I
  scopes:
    - variable.other.constant
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: d
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: .
  scopesBegin:
    - meta.function-call
  scopes:
    - punctuation.accessor
- source: push
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: 'y'
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: x
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '['
  scopesBegin:
    - meta.array.literal
    - meta.brace.square
- source: ']'
  scopesEnd:
    - meta.var.expr
    - meta.array.literal
    - meta.brace.square
- source: for
  scopes:
    - keyword.control.loop
- source: (
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: S
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
  scopesEnd:
    - meta.var.expr
- source: of
  scopes:
    - keyword.operator.expression.of
- source: 'y'
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: S
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: name
  scopes:
    - variable.other.property
- source: '==='
  scopes:
    - keyword.operator.comparison
- source: v
  scopes:
    - variable.other.readwrite
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: x
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: push
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: S
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: node
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: text
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
- source: return
  scopes:
    - keyword.control.flow.return
- source: x
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
- source: '==='
  scopes:
    - keyword.operator.comparison
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: '!'
  scopes:
    - keyword.operator.logical
- source: R
  scopes:
    - variable.other.constant
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: x
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: every
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: S
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: j
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: includes
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: S
  scopes:
    - variable.other.constant
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: '==='
  scopes:
    - keyword.operator.comparison
- source: R
  scopes:
    - variable.other.constant
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.arrow
    - meta.block
- source: )
  scopes:
    - meta.brace.round
- source: break
  scopes:
    - keyword.control.loop
- source: default
  scopesBegin:
    - case-clause.expr
  scopes:
    - keyword.control.switch
- source: ':'
  scopes:
    - punctuation.definition.section.case-statement
  scopesEnd:
    - case-clause.expr
- source: p
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: d
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: .
  scopesBegin:
    - meta.function-call
  scopes:
    - punctuation.accessor
- source: push
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.objectliteral
  scopes:
    - punctuation.definition.block
- source: operator
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: T
  scopes:
    - variable.other.constant
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: operands
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: l
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: slice
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.object.member
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.objectliteral
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - switch-block.expr
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - switch-statement.expr
- source: l
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: Object
  scopesBegin:
    - meta.function-call
  scopes:
    - support.class.builtin
- source: .
  scopes:
    - punctuation.accessor
- source: freeze
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: w
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: d
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: Object
  scopesBegin:
    - meta.function-call
  scopes:
    - support.class.builtin
- source: .
  scopes:
    - punctuation.accessor
- source: freeze
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: c
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: d
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: Object
  scopesBegin:
    - meta.function-call
  scopes:
    - support.class.builtin
- source: .
  scopes:
    - punctuation.accessor
- source: freeze
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: f
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: d
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _free
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: s
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Query
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: INTERNAL
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: r
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: u
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: I
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: p
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: Object
  scopesBegin:
    - meta.function-call
  scopes:
    - support.class.builtin
- source: .
  scopes:
    - punctuation.accessor
- source: freeze
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: w
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: Object
  scopesBegin:
    - meta.function-call
  scopes:
    - support.class.builtin
- source: .
  scopes:
    - punctuation.accessor
- source: freeze
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: c
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: Object
  scopesBegin:
    - meta.function-call
  scopes:
    - support.class.builtin
- source: .
  scopes:
    - punctuation.accessor
- source: freeze
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: f
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - new.expr
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.method.declaration
    - meta.block
- source: static
  scopes:
    - storage.modifier
- source: load
  scopesBegin:
    - meta.method.declaration
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: _
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
  scopesEnd:
    - meta.var.expr
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: instanceof
  scopes:
    - keyword.operator.expression.instanceof
- source: Uint8Array
  scopes:
    - entity.name.type
- source: )
  scopes:
    - meta.brace.round
- source: _
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Promise
  scopesBegin:
    - meta.function-call
  scopes:
    - support.class.promise
- source: .
  scopes:
    - punctuation.accessor
- source: resolve
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: else
  scopes:
    - keyword.control.conditional
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: s
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: t
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.var.expr
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: typeof
  scopes:
    - keyword.operator.expression.typeof
- source: __Process$
  scopes:
    - variable.other.readwrite
- source: <
  scopes:
    - keyword.operator.relational
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: u
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: __Process$
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: versions
  scopes:
    - variable.other.property
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: __Process$
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: versions
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: node
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: r
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Z
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: fs
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: _
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Promise
  scopesBegin:
    - meta.function-call
  scopes:
    - support.class.promise
- source: .
  scopes:
    - punctuation.accessor
- source: resolve
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: r
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: readFileSync
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: s
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.conditional
- source: _
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: fetch
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: s
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: .
  scopesBegin:
    - meta.function-call
  scopes:
    - punctuation.accessor
- source: then
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: r
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: r
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: arrayBuffer
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: .
  scopesBegin:
    - meta.function-call
  scopes:
    - punctuation.accessor
- source: then
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: a
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: r
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: ok
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
- source: return
  scopes:
    - keyword.control.flow.return
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Uint8Array
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: a
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: o
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: TextDecoder
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: utf-8
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: .
  scopesBegin:
    - meta.function-call
  scopes:
    - punctuation.accessor
- source: decode
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: a
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: throw
  scopes:
    - keyword.control.trycatch
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Error
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: '`'
  scopesBegin:
    - string.template
  scopes:
    - punctuation.definition.string.template.begin
- source: 'Language.load failed with status '
- source: '${'
  scopesBegin:
    - meta.template.expression
  scopes:
    - punctuation.definition.template-expression.begin
- source: r
  scopesBegin:
    - meta.embedded.line
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: status
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.embedded.line
- source: '}'
  scopes:
    - punctuation.definition.template-expression.end
  scopesEnd:
    - meta.template.expression
- source: .
- source: \n
  scopesBegin:
    - constant.character.escape
- source: \n
  scopesEnd:
    - constant.character.escape
- source: '${'
  scopesBegin:
    - meta.template.expression
  scopes:
    - punctuation.definition.template-expression.begin
- source: o
  scopes:
    - meta.embedded.line
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.template-expression.end
  scopesEnd:
    - meta.template.expression
- source: '`'
  scopes:
    - punctuation.definition.string.template.end
  scopesEnd:
    - string.template
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.arrow
    - meta.block
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: _
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: then
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: s
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: loadWebAssemblyModule
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: s
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '{'
  scopesBegin:
    - meta.objectliteral
  scopes:
    - punctuation.definition.block
- source: loadAsync
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: 'true'
  scopes:
    - constant.language.boolean.true
  scopesEnd:
    - meta.object.member
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.objectliteral
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: .
  scopesBegin:
    - meta.function-call
  scopes:
    - punctuation.accessor
- source: then
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: s
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: r
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Object
  scopesBegin:
    - meta.function-call
  scopes:
    - support.class.builtin
- source: .
  scopes:
    - punctuation.accessor
- source: keys
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: s
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: a
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: r
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: find
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: 'n'
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: LANGUAGE_FUNCTION_REGEX
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: test
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: 'n'
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '&&'
  scopesBegin:
    - keyword.operator.logical
- source: '!'
  scopesEnd:
    - keyword.operator.logical
- source: 'n'
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: includes
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: external_scanner_
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.var.expr
    - meta.brace.round
- source: a
  scopes:
    - variable.other.readwrite
- source: '||'
  scopes:
    - keyword.operator.logical
- source: console
  scopesBegin:
    - meta.function-call
  scopes:
    - support.class.console
- source: .
  scopes:
    - punctuation.accessor
- source: log
  scopes:
    - support.function.console
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: '`'
  scopesBegin:
    - string.template
  scopes:
    - punctuation.definition.string.template.begin
- source: 'Couldn''t find language function in WASM file. Symbols:'
- source: \n
  scopes:
    - constant.character.escape
- source: '${'
  scopesBegin:
    - meta.template.expression
  scopes:
    - punctuation.definition.template-expression.begin
- source: JSON
  scopesBegin:
    - meta.embedded.line
    - meta.function-call
  scopes:
    - support.constant.json
- source: .
  scopes:
    - punctuation.accessor
- source: stringify
  scopes:
    - support.function.json
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: r
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: 'null'
  scopes:
    - constant.language.null
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.embedded.line
- source: '}'
  scopes:
    - punctuation.definition.template-expression.end
  scopesEnd:
    - meta.template.expression
- source: '`'
  scopes:
    - punctuation.definition.string.template.end
  scopesEnd:
    - string.template
- source: )
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: o
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: s
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: a
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.var.expr
    - meta.brace.round
- source: return
  scopes:
    - keyword.control.flow.return
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Language
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: INTERNAL
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: o
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.arrow
    - meta.block
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.method.declaration
    - meta.block
- source: '}'
  scopes:
    - punctuation.definition.block
- source: export
  scopes:
    - keyword.control.export
- source: class
  scopes:
    - storage.type.class
- source: LookaheadIterable
  scopes:
    - entity.name.type.class
- source: '{'
  scopes:
    - punctuation.definition.block
- source: constructor
  scopesBegin:
    - meta.method.declaration
  scopes:
    - storage.type
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: _
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: s
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: assertInternal
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: language
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: s
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: get
  scopes:
    - storage.type.property
- source: currentTypeId
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_lookahead_iterator_current_symbol
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: get
  scopes:
    - storage.type.property
- source: currentType
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: language
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: types
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: currentTypeId
  scopes:
    - variable.other.property
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '||'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ERROR
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: delete
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_lookahead_iterator_delete
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: resetState
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_lookahead_iterator_reset_state
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: reset
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: _
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: '!'
  scopesBegin:
    - keyword.operator.logical
- source: '!'
  scopesEnd:
    - keyword.operator.logical
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_lookahead_iterator_reset
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: (
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: language
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: 'true'
  scopes:
    - constant.language.boolean.true
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: Symbol
  scopes:
    - support.class.builtin
- source: .
  scopes:
    - punctuation.accessor
- source: iterator
  scopes:
    - variable.other.property
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: t
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: this
  scopes:
    - variable.language.this
  scopesEnd:
    - meta.var.expr
- source: return
  scopes:
    - keyword.control.flow.return
- source: '{'
  scopesBegin:
    - meta.objectliteral
  scopes:
    - punctuation.definition.block
- source: next
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
  scopes:
    - entity.name.function
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: (
  scopes:
    - meta.brace.round
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_lookahead_iterator_next
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: '{'
  scopesBegin:
    - meta.objectliteral
  scopes:
    - punctuation.definition.block
- source: done
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: 'false'
  scopes:
    - constant.language.boolean.false
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: value
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: t
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: currentType
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.object.member
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.objectliteral
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: '{'
  scopesBegin:
    - meta.objectliteral
  scopes:
    - punctuation.definition.block
- source: done
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: 'true'
  scopes:
    - constant.language.boolean.true
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: value
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.object.member
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.objectliteral
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.object.member
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.objectliteral
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.method.declaration
    - meta.block
- source: '}'
  scopes:
    - punctuation.definition.block
- source: export
  scopes:
    - keyword.control.export
- source: class
  scopes:
    - storage.type.class
- source: Query
  scopes:
    - entity.name.type.class
- source: '{'
  scopes:
    - punctuation.definition.block
- source: constructor
  scopesBegin:
    - meta.method.declaration
  scopes:
    - storage.type
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: _
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: s
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: r
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: a
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: o
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: 'n'
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: u
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: assertInternal
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: captureNames
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: s
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: textPredicates
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: r
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: predicates
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: a
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: setProperties
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: o
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: assertedProperties
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: 'n'
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: refutedProperties
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: u
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: exceededMatchLimit
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: 'false'
  scopes:
    - constant.language.boolean.false
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: delete
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_query_delete
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: matches
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: '{'
  scopesBegin:
    - meta.parameter.object-binding-pattern
  scopes:
    - punctuation.definition.binding-pattern.object
- source: startPosition
  scopes:
    - variable.object.property
- source: ':'
  scopes:
    - punctuation.destructuring
- source: _
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ZERO_POINT
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: endPosition
  scopes:
    - variable.object.property
- source: ':'
  scopes:
    - punctuation.destructuring
- source: s
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ZERO_POINT
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: startIndex
  scopes:
    - variable.object.property
- source: ':'
  scopes:
    - punctuation.destructuring
- source: r
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: endIndex
  scopes:
    - variable.object.property
- source: ':'
  scopes:
    - punctuation.destructuring
- source: a
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: matchLimit
  scopes:
    - variable.object.property
- source: ':'
  scopes:
    - punctuation.destructuring
- source: o
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '4294967295'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: maxStartDepth
  scopes:
    - variable.object.property
- source: ':'
  scopes:
    - punctuation.destructuring
- source: 'n'
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '4294967295'
  scopes:
    - constant.numeric.decimal
- source: '}'
  scopes:
    - punctuation.definition.binding-pattern.object
  scopesEnd:
    - meta.parameter.object-binding-pattern
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '{'
  scopesBegin:
    - meta.objectliteral
    - punctuation.definition.block
- source: '}'
  scopesEnd:
    - meta.objectliteral
    - punctuation.definition.block
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: typeof
  scopes:
    - keyword.operator.expression.typeof
- source: o
  scopes:
    - variable.other.readwrite
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: throw
  scopes:
    - keyword.control.trycatch
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Error
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Arguments must be numbers
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: marshalNode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_query_matches_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: row
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: column
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.comma
- source: s
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: row
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.comma
- source: s
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: column
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.comma
- source: r
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: a
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: o
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: 'n'
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: u
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: getValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: TRANSFER_BUFFER
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: m
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: getValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: TRANSFER_BUFFER
  scopes:
    - variable.other.constant
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: SIZE_OF_INT
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: w
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: getValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: TRANSFER_BUFFER
  scopes:
    - variable.other.constant
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: SIZE_OF_INT
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: c
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Array
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: u
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
    - new.expr
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: exceededMatchLimit
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '!'
  scopesBegin:
    - keyword.operator.logical
- source: '!'
  scopesEnd:
    - keyword.operator.logical
- source: w
  scopes:
    - variable.other.readwrite
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: f
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: p
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: m
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.var.expr
- source: for
  scopes:
    - keyword.control.loop
- source: (
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: I
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.var.expr
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: I
  scopes:
    - variable.other.constant
- source: <
  scopes:
    - keyword.operator.relational
- source: u
  scopes:
    - variable.other.readwrite
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: I
  scopes:
    - variable.other.constant
- source: ++
  scopes:
    - keyword.operator.increment
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: d
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: getValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: p
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: p
  scopes:
    - variable.other.readwrite
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: SIZE_OF_INT
  scopes:
    - variable.other.constant
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: b
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: getValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: p
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: p
  scopes:
    - variable.other.readwrite
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: SIZE_OF_INT
  scopes:
    - variable.other.constant
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: h
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Array
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: b
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
    - new.expr
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopesBegin:
    - meta.brace.round
- source: (
- source: (
  scopesEnd:
    - meta.brace.round
- source: p
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: unmarshalCaptures
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.comma
- source: p
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: h
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: textPredicates
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: d
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: .
  scopesBegin:
    - meta.function-call
  scopes:
    - punctuation.accessor
- source: every
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: l
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: l
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: h
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
- source: )
- source: )
  scopesEnd:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: c
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: f
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '{'
  scopesBegin:
    - meta.objectliteral
  scopes:
    - punctuation.definition.block
- source: pattern
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: d
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: captures
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: h
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.object.member
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.objectliteral
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: l
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: setProperties
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: d
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.var.expr
    - meta.array.literal
- source: l
  scopes:
    - variable.other.readwrite
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: c
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: f
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: .
  scopes:
    - punctuation.accessor
- source: setProperties
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: l
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: g
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: assertedProperties
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: d
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.var.expr
    - meta.array.literal
- source: g
  scopes:
    - variable.other.readwrite
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: c
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: f
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: .
  scopes:
    - punctuation.accessor
- source: assertedProperties
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: g
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: M
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: refutedProperties
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: d
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.var.expr
    - meta.array.literal
- source: M
  scopes:
    - variable.other.constant
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: c
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: f
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: .
  scopes:
    - punctuation.accessor
- source: refutedProperties
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: M
  scopes:
    - variable.other.constant
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: f
  scopes:
    - variable.other.readwrite
- source: ++
  scopes:
    - keyword.operator.increment
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: (
  scopes:
    - meta.brace.round
- source: c
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: f
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _free
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: m
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: c
  scopes:
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: '*'
  scopes:
    - keyword.generator.asterisk
- source: iterMatches
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: startPosition
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: 'null'
  scopes:
    - constant.language.null
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: endPosition
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: 'null'
  scopes:
    - constant.language.null
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: options
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: defaultValues
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '{'
  scopesBegin:
    - meta.objectliteral
  scopes:
    - punctuation.definition.block
- source: startPosition
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: (
  scopes:
    - meta.brace.round
- source: _
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ZERO_POINT
  scopes:
    - variable.other.constant
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: endPosition
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: (
  scopes:
    - meta.brace.round
- source: s
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ZERO_POINT
  scopes:
    - variable.other.constant
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: startIndex
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: (
  scopes:
    - meta.brace.round
- source: r
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: endIndex
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: (
  scopes:
    - meta.brace.round
- source: a
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: matchLimit
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: (
  scopes:
    - meta.brace.round
- source: o
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '4294967295'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: maxStartDepth
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: (
  scopes:
    - meta.brace.round
- source: 'n'
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '4294967295'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.object.member
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.var.expr
    - meta.objectliteral
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: originalStart
  scopes:
    - variable.other.readwrite
- source: instanceof
  scopes:
    - keyword.operator.expression.instanceof
- source: Object
  scopes:
    - entity.name.type
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: originalStart
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: row
  scopes:
    - variable.other.property
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: undefined
  scopes:
    - constant.language.undefined
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: '{'
  scopesBegin:
    - meta.object-binding-pattern-variable
  scopes:
    - punctuation.definition.binding-pattern.object
- source: startPosition
  scopes:
    - meta.definition.variable
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: endPosition
  scopes:
    - meta.definition.variable
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: matchLimit
  scopes:
    - meta.definition.variable
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: startIndex
  scopes:
    - meta.definition.variable
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: endIndex
  scopes:
    - meta.definition.variable
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: maxStartDepth
  scopes:
    - meta.definition.variable
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.binding-pattern.object
  scopesEnd:
    - meta.object-binding-pattern-variable
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '{'
  scopesBegin:
    - meta.objectliteral
  scopes:
    - punctuation.definition.block
- source: ...
  scopesBegin:
    - meta.object.member
  scopes:
    - keyword.operator.spread
- source: defaultValues
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ...
  scopesBegin:
    - meta.object.member
  scopes:
    - keyword.operator.spread
- source: options
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ...
  scopesBegin:
    - meta.object.member
  scopes:
    - keyword.operator.spread
- source: startPosition
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.object.member
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.var.expr
    - meta.objectliteral
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.conditional
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: var
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: values
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '{'
  scopesBegin:
    - meta.objectliteral
  scopes:
    - punctuation.definition.block
- source: ...
  scopesBegin:
    - meta.object.member
  scopes:
    - keyword.operator.spread
- source: defaultValues
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ...
  scopesBegin:
    - meta.object.member
  scopes:
    - keyword.operator.spread
- source: options
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.object.member
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.objectliteral
- source: var
  scopes:
    - storage.type
- source: '{'
  scopesBegin:
    - meta.object-binding-pattern-variable
  scopes:
    - punctuation.definition.binding-pattern.object
- source: matchLimit
  scopes:
    - meta.definition.variable
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: startIndex
  scopes:
    - meta.definition.variable
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: endIndex
  scopes:
    - meta.definition.variable
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: maxStartDepth
  scopes:
    - meta.definition.variable
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.binding-pattern.object
  scopesEnd:
    - meta.object-binding-pattern-variable
- source: '='
  scopes:
    - keyword.operator.assignment
- source: values
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.var.expr
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: endPosition
  scopes:
    - variable.other.readwrite
- source: '==='
  scopes:
    - keyword.operator.comparison
- source: 'null'
  scopes:
    - constant.language.null
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: endPosition
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: values
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: endPosition
  scopes:
    - variable.other.property
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: matchLimit
  scopes:
    - variable.other.readwrite
- source: '==='
  scopes:
    - keyword.operator.comparison
- source: void
  scopes:
    - keyword.operator.expression.void
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: matchLimit
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: typeof
  scopes:
    - keyword.operator.expression.typeof
- source: matchLimit
  scopes:
    - variable.other.readwrite
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: throw
  scopes:
    - keyword.control.trycatch
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Error
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Arguments must be numbers
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: marshalNode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_query_matches_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: row
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: column
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.comma
- source: endPosition
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: row
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.comma
- source: endPosition
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: column
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.comma
- source: r
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: a
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: matchLimit
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: maxStartDepth
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: u
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: getValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: TRANSFER_BUFFER
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: m
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: getValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: TRANSFER_BUFFER
  scopes:
    - variable.other.constant
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: SIZE_OF_INT
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: w
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: getValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: TRANSFER_BUFFER
  scopes:
    - variable.other.constant
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: SIZE_OF_INT
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: exceededMatchLimit
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '!'
  scopesBegin:
    - keyword.operator.logical
- source: '!'
  scopesEnd:
    - keyword.operator.logical
- source: w
  scopes:
    - variable.other.readwrite
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: p
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: m
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.var.expr
- source: for
  scopes:
    - keyword.control.loop
- source: (
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: I
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.var.expr
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: I
  scopes:
    - variable.other.constant
- source: <
  scopes:
    - keyword.operator.relational
- source: u
  scopes:
    - variable.other.readwrite
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: I
  scopes:
    - variable.other.constant
- source: ++
  scopes:
    - keyword.operator.increment
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: d
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: getValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: p
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: p
  scopes:
    - variable.other.readwrite
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: SIZE_OF_INT
  scopes:
    - variable.other.constant
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: b
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: getValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: p
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: p
  scopes:
    - variable.other.readwrite
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: SIZE_OF_INT
  scopes:
    - variable.other.constant
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: h
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Array
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: b
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
    - new.expr
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopesBegin:
    - meta.brace.round
- source: (
- source: (
  scopesEnd:
    - meta.brace.round
- source: p
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: unmarshalCaptures
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.comma
- source: p
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: h
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: textPredicates
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: d
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: .
  scopesBegin:
    - meta.function-call
  scopes:
    - punctuation.accessor
- source: every
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: l
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: l
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: h
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
- source: )
- source: )
  scopesEnd:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: const
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: item
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '{'
  scopesBegin:
    - meta.objectliteral
  scopes:
    - punctuation.definition.block
- source: pattern
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: d
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: captures
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: h
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.object.member
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.objectliteral
- source: let
  scopes:
    - storage.type
- source: l
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: setProperties
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: d
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.var.expr
    - meta.array.literal
- source: l
  scopes:
    - variable.other.readwrite
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: item
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: setProperties
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: l
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: g
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: assertedProperties
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: d
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.var.expr
    - meta.array.literal
- source: g
  scopes:
    - variable.other.readwrite
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: item
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: assertedProperties
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: g
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: M
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: refutedProperties
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: d
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.var.expr
    - meta.array.literal
- source: M
  scopes:
    - variable.other.constant
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: item
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: refutedProperties
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: M
  scopes:
    - variable.other.constant
- source: )
  scopes:
    - meta.brace.round
- source: yield
  scopes:
    - keyword.control.flow.yield
- source: item
  scopes:
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _free
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: m
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: captures
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: '{'
  scopesBegin:
    - meta.parameter.object-binding-pattern
  scopes:
    - punctuation.definition.binding-pattern.object
- source: startPosition
  scopes:
    - variable.object.property
- source: ':'
  scopes:
    - punctuation.destructuring
- source: _
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ZERO_POINT
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: endPosition
  scopes:
    - variable.object.property
- source: ':'
  scopes:
    - punctuation.destructuring
- source: s
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ZERO_POINT
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: startIndex
  scopes:
    - variable.object.property
- source: ':'
  scopes:
    - punctuation.destructuring
- source: r
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: endIndex
  scopes:
    - variable.object.property
- source: ':'
  scopes:
    - punctuation.destructuring
- source: a
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: matchLimit
  scopes:
    - variable.object.property
- source: ':'
  scopes:
    - punctuation.destructuring
- source: o
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '4294967295'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: maxStartDepth
  scopes:
    - variable.object.property
- source: ':'
  scopes:
    - punctuation.destructuring
- source: 'n'
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '4294967295'
  scopes:
    - constant.numeric.decimal
- source: '}'
  scopes:
    - punctuation.definition.binding-pattern.object
  scopesEnd:
    - meta.parameter.object-binding-pattern
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '{'
  scopesBegin:
    - meta.objectliteral
    - punctuation.definition.block
- source: '}'
  scopesEnd:
    - meta.objectliteral
    - punctuation.definition.block
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: typeof
  scopes:
    - keyword.operator.expression.typeof
- source: o
  scopes:
    - variable.other.readwrite
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: throw
  scopes:
    - keyword.control.trycatch
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Error
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Arguments must be numbers
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: marshalNode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_query_captures_wasm
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: row
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: column
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.comma
- source: s
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: row
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.comma
- source: s
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: column
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.comma
- source: r
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: a
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: o
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: 'n'
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: u
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: getValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: TRANSFER_BUFFER
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: m
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: getValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: TRANSFER_BUFFER
  scopes:
    - variable.other.constant
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: SIZE_OF_INT
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: w
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: getValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: TRANSFER_BUFFER
  scopes:
    - variable.other.constant
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: SIZE_OF_INT
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: c
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '['
  scopesBegin:
    - meta.array.literal
    - meta.brace.square
- source: ']'
  scopesEnd:
    - meta.var.expr
    - meta.array.literal
    - meta.brace.square
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: exceededMatchLimit
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '!'
  scopesBegin:
    - keyword.operator.logical
- source: '!'
  scopesEnd:
    - keyword.operator.logical
- source: w
  scopes:
    - variable.other.readwrite
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: f
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '['
  scopesBegin:
    - meta.array.literal
    - meta.brace.square
- source: ']'
  scopesEnd:
    - meta.array.literal
    - meta.brace.square
- source: ','
  scopes:
    - punctuation.separator.comma
- source: p
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: m
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.var.expr
- source: for
  scopes:
    - keyword.control.loop
- source: (
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: I
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.var.expr
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: I
  scopes:
    - variable.other.constant
- source: <
  scopes:
    - keyword.operator.relational
- source: u
  scopes:
    - variable.other.readwrite
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: I
  scopes:
    - variable.other.constant
- source: ++
  scopes:
    - keyword.operator.increment
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: d
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: getValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: p
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: p
  scopes:
    - variable.other.readwrite
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: SIZE_OF_INT
  scopes:
    - variable.other.constant
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: b
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: getValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: p
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: p
  scopes:
    - variable.other.readwrite
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: SIZE_OF_INT
  scopes:
    - variable.other.constant
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: h
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: getValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: p
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopesBegin:
    - meta.brace.round
- source: (
- source: (
  scopesEnd:
    - meta.brace.round
- source: p
  scopes:
    - variable.other.readwrite
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: SIZE_OF_INT
  scopes:
    - variable.other.constant
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: f
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: b
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: p
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: unmarshalCaptures
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: tree
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.comma
- source: p
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: f
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: textPredicates
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: d
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: .
  scopesBegin:
    - meta.function-call
  scopes:
    - punctuation.accessor
- source: every
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: l
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: l
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: f
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
- source: )
- source: )
  scopesEnd:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: l
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: f
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: h
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: g
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: setProperties
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: d
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.var.expr
    - meta.array.literal
- source: g
  scopes:
    - variable.other.readwrite
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: l
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: setProperties
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: g
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: M
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: assertedProperties
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: d
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.var.expr
    - meta.array.literal
- source: M
  scopes:
    - variable.other.constant
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: l
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: assertedProperties
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: M
  scopes:
    - variable.other.constant
- source: )
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: U
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.constant
- source: '='
  scopes:
    - keyword.operator.assignment
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: refutedProperties
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: d
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.var.expr
    - meta.array.literal
- source: U
  scopes:
    - variable.other.constant
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: l
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: refutedProperties
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: U
  scopes:
    - variable.other.constant
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: c
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: push
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: l
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _free
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: m
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: c
  scopes:
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: predicatesForPattern
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: predicates
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: t
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: disableCapture
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: _
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: lengthBytesUTF8
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: s
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _malloc
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: _
  scopes:
    - variable.other.readwrite
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: stringToUTF8
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: s
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _ts_query_disable_capture
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: this
  scopes:
    - variable.language.this
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: s
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: C
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.constant.object
- source: .
  scopes:
    - punctuation.accessor
- source: _free
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: s
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: didExceedMatchLimit
  scopes:
    - meta.definition.method
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: this
  scopes:
    - variable.language.this
- source: .
  scopes:
    - punctuation.accessor
- source: exceededMatchLimit
  scopes:
    - variable.other.property
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.method.declaration
    - meta.block
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.class
- source: //
  scopesBegin:
    - comment.line.double-slash
    - punctuation.definition.comment
- source: //
- source: //
  scopesEnd:
    - punctuation.definition.comment
- source: ' helpers'
- source: //
  scopesBegin:
    - punctuation.definition.comment
- source: //
  scopesEnd:
    - comment.line.double-slash
    - punctuation.definition.comment
- source: function
  scopesBegin:
    - meta.function
  scopes:
    - storage.type.function
- source: getText
  scopes:
    - meta.definition.function
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: _
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: s
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: _
  scopes:
    - variable.other.readwrite
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: r
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: e
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: textCallback
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: 'null'
  scopes:
    - constant.language.null
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: for
  scopes:
    - keyword.control.loop
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: r
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: t
  scopes:
    - variable.other.readwrite
- source: <
  scopes:
    - keyword.operator.relational
- source: _
  scopes:
    - variable.other.readwrite
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: a
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: e
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: textCallback
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: 'null'
  scopes:
    - constant.language.null
- source: ','
  scopes:
    - punctuation.separator.comma
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: a
  scopes:
    - variable.other.readwrite
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: a
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
- source: '>'
  scopes:
    - keyword.operator.relational
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: break
  scopes:
    - keyword.control.loop
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: a
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: r
  scopes:
    - variable.other.readwrite
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: a
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: t
  scopes:
    - variable.other.readwrite
- source: '>'
  scopes:
    - keyword.operator.relational
- source: _
  scopes:
    - variable.other.readwrite
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: (
  scopes:
    - meta.brace.round
- source: r
  scopes:
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: r
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: slice
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopes:
    - meta.brace.round
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: s
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: r
  scopes:
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: function
  scopes:
    - storage.type.function
- source: unmarshalCaptures
  scopes:
    - meta.definition.function
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: _
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: s
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: for
  scopes:
    - keyword.control.loop
- source: (
  scopes:
    - meta.brace.round
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: r
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: a
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: s
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: length
  scopes:
    - support.variable.property
  scopesEnd:
    - meta.var.expr
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: r
  scopes:
    - variable.other.readwrite
- source: <
  scopes:
    - keyword.operator.relational
- source: a
  scopes:
    - variable.other.readwrite
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: r
  scopes:
    - variable.other.readwrite
- source: ++
  scopes:
    - keyword.operator.increment
- source: )
  scopes:
    - meta.brace.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: o
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: getValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: _
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: 'n'
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: unmarshalNode
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: _
  scopes:
    - variable.other.readwrite
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: SIZE_OF_INT
  scopes:
    - variable.other.constant
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.var.expr
    - meta.brace.round
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: (
  scopes:
    - meta.brace.round
- source: _
  scopes:
    - variable.other.readwrite
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: SIZE_OF_NODE
  scopes:
    - variable.other.constant
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: s
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: r
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '{'
  scopesBegin:
    - meta.objectliteral
  scopes:
    - punctuation.definition.block
- source: name
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: e
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: captureNames
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: o
  scopes:
    - variable.other.readwrite
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.object.member
    - meta.array.literal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: node
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: 'n'
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.object.member
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.objectliteral
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: _
  scopes:
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: function
  scopes:
    - storage.type.function
- source: assertInternal
  scopes:
    - meta.definition.function
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: '!=='
  scopes:
    - keyword.operator.comparison
- source: INTERNAL
  scopes:
    - variable.other.constant
- source: )
  scopes:
    - meta.brace.round
- source: throw
  scopes:
    - keyword.control.trycatch
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Error
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Illegal constructor
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - new.expr
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: function
  scopes:
    - storage.type.function
- source: isPoint
  scopes:
    - meta.definition.function
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: e
  scopes:
    - variable.other.readwrite
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: typeof
  scopes:
    - keyword.operator.expression.typeof
- source: e
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: row
  scopes:
    - variable.other.property
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: typeof
  scopes:
    - keyword.operator.expression.typeof
- source: e
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: column
  scopes:
    - variable.other.property
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: function
  scopes:
    - storage.type.function
- source: marshalNode
  scopes:
    - meta.definition.function
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: t
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: TRANSFER_BUFFER
  scopes:
    - variable.other.constant
  scopesEnd:
    - meta.var.expr
- source: setValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: e
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: id
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: SIZE_OF_INT
  scopes:
    - variable.other.constant
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: setValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: e
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: startIndex
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: SIZE_OF_INT
  scopes:
    - variable.other.constant
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: setValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: e
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: startPosition
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: row
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: SIZE_OF_INT
  scopes:
    - variable.other.constant
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: setValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: e
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: startPosition
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.accessor
- source: column
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: SIZE_OF_INT
  scopes:
    - variable.other.constant
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: setValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: e
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: function
  scopes:
    - storage.type.function
- source: unmarshalNode
  scopes:
    - meta.definition.function
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: TRANSFER_BUFFER
  scopes:
    - variable.other.constant
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: _
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: getValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
- source: if
  scopes:
    - keyword.control.conditional
- source: (
  scopes:
    - meta.brace.round
- source: _
  scopes:
    - variable.other.readwrite
- source: '==='
  scopes:
    - keyword.operator.comparison
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: return
  scopes:
    - keyword.control.flow.return
- source: 'null'
  scopes:
    - constant.language.null
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: s
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: getValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: SIZE_OF_INT
  scopes:
    - variable.other.constant
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: r
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: getValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: SIZE_OF_INT
  scopes:
    - variable.other.constant
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: a
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: getValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: SIZE_OF_INT
  scopes:
    - variable.other.constant
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: o
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: getValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: SIZE_OF_INT
  scopes:
    - variable.other.constant
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: 'n'
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: new
  scopesBegin:
    - new.expr
  scopes:
    - keyword.operator.new
- source: Node
  scopes:
    - entity.name.type
- source: (
  scopes:
    - meta.brace.round
- source: INTERNAL
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
  scopesEnd:
    - meta.var.expr
    - new.expr
- source: return
  scopes:
    - keyword.control.flow.return
- source: (
  scopes:
    - meta.brace.round
- source: 'n'
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: id
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: _
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: 'n'
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: startIndex
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: s
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: 'n'
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: startPosition
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '{'
  scopesBegin:
    - meta.objectliteral
  scopes:
    - punctuation.definition.block
- source: row
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: r
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: column
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: a
  scopes:
    - variable.other.readwrite
  scopesEnd:
    - meta.object.member
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.objectliteral
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: 'n'
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: o
  scopes:
    - variable.other.readwrite
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: 'n'
  scopes:
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: function
  scopes:
    - storage.type.function
- source: marshalTreeCursor
  scopes:
    - meta.definition.function
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: TRANSFER_BUFFER
  scopes:
    - variable.other.constant
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: setValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: SIZE_OF_INT
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: e
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: setValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: SIZE_OF_INT
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: e
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: setValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: SIZE_OF_INT
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: e
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: setValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '3'
  scopes:
    - constant.numeric.decimal
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: SIZE_OF_INT
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: e
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '3'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: function
  scopes:
    - storage.type.function
- source: unmarshalTreeCursor
  scopes:
    - meta.definition.function
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: getValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: TRANSFER_BUFFER
  scopes:
    - variable.other.constant
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: SIZE_OF_INT
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: getValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: TRANSFER_BUFFER
  scopes:
    - variable.other.constant
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: SIZE_OF_INT
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: getValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: TRANSFER_BUFFER
  scopes:
    - variable.other.constant
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: SIZE_OF_INT
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: '['
  scopesBegin:
    - meta.array.literal
  scopes:
    - meta.brace.square
- source: '3'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - meta.brace.square
  scopesEnd:
    - meta.array.literal
- source: '='
  scopes:
    - keyword.operator.assignment
- source: getValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: TRANSFER_BUFFER
  scopes:
    - variable.other.constant
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '3'
  scopes:
    - constant.numeric.decimal
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: SIZE_OF_INT
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: function
  scopes:
    - storage.type.function
- source: marshalPoint
  scopes:
    - meta.definition.function
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: setValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: row
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: setValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: SIZE_OF_INT
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: column
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: function
  scopes:
    - storage.type.function
- source: unmarshalPoint
  scopes:
    - meta.definition.function
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: '{'
  scopesBegin:
    - meta.objectliteral
  scopes:
    - punctuation.definition.block
- source: row
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: getValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: '>>>'
  scopes:
    - keyword.operator.bitwise.shift
- source: '0'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.object.member
- source: ','
  scopes:
    - punctuation.separator.comma
- source: column
  scopesBegin:
    - meta.object.member
    - meta.object-literal.key
- source: ':'
  scopes:
    - punctuation.separator.key-value
  scopesEnd:
    - meta.object-literal.key
- source: getValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: SIZE_OF_INT
  scopes:
    - variable.other.constant
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: '>>>'
  scopes:
    - keyword.operator.bitwise.shift
- source: '0'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.object.member
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.objectliteral
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: function
  scopes:
    - storage.type.function
- source: marshalRange
  scopes:
    - meta.definition.function
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.parameter
- source: t
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: marshalPoint
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: startPosition
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: marshalPoint
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: SIZE_OF_POINT
  scopes:
    - variable.other.constant
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: endPosition
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: setValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: SIZE_OF_POINT
  scopes:
    - variable.other.constant
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: startIndex
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: setValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopesBegin:
    - meta.brace.round
- source: (
  scopesEnd:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: SIZE_OF_INT
  scopes:
    - variable.other.constant
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: endIndex
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: SIZE_OF_INT
  scopes:
    - variable.other.constant
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: function
  scopes:
    - storage.type.function
- source: unmarshalRange
  scopes:
    - meta.definition.function
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: t
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '{'
  scopesBegin:
    - meta.objectliteral
    - punctuation.definition.block
- source: '}'
  scopesEnd:
    - meta.var.expr
    - meta.objectliteral
    - punctuation.definition.block
- source: return
  scopes:
    - keyword.control.flow.return
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: startPosition
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: unmarshalPoint
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: SIZE_OF_POINT
  scopes:
    - variable.other.constant
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: endPosition
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: unmarshalPoint
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: )
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: SIZE_OF_POINT
  scopes:
    - variable.other.constant
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: startIndex
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: getValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: '>>>'
  scopes:
    - keyword.operator.bitwise.shift
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: SIZE_OF_INT
  scopes:
    - variable.other.constant
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: endIndex
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: getValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: e
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: '>>>'
  scopes:
    - keyword.operator.bitwise.shift
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: t
  scopes:
    - variable.other.readwrite
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.block
- source: function
  scopes:
    - storage.type.function
- source: marshalEdit
  scopes:
    - meta.definition.function
    - entity.name.function
- source: (
  scopesBegin:
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: e
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.definition.block
- source: let
  scopesBegin:
    - meta.var.expr
  scopes:
    - storage.type
- source: t
  scopes:
    - meta.var-single-variable.expr
    - meta.definition.variable
    - variable.other.readwrite
- source: '='
  scopes:
    - keyword.operator.assignment
- source: TRANSFER_BUFFER
  scopes:
    - variable.other.constant
  scopesEnd:
    - meta.var.expr
- source: marshalPoint
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: e
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: startPosition
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: SIZE_OF_POINT
  scopes:
    - variable.other.constant
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: marshalPoint
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: e
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: oldEndPosition
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: SIZE_OF_POINT
  scopes:
    - variable.other.constant
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: marshalPoint
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: e
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: newEndPosition
  scopes:
    - variable.other.property
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: SIZE_OF_POINT
  scopes:
    - variable.other.constant
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: setValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: e
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: startIndex
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: SIZE_OF_INT
  scopes:
    - variable.other.constant
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: setValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: e
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: oldEndIndex
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: SIZE_OF_INT
  scopes:
    - variable.other.constant
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: setValue
  scopes:
    - meta.function-call
    - entity.name.function
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: ','
  scopes:
    - punctuation.separator.comma
- source: e
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: newEndIndex
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: i32
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - meta.brace.round
- source: ','
  scopes:
    - punctuation.separator.comma
- source: (
  scopes:
    - meta.brace.round
- source: t
  scopes:
    - variable.other.readwrite
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: SIZE_OF_INT
  scopes:
    - variable.other.constant
- source: )
  scopes:
    - meta.brace.round
- source: '}'
  scopes:
    - punctuation.definition.block
  scopesEnd:
    - meta.function
    - meta.block
- source: Parser
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: Language
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Language
  scopes:
    - variable.other.readwrite
- source: Module
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: onRuntimeInitialized
  scopes:
    - entity.name.function
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.arrow
    - meta.parameters
  scopes:
    - punctuation.definition.parameters.begin
- source: )
  scopes:
    - punctuation.definition.parameters.end
  scopesEnd:
    - meta.parameters
- source: '=>'
  scopes:
    - storage.type.function.arrow
  scopesEnd:
    - meta.arrow
- source: Parser
  scopesBegin:
    - meta.function-call
  scopes:
    - variable.other.object
- source: .
  scopes:
    - punctuation.accessor
- source: init
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function-call
- source: (
  scopesBegin:
    - meta.brace.round
- source: )
  scopesEnd:
    - meta.brace.round
- source: export
  scopesBegin:
    - meta.export.default
  scopes:
    - keyword.control.export
- source: default
  scopes:
    - keyword.control.default
- source: Parser
  scopes:
    - variable.other.readwrite
