{
  "version": "",
  "name": "JavaScript",
  "scopeName": "source.js",
  "fileTypes": [
    "js"
  ],
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#string"
    },
    {
      "include": "#variable"
    }
  ],
  "repository": {
    "block_comment": {
      "begin": "\\s*+(\\/\\*)",
      "end": "\\*\\/",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.comment.begin.js"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.comment.end.js"
        }
      },
      "name": "comment.block.js"
    },
    "comments": {
      "patterns": [
        {
          "include": "#block_comment"
        },
        {
          "include": "#line_comment"
        }
      ]
    },
    "inline_comment": {
      "match": "(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/))",
      "captures": {
        "1": {
          "name": "comment.block.js punctuation.definition.comment.begin.js"
        },
        "2": {
          "name": "comment.block.js"
        },
        "3": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.js punctuation.definition.comment.end.js"
            },
            {
              "match": "\\*",
              "name": "comment.block.js"
            }
          ]
        }
      }
    },
    "line_comment": {
      "begin": "\\s*+(\\/\\/)",
      "end": "(?<=\\n)(?<!\\\\\\n)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.comment.js"
        }
      },
      "endCaptures": {
      },
      "name": "comment.line.double-slash.js",
      "patterns": [
        {
          "include": "#line_continuation_character"
        }
      ]
    },
    "line_continuation_character": {
      "match": "\\\\\\n",
      "name": "constant.character.escape.line-continuation.js"
    },
    "numeric_literal": {
      "match": "(?<!\\w)\\.?\\d(?:(?:[0-9a-zA-Z_\\.]|')|(?<=[eEpP])[+-])*",
      "captures": {
        "0": {
          "patterns": [
            {
              "begin": "(?=.)",
              "end": "$",
              "beginCaptures": {
              },
              "endCaptures": {
              },
              "patterns": [
                {
                  "match": "(\\G0[xX])([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?:(?<=[0-9a-fA-F])\\.|\\.(?=[0-9a-fA-F])))([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?(?:(?<!')([pP])((?:\\+)?)((?:\\-)?)([0-9](?:[0-9]|(?<=[0-9a-fA-F])'(?=[0-9a-fA-F]))*))?([lLfF](?!\\w))?$",
                  "captures": {
                    "1": {
                      "name": "keyword.other.unit.hexadecimal.js"
                    },
                    "2": {
                      "name": "constant.numeric.hexadecimal.js",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric.js"
                        }
                      ]
                    },
                    "3": {
                      "name": "punctuation.separator.constant.numeric.js"
                    },
                    "4": {
                      "name": "constant.numeric.hexadecimal.js"
                    },
                    "5": {
                      "name": "constant.numeric.hexadecimal.js",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric.js"
                        }
                      ]
                    },
                    "6": {
                      "name": "punctuation.separator.constant.numeric.js"
                    },
                    "7": {
                      "name": "keyword.other.unit.exponent.hexadecimal.js"
                    },
                    "8": {
                      "name": "keyword.operator.plus.exponent.hexadecimal.js"
                    },
                    "9": {
                      "name": "keyword.operator.minus.exponent.hexadecimal.js"
                    },
                    "10": {
                      "name": "constant.numeric.exponent.hexadecimal.js",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric.js"
                        }
                      ]
                    },
                    "11": {
                      "name": "keyword.other.unit.suffix.floating-point.js"
                    }
                  }
                },
                {
                  "match": "\\G(?=[0-9.])(?!0[xXbB])([0-9](?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?:(?<=[0-9])\\.|\\.(?=[0-9])))([0-9](?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?(?:(?<!')([eE])((?:\\+)?)((?:\\-)?)([0-9](?:[0-9]|(?<=[0-9a-fA-F])'(?=[0-9a-fA-F]))*))?([lLfF](?!\\w))?$",
                  "captures": {
                    "1": {
                      "name": "constant.numeric.decimal.js",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric.js"
                        }
                      ]
                    },
                    "2": {
                      "name": "punctuation.separator.constant.numeric.js"
                    },
                    "3": {
                      "name": "constant.numeric.decimal.point.js"
                    },
                    "4": {
                      "name": "constant.numeric.decimal.js",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric.js"
                        }
                      ]
                    },
                    "5": {
                      "name": "punctuation.separator.constant.numeric.js"
                    },
                    "6": {
                      "name": "keyword.other.unit.exponent.decimal.js"
                    },
                    "7": {
                      "name": "keyword.operator.plus.exponent.decimal.js"
                    },
                    "8": {
                      "name": "keyword.operator.minus.exponent.decimal.js"
                    },
                    "9": {
                      "name": "constant.numeric.exponent.decimal.js",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric.js"
                        }
                      ]
                    },
                    "10": {
                      "name": "keyword.other.unit.suffix.floating-point.js"
                    }
                  }
                },
                {
                  "match": "(\\G0[bB])([01](?:[01]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)((?:[uU]|(?:[uU]ll?)|(?:[uU]LL?)|(?:ll?[uU]?)|(?:LL?[uU]?)|[fF])(?!\\w))?$",
                  "captures": {
                    "1": {
                      "name": "keyword.other.unit.binary.js"
                    },
                    "2": {
                      "name": "constant.numeric.binary.js",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric.js"
                        }
                      ]
                    },
                    "3": {
                      "name": "punctuation.separator.constant.numeric.js"
                    },
                    "4": {
                      "name": "keyword.other.unit.suffix.integer.js"
                    }
                  }
                },
                {
                  "match": "(\\G0)((?:[0-7]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))+)((?:[uU]|(?:[uU]ll?)|(?:[uU]LL?)|(?:ll?[uU]?)|(?:LL?[uU]?)|[fF])(?!\\w))?$",
                  "captures": {
                    "1": {
                      "name": "keyword.other.unit.octal.js"
                    },
                    "2": {
                      "name": "constant.numeric.octal.js",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric.js"
                        }
                      ]
                    },
                    "3": {
                      "name": "punctuation.separator.constant.numeric.js"
                    },
                    "4": {
                      "name": "keyword.other.unit.suffix.integer.js"
                    }
                  }
                },
                {
                  "match": "(\\G0[xX])([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)(?:(?<!')([pP])((?:\\+)?)((?:\\-)?)([0-9](?:[0-9]|(?<=[0-9a-fA-F])'(?=[0-9a-fA-F]))*))?((?:[uU]|(?:[uU]ll?)|(?:[uU]LL?)|(?:ll?[uU]?)|(?:LL?[uU]?)|[fF])(?!\\w))?$",
                  "captures": {
                    "1": {
                      "name": "keyword.other.unit.hexadecimal.js"
                    },
                    "2": {
                      "name": "constant.numeric.hexadecimal.js",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric.js"
                        }
                      ]
                    },
                    "3": {
                      "name": "punctuation.separator.constant.numeric.js"
                    },
                    "4": {
                      "name": "keyword.other.unit.exponent.hexadecimal.js"
                    },
                    "5": {
                      "name": "keyword.operator.plus.exponent.hexadecimal.js"
                    },
                    "6": {
                      "name": "keyword.operator.minus.exponent.hexadecimal.js"
                    },
                    "7": {
                      "name": "constant.numeric.exponent.hexadecimal.js",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric.js"
                        }
                      ]
                    },
                    "8": {
                      "name": "keyword.other.unit.suffix.integer.js"
                    }
                  }
                },
                {
                  "match": "\\G(?=[0-9.])(?!0[xXbB])([0-9](?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)(?:(?<!')([eE])((?:\\+)?)((?:\\-)?)([0-9](?:[0-9]|(?<=[0-9a-fA-F])'(?=[0-9a-fA-F]))*))?((?:[uU]|(?:[uU]ll?)|(?:[uU]LL?)|(?:ll?[uU]?)|(?:LL?[uU]?)|[fF])(?!\\w))?$",
                  "captures": {
                    "1": {
                      "name": "constant.numeric.decimal.js",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric.js"
                        }
                      ]
                    },
                    "2": {
                      "name": "punctuation.separator.constant.numeric.js"
                    },
                    "3": {
                      "name": "keyword.other.unit.exponent.decimal.js"
                    },
                    "4": {
                      "name": "keyword.operator.plus.exponent.decimal.js"
                    },
                    "5": {
                      "name": "keyword.operator.minus.exponent.decimal.js"
                    },
                    "6": {
                      "name": "constant.numeric.exponent.decimal.js",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric.js"
                        }
                      ]
                    },
                    "7": {
                      "name": "keyword.other.unit.suffix.integer.js"
                    }
                  }
                },
                {
                  "match": "(?:(?:[0-9a-zA-Z_\\.]|')|(?<=[eEpP])[+-])+",
                  "name": "invalid.illegal.constant.numeric.js"
                }
              ]
            }
          ]
        }
      }
    },
    "string": {
      "begin": "\"",
      "end": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.js"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.js"
        }
      },
      "patterns": [
        {
          "match": "\\\\.",
          "name": "constant.character.escape.js"
        }
      ]
    },
    "variable": {
      "match": "(?<!\\w)[a-zA-Z_][a-zA-Z_0-9]*(?!\\w)",
      "name": "variable.other.js"
    }
  }
}